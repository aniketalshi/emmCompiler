
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  event a(int aa);
  void foo1(int i) {
    
    print("\nIn foo1");
    print("\nOut foo1");
  };
  void foo2(int i) {
    
    print("\nIn foo2");
    print("\nOut foo2");
  };
  void foo3(int i) {
    
    print("\nIn foo3");
    print("\nOut foo3");
  };
  void foo4(int i) {
    
    print("\nIn foo4");
    print("\nOut foo4");
  };
  void foo5(int i) {
    
    print("\nIn foo5");
    print("\nOut foo5");
  };
  void foo6(int i) {
    
    print("\nIn foo6");
    print("\nOut foo6");
  };
  void foo7(int i) {
    
    print("\nIn foo7");
    print("\nOut foo7");
  };
  void foo8(int i) {
    
    print("\nIn foo8");
    print("\nOut foo8");
  };
  void foo9(int i) {
    
    print("\nIn foo9");
    print("\nOut foo9");
  };
  void foo10(int i) {
    
    print("\nIn foo10");
    print("\nOut foo10");
  };
  void foo11(int i) {
    
    print("\nIn foo11");
    print("\nOut foo11");
  };
  void foo12(int i) {
    
    print("\nIn foo12");
    print("\nOut foo12");
  };
  void foo13(int i) {
    
    print("\nIn foo13");
    print("\nOut foo13");
  };
  void foo14(int i) {
    
    print("\nIn foo14");
    print("\nOut foo14");
  };
  void foo15(int i) {
    
    print("\nIn foo15");
    print("\nOut foo15");
  };
  void foo16(int i) {
    
    print("\nIn foo16");
    print("\nOut foo16");
  };
  void foo17(int i) {
    
    print("\nIn foo17");
    print("\nOut foo17");
  };
  void foo18(int i) {
    
    print("\nIn foo18");
    print("\nOut foo18");
  };
  void foo19(int i) {
    
    print("\nIn foo19");
    print("\nOut foo19");
  };
  void foo20(int i) {
    
    print("\nIn foo20");
    print("\nOut foo20");
  };
 
  (a(int i))-->   {
    print("\nIn event");
    foo1(i);
    print("\nOut event");
  };
  ;;

========================Type Checking========================

======================3 Addr Generation======================
global:
foo1:
        enter foo1
        fparam i
        print "\nIn foo1"
        print "\nOut foo1"
        leave foo1
foo2:
        enter foo2
        fparam i
        print "\nIn foo2"
        print "\nOut foo2"
        leave foo2
foo3:
        enter foo3
        fparam i
        print "\nIn foo3"
        print "\nOut foo3"
        leave foo3
foo4:
        enter foo4
        fparam i
        print "\nIn foo4"
        print "\nOut foo4"
        leave foo4
foo5:
        enter foo5
        fparam i
        print "\nIn foo5"
        print "\nOut foo5"
        leave foo5
foo6:
        enter foo6
        fparam i
        print "\nIn foo6"
        print "\nOut foo6"
        leave foo6
foo7:
        enter foo7
        fparam i
        print "\nIn foo7"
        print "\nOut foo7"
        leave foo7
foo8:
        enter foo8
        fparam i
        print "\nIn foo8"
        print "\nOut foo8"
        leave foo8
foo9:
        enter foo9
        fparam i
        print "\nIn foo9"
        print "\nOut foo9"
        leave foo9
foo10:
        enter foo10
        fparam i
        print "\nIn foo10"
        print "\nOut foo10"
        leave foo10
foo11:
        enter foo11
        fparam i
        print "\nIn foo11"
        print "\nOut foo11"
        leave foo11
foo12:
        enter foo12
        fparam i
        print "\nIn foo12"
        print "\nOut foo12"
        leave foo12
foo13:
        enter foo13
        fparam i
        print "\nIn foo13"
        print "\nOut foo13"
        leave foo13
foo14:
        enter foo14
        fparam i
        print "\nIn foo14"
        print "\nOut foo14"
        leave foo14
foo15:
        enter foo15
        fparam i
        print "\nIn foo15"
        print "\nOut foo15"
        leave foo15
foo16:
        enter foo16
        fparam i
        print "\nIn foo16"
        print "\nOut foo16"
        leave foo16
foo17:
        enter foo17
        fparam i
        print "\nIn foo17"
        print "\nOut foo17"
        leave foo17
foo18:
        enter foo18
        fparam i
        print "\nIn foo18"
        print "\nOut foo18"
        leave foo18
foo19:
        enter foo19
        fparam i
        print "\nIn foo19"
        print "\nOut foo19"
        leave foo19
foo20:
        enter foo20
        fparam i
        print "\nIn foo20"
        print "\nOut foo20"
        leave foo20
_event_a:
        enter _event_a
        fparam i
        print "\nIn event"
        aparam i
        call foo1
L22:
        print "\nOut event"
        leave _event_a

====================== Basic Code Optimization ======================
global:
foo1:
        enter foo1
        fparam i
        print "\nIn foo1"
        print "\nOut foo1"
        leave foo1
foo2:
        enter foo2
        fparam i
        print "\nIn foo2"
        print "\nOut foo2"
        leave foo2
foo3:
        enter foo3
        fparam i
        print "\nIn foo3"
        print "\nOut foo3"
        leave foo3
foo4:
        enter foo4
        fparam i
        print "\nIn foo4"
        print "\nOut foo4"
        leave foo4
foo5:
        enter foo5
        fparam i
        print "\nIn foo5"
        print "\nOut foo5"
        leave foo5
foo6:
        enter foo6
        fparam i
        print "\nIn foo6"
        print "\nOut foo6"
        leave foo6
foo7:
        enter foo7
        fparam i
        print "\nIn foo7"
        print "\nOut foo7"
        leave foo7
foo8:
        enter foo8
        fparam i
        print "\nIn foo8"
        print "\nOut foo8"
        leave foo8
foo9:
        enter foo9
        fparam i
        print "\nIn foo9"
        print "\nOut foo9"
        leave foo9
foo10:
        enter foo10
        fparam i
        print "\nIn foo10"
        print "\nOut foo10"
        leave foo10
foo11:
        enter foo11
        fparam i
        print "\nIn foo11"
        print "\nOut foo11"
        leave foo11
foo12:
        enter foo12
        fparam i
        print "\nIn foo12"
        print "\nOut foo12"
        leave foo12
foo13:
        enter foo13
        fparam i
        print "\nIn foo13"
        print "\nOut foo13"
        leave foo13
foo14:
        enter foo14
        fparam i
        print "\nIn foo14"
        print "\nOut foo14"
        leave foo14
foo15:
        enter foo15
        fparam i
        print "\nIn foo15"
        print "\nOut foo15"
        leave foo15
foo16:
        enter foo16
        fparam i
        print "\nIn foo16"
        print "\nOut foo16"
        leave foo16
foo17:
        enter foo17
        fparam i
        print "\nIn foo17"
        print "\nOut foo17"
        leave foo17
foo18:
        enter foo18
        fparam i
        print "\nIn foo18"
        print "\nOut foo18"
        leave foo18
foo19:
        enter foo19
        fparam i
        print "\nIn foo19"
        print "\nOut foo19"
        leave foo19
foo20:
        enter foo20
        fparam i
        print "\nIn foo20"
        print "\nOut foo20"
        leave foo20
_event_a:
        enter _event_a
        fparam i
        print "\nIn event"
        aparam i
        call foo1
L22:
        print "\nOut event"
        leave _event_a

====================Basic Block creation=====================

#####_event_a#####

_event_a:
        Prev: ( )

        enter _event_a
        fparam i
        print "\nIn event"
        aparam i
        call foo1

        next: ( L22 )

L22:
        Prev: ( _event_a )

        print "\nOut event"
        leave _event_a

        next: ( )


#####foo1#####

foo1:
        Prev: ( )

        enter foo1
        fparam i
        print "\nIn foo1"
        print "\nOut foo1"
        leave foo1

        next: ( )


#####foo10#####

foo10:
        Prev: ( )

        enter foo10
        fparam i
        print "\nIn foo10"
        print "\nOut foo10"
        leave foo10

        next: ( )


#####foo11#####

foo11:
        Prev: ( )

        enter foo11
        fparam i
        print "\nIn foo11"
        print "\nOut foo11"
        leave foo11

        next: ( )


#####foo12#####

foo12:
        Prev: ( )

        enter foo12
        fparam i
        print "\nIn foo12"
        print "\nOut foo12"
        leave foo12

        next: ( )


#####foo13#####

foo13:
        Prev: ( )

        enter foo13
        fparam i
        print "\nIn foo13"
        print "\nOut foo13"
        leave foo13

        next: ( )


#####foo14#####

foo14:
        Prev: ( )

        enter foo14
        fparam i
        print "\nIn foo14"
        print "\nOut foo14"
        leave foo14

        next: ( )


#####foo15#####

foo15:
        Prev: ( )

        enter foo15
        fparam i
        print "\nIn foo15"
        print "\nOut foo15"
        leave foo15

        next: ( )


#####foo16#####

foo16:
        Prev: ( )

        enter foo16
        fparam i
        print "\nIn foo16"
        print "\nOut foo16"
        leave foo16

        next: ( )


#####foo17#####

foo17:
        Prev: ( )

        enter foo17
        fparam i
        print "\nIn foo17"
        print "\nOut foo17"
        leave foo17

        next: ( )


#####foo18#####

foo18:
        Prev: ( )

        enter foo18
        fparam i
        print "\nIn foo18"
        print "\nOut foo18"
        leave foo18

        next: ( )


#####foo19#####

foo19:
        Prev: ( )

        enter foo19
        fparam i
        print "\nIn foo19"
        print "\nOut foo19"
        leave foo19

        next: ( )


#####foo2#####

foo2:
        Prev: ( )

        enter foo2
        fparam i
        print "\nIn foo2"
        print "\nOut foo2"
        leave foo2

        next: ( )


#####foo20#####

foo20:
        Prev: ( )

        enter foo20
        fparam i
        print "\nIn foo20"
        print "\nOut foo20"
        leave foo20

        next: ( )


#####foo3#####

foo3:
        Prev: ( )

        enter foo3
        fparam i
        print "\nIn foo3"
        print "\nOut foo3"
        leave foo3

        next: ( )


#####foo4#####

foo4:
        Prev: ( )

        enter foo4
        fparam i
        print "\nIn foo4"
        print "\nOut foo4"
        leave foo4

        next: ( )


#####foo5#####

foo5:
        Prev: ( )

        enter foo5
        fparam i
        print "\nIn foo5"
        print "\nOut foo5"
        leave foo5

        next: ( )


#####foo6#####

foo6:
        Prev: ( )

        enter foo6
        fparam i
        print "\nIn foo6"
        print "\nOut foo6"
        leave foo6

        next: ( )


#####foo7#####

foo7:
        Prev: ( )

        enter foo7
        fparam i
        print "\nIn foo7"
        print "\nOut foo7"
        leave foo7

        next: ( )


#####foo8#####

foo8:
        Prev: ( )

        enter foo8
        fparam i
        print "\nIn foo8"
        print "\nOut foo8"
        leave foo8

        next: ( )


#####foo9#####

foo9:
        Prev: ( )

        enter foo9
        fparam i
        print "\nIn foo9"
        print "\nOut foo9"
        leave foo9

        next: ( )


#####global#####

global:
        Prev: ( )


        next: ( )


=========================Optimization========================


===== Uncalled Functions Removal Optimization =======
#####_event_a#####

_event_a:
        Prev: ( )

        enter _event_a
        fparam i
        print "\nIn event"
        aparam i
        call foo1

        next: ( L22 )

L22:
        Prev: ( _event_a )

        print "\nOut event"
        leave _event_a

        next: ( )


#####foo1#####

foo1:
        Prev: ( )

        enter foo1
        fparam i
        print "\nIn foo1"
        print "\nOut foo1"
        leave foo1

        next: ( )


#####foo7#####

foo7:
        Prev: ( )

        enter foo7
        fparam i
        print "\nIn foo7"
        print "\nOut foo7"
        leave foo7

        next: ( )


#####global#####

global:
        Prev: ( )


        next: ( )



=====Constant propogation and folding optimization=======
#####_event_a#####

_event_a:
        Prev: ( )

        enter _event_a
        fparam i
        print "\nIn event"
        aparam i
        call foo1

        next: ( L22 )

L22:
        Prev: ( _event_a )

        print "\nOut event"
        leave _event_a

        next: ( )


#####foo1#####

foo1:
        Prev: ( )

        enter foo1
        fparam i
        print "\nIn foo1"
        print "\nOut foo1"
        leave foo1

        next: ( )


#####foo7#####

foo7:
        Prev: ( )

        enter foo7
        fparam i
        print "\nIn foo7"
        print "\nOut foo7"
        leave foo7

        next: ( )


#####global#####

global:
        Prev: ( )


        next: ( )



 blockName: _event_a
live vars at start: 
live vars at End: 

 blockName: L22
live vars at start: 
live vars at End: 

 blockName: foo1
live vars at start: 
live vars at End: 

 blockName: foo7
live vars at start: 
live vars at End: 

=========Dead Code Elmination Optimization==================
#####_event_a#####

_event_a:
        Prev: ( )

        enter _event_a
        fparam i
        print "\nIn event"
        aparam i
        call foo1

        next: ( L22 )

L22:
        Prev: ( _event_a )

        print "\nOut event"
        leave _event_a

        next: ( )


#####foo1#####

foo1:
        Prev: ( )

        enter foo1
        fparam i
        print "\nIn foo1"
        print "\nOut foo1"
        leave foo1

        next: ( )


#####foo7#####

foo7:
        Prev: ( )

        enter foo7
        fparam i
        print "\nIn foo7"
        print "\nOut foo7"
        leave foo7

        next: ( )


#####global#####

global:
        Prev: ( )


        next: ( )


========================= Final Optimized Code ========================

#####_event_a#####

_event_a:
        Prev: ( )

        enter _event_a
        fparam i
        print "\nIn event"
        aparam i
        call foo1

        next: ( L22 )

L22:
        Prev: ( _event_a )

        print "\nOut event"
        leave _event_a

        next: ( )


#####foo1#####

foo1:
        Prev: ( )

        enter foo1
        fparam i
        print "\nIn foo1"
        print "\nOut foo1"
        leave foo1

        next: ( )


#####foo7#####

foo7:
        Prev: ( )

        enter foo7
        fparam i
        print "\nIn foo7"
        print "\nOut foo7"
        leave foo7

        next: ( )


#####global#####

global:
        Prev: ( )


        next: ( )


===================Final Code generation=====================
JMP begin
_S_a: MOVL _S_END R005
STI R005 R000           // Return Addr Pushed on Stack
SUB R000 4 R000
PRTS"Enter Param 1: "
INI R005           // READ Event Parameter Input
STI R005 R000           // Parameter Pushed on Stack
SUB R000 4 R000
JMP _event_a

_S_END: IN R005           // Dummy Instruction
_S_START: PRTS "\nEnter Event Name ('0' for exit): "
IN R005
JMPC EQ R005 97 _S_a
JMPC EQ R005 48 _S_EXIT
PRTS "Invalid Event Name\n"
JMP _S_END

begin: MOVI  10000 R000           // RSP Initialized
JMP global

// Function/Event Module begins
_event_a: ADD  R000 4  R000
LDI  R000 R020           // Parameter Popped from Stack
PRTS "\nIn event"
STI  R020  R000
SUB  R000 4  R000
MOVL L23 R021
STI  R021  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI R020  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  foo1
L23: ADD  R000 4  R000
LDI  R000 R020
L22: PRTS "\nOut event"
ADD  R000 4  R000
LDI  R000  R004           // Return Addr Popped from Stack
JMPI  R004
// Function/Event Module Ends

// Function/Event Module begins
foo1: ADD  R000 4  R000
LDI  R000 R022           // Parameter Popped from Stack
PRTS "\nIn foo1"
PRTS "\nOut foo1"
ADD  R000 4  R000
LDI  R000  R004           // Return Addr Popped from Stack
JMPI  R004
// Function/Event Module Ends

// Function/Event Module begins
foo7: ADD  R000 4  R000
LDI  R000 R023           // Parameter Popped from Stack
PRTS "\nIn foo7"
PRTS "\nOut foo7"
ADD  R000 4  R000
LDI  R000  R004           // Return Addr Popped from Stack
JMPI  R004
// Function/Event Module Ends

global: JMP _S_START

_S_EXIT: PRTS "Successfully Exited\n"


Compilation Successful
