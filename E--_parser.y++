%{

#include "Ast.h"
#include "ParserUtil.h"
#include "Error.h"

using namespace std;

extern int verbosity;
extern int yylex();
extern void yyerror(const char *s);
int offSet;
extern const OpNode::OpInfo opInfo[];

#define prt(x) //cout << x << endl;

static Type                   *curType      = NULL;
static vector<ExprNode*>      *curExprList  = NULL;
static list<StmtNode*>        *curStmtList1 = NULL;
static list<StmtNode*>        *curStmtList3 = NULL;
static vector<Type*>          *curTypeList  = NULL; 
static vector<VariableEntry*> *curVarList   = NULL; 
static FunctionEntry          *curFuncEnt   = NULL;
static EventEntry             *curEventEnt  = NULL;
static RuleBlockEntry         *curRBlkNode  = NULL;

static EventEntry* getEventEntry(char *eventName) {
    SymTabEntry *sym = stm.lookUp(string(eventName));
    if (sym && sym->type()->tag() == Type::EVENT) {
        return (EventEntry*) sym;
    }
    errMsg((string)"Expected an event name, but got \"" + (string)eventName + (string)"\"");
    return NULL;
}

static Type* getUserType(char *typeName) {
    SymTabEntry *sym = stm.lookUp(string(typeName));
    if (sym && sym->type()->tag() == Type::CLASS) {
        return sym->type();
    } else {
        errMsg((string)"Undeclared type \"" + (string)typeName + (string)"\"");
        return new Type(Type::VOID);
    }
}

static bool IsFuncSymEntry(SymTabEntry *sym) {
    if (sym && sym->kind() == SymTabEntry::Kind::FUNCTION_KIND)
        return true;
    return false;
}

static bool IsEventSymEntry(SymTabEntry *sym) {
    if (sym && sym->kind() == SymTabEntry::Kind::EVENT_KIND)
        return true;
    return false;
}

static bool IsCurRuleBlockEntry() {
    return curRBlkNode ? true : false;
}

static VariableEntry* allocVarEntry(string name, VariableEntry::VarKind v, Type* type, ExprNode* init) {
    VariableEntry *retVarEnt = (VariableEntry*)stm.lookUpInScope(name, stm.currentScope()->kind());

    if (retVarEnt) {
        errMsg((string)"Redefinition of name " + name);
    } else {
        retVarEnt = new VariableEntry(name, v, type, init, yylinenum, yycolumnno, string(yyfilename));
        stm.insert(retVarEnt);
    }

    return retVarEnt;
}

static ClassEntry* allocClassEntry(char* name) {
    assert(name != NULL);
    ClassEntry *retClassEnt = (ClassEntry*)stm.lookUpInScope(name, stm.currentScope()->kind());

    if (retClassEnt) {
        errMsg((string)"Redefinition of name " + name);
    } else {
        retClassEnt = new ClassEntry(string(name), yylinenum, yycolumnno, string(yyfilename));
        Type *te = new Type(retClassEnt, Type::CLASS);
        retClassEnt->type(te);
        stm.insert(retClassEnt);
        stm.enterScope(retClassEnt);
    }
    return retClassEnt;
}

static EventEntry* allocEventEntry(char* name = NULL, vector<Type*>* param_l = NULL) {
    EventEntry* retEventEnt = curEventEnt;

    if (retEventEnt) {
        assert(name != NULL);
        if (IsEventSymEntry(stm.lookUp(string(name)))) {
            errMsg((string)"Redefinition of name " + name);
        }
        Type *te = new Type(param_l, Type::EVENT);
        retEventEnt->name(name);
        retEventEnt->type(te);
        curEventEnt = NULL;
    } else {
        retEventEnt = new EventEntry(string("dummy_entry"), yylinenum, yycolumnno, string(yyfilename));
        stm.enterScope(retEventEnt);
    }

    return retEventEnt;
}

static FunctionEntry* allocFuncEntry(char* name = NULL, Type* rettype = NULL, vector<Type*>* param_l = NULL) {
    FunctionEntry* retFuncEnt = curFuncEnt;

    if (retFuncEnt) {
        assert(name != NULL);
        if (IsFuncSymEntry(stm.lookUp(string(name)))) {
            errMsg((string)"Redefinition of name " + name);
        }
        Type *te = new Type(param_l, rettype);
        retFuncEnt->name(name);
        retFuncEnt->type(te);
        curFuncEnt = NULL;
    } else {
        retFuncEnt = new FunctionEntry(string("dummy_func"), NULL, yylinenum, yycolumnno, string(yyfilename));
        stm.enterScope(retFuncEnt);
    }
    return retFuncEnt;
}

static RefExprNode* allocRefExprNode(char* str) {
    assert(str != NULL);
    SymTabEntry *sym = stm.lookUp(string(str));
    if (sym == NULL) {
        errMsg((string)"Undeclared identifier \"" + (string)str + (string)"\"");
    }
    return new RefExprNode(string(str), sym, yylinenum, yycolumnno, string(yyfilename));
}

static InvocationNode* allocInvNode(char* str, vector<ExprNode*>* param_l) {
    assert(str != NULL);
    SymTabEntry *sym = stm.lookUp(string(str));

    if (strcmp(str, "print") == 0) {
        sym = new FunctionEntry(string("print"), NULL);
    } else if (!(IsFuncSymEntry(sym) || IsEventSymEntry(sym))) {
        errMsg((string)"\"" + (string)str + (string)"\" is not a function or module name");
        return NULL;
    }
    return new InvocationNode(sym, param_l, yylinenum, yycolumnno, string(yyfilename));
}

static ValueNode* allocValueNode(Value* val) {
    return new ValueNode(val, yylinenum, yycolumnno, string(yyfilename));
}

static OpNode* allocOpNode(OpNode::OpCode op, ExprNode *l, ExprNode *r) {
    assert(l);
    return new OpNode(op, l, r, yylinenum, yycolumnno, string(yyfilename));
}

static ExprStmtNode* allocExprStmtNode(ExprNode* e) {
    return new ExprStmtNode(e, yylinenum, yycolumnno, string(yyfilename));
}

static ReturnStmtNode* allocReturnNode(ExprNode* e) {
    if (IsCurRuleBlockEntry())
        errMsg((string)"Return statement is valid only within a function");
    return new ReturnStmtNode(e, (FunctionEntry*)stm.currentScope(SymTabEntry::Kind::FUNCTION_KIND));
}

static BreakStmtNode* allocBreakNode(ExprNode* e) {
    //if (IsCurRuleBlockEntry())
    //    errMsg((string)"Return statement is valid only within a function");
    //return new BreakStmtNode(e, (FunctionEntry*)stm.currentScope(SymTabEntry::Kind::FUNCTION_KIND));
    return new BreakStmtNode(e);
}

static IfNode* allocIfNode(ExprNode* cond, StmtNode* thenStmt, StmtNode* elseStmt) {
    return new IfNode(cond, thenStmt, elseStmt, yylinenum, yycolumnno, string(yyfilename));
}

static WhileNode* allocWhileNode(ExprNode* cond, StmtNode* bodyStmt) {
    return new WhileNode(cond, bodyStmt, yylinenum, yycolumnno, string(yyfilename));
}

static CompoundStmtNode* allocCompStmtNode(list<StmtNode*> *Slist) {
    if (!Slist) Slist = new list<StmtNode*>;
    return new CompoundStmtNode(Slist, yylinenum, yycolumnno, string(yyfilename));
}

static CompoundStmtNode* allocScopeNode(CompoundStmtNode* node) {
    CompoundStmtNode *retCompNode = allocCompStmtNode(new list<StmtNode*>);
    retCompNode->add(node);
    return retCompNode;
}

static PrimitivePatNode* allocPrimPatNode(EventEntry* ee, vector<VariableEntry*>* params, ExprNode* c) {
    if (ee)
        return new PrimitivePatNode(ee, params, c, yylinenum, yycolumnno, string(yyfilename));
    return NULL;
}

static PatNode* allocPatNode(BasePatNode::PatNodeKind pk, BasePatNode *p1, BasePatNode *p2) {
    if (p1 && 
        ((pk == BasePatNode::PatNodeKind::NEG || pk == BasePatNode::PatNodeKind::STAR) ||
        ((pk == BasePatNode::PatNodeKind::OR  || pk == BasePatNode::PatNodeKind::SEQ) && p2)))
    {
        return new PatNode(pk, p1, p2, yylinenum, yycolumnno, string(yyfilename));
    }
    return NULL;
}

static RuleNode* allocRuleNode(BasePatNode* pat, StmtNode* reaction) {
    RuleNode *retRuleNode = NULL;

    if (pat) {
        retRuleNode = new RuleNode(curRBlkNode, pat, reaction, yylinenum, yycolumnno, string(yyfilename));
        GlobalEntry *globalSymEnt = (GlobalEntry*) stm.currentScope(SymTabEntry::Kind::GLOBAL_KIND);
        globalSymEnt->addRule(retRuleNode);
    }
    stm.leaveScope();
    curRBlkNode = NULL;

    return retRuleNode;
}

static RuleBlockEntry* allocRuleBlockNode() {
    if (!curRBlkNode) {
        curRBlkNode = new RuleBlockEntry(yylinenum, yycolumnno, string(yyfilename));
        stm.enterScope(curRBlkNode);
    }
    return curRBlkNode;
}

%}

%union {
    unsigned int        uVal;
    double              dVal;
    char*               cVal;
    vector<string>*     strVector;
    Value*              valVal;

    ExprNode*           exprVal;
    vector<ExprNode*>*  exprList;
    RefExprNode*        refexpVal;

    ClassEntry*         classEntry;
    Type*               typeVal;
    vector<Type*>*      typeList; 

    FunctionEntry*      functionEntry;
    EventEntry*         eventEntry;                        
    VariableEntry*      variableEntry;
    vector<VariableEntry*>* varList;

    StmtNode*           stmtVal;
    list<StmtNode*>*    stmtList;
    IfNode*             ifVal;
    WhileNode*          whileVal;
    BreakStmtNode*      breakVal;
    CompoundStmtNode*   stmt_plusVal;
    RuleNode*           ruleNode;

    BasePatNode*        patVal;
    PrimitivePatNode*   primPatVal;
    vector<RuleNode*>*  transList;

    const OpNode::OpInfo*   funIval;
};

%expect 1

/* Operators */

%token TOK_LEX_ERROR TOK_PAT_STAR TOK_PAT_OR TOK_PAT_NOT
%token TOK_PLUS TOK_MINUS TOK_UMINUS TOK_MULT TOK_DIV TOK_MOD 
%token TOK_BITAND TOK_BITOR TOK_BITNOT TOK_BITXOR TOK_SHL TOK_SHR 
%token TOK_GT TOK_LT TOK_GE TOK_LE TOK_EQ  TOK_NE TOK_AND TOK_OR TOK_NOT 
%token TOK_COMMA TOK_ASSIGN TOK_SEMICOLON TOK_COLON TOK_ARROW TOK_QMARK
%token TOK_LBRACE TOK_RBRACE TOK_LPAREN TOK_RPAREN TOK_LBRACK TOK_RBRACK

/* Key words */

%token TOK_IF TOK_ELSE TOK_CLASS TOK_RETURN TOK_EVENT TOK_ANY TOK_PRINT TOK_WHILE TOK_BREAK
%token TOK_UINTNUM TOK_DOUBLENUM TOK_VOID TOK_STRING TOK_STRCONST 
%token TOK_INT TOK_UNSIGNED TOK_BOOL TOK_BYTE TOK_DOUBLE TOK_SHORT TOK_LONG TOK_BIT TOK_ENUM
%token TOK_TRUE TOK_FALSE TOK_IDENT

/******************************** Type Info ********************************/

%type <functionEntry> function_decl function_proto
%type <variableEntry> global_decl global_l global_var local_decl local_l local_var
%type <classEntry>  class_decl
%type <eventEntry> event_decl any_event normal_event 

%type <refexpVal> ref_expr
%type <valVal> literal
%type <exprVal> expression func_invocation assignment binary_operation unary_operation condition
%type <typeVal> type intType baseType func_param event_param 
%type <typeList> func_param_l event_param_l
%type <exprList> caller_param_l
%type <varList> event_aparam_l
%type <ifVal> if_then_else_stmt 
%type <whileVal> while_stmt 
%type <stmtVal> simple_stmt basic_block TOK_SEMICOLON
%type <stmt_plusVal> compound_stmt1 compound_stmt2 stmt_plus1 empty_block function_defn function_body 
%type <stmtList> stmt_plus2
%type <breakVal> break_stmt 

%type <ruleNode> rule
%type <stmtVal> rule_stmts
%type <patVal> primitive_all binary_event_oprs

%type <cVal> TOK_IDENT TOK_PRINT func_name
%type <uVal> TOK_UINTNUM 
%type <dVal> TOK_DOUBLENUM 
%type <cVal> TOK_STRCONST


/*********************   Precedence and Associativity    ********************/

%nonassoc TOK_ASSIGN
%left  TOK_PAT_OR 
%left  TOK_COLON
%left  TOK_PAT_STAR
%right TOK_PAT_NOT
%left  TOK_OR
%left  TOK_AND
%right TOK_NOT
%nonassoc TOK_EQ TOK_NE TOK_GT TOK_LT TOK_GE TOK_LE
%left  TOK_BITOR TOK_BITXOR
%left  TOK_BITAND
%right TOK_BITNOT 
%left  TOK_SHL TOK_SHR
%right TOK_DOUBLE_COLON
%left  TOK_PLUS TOK_MINUS
%left  TOK_MULT TOK_DIV TOK_MOD
%right TOK_UMINUS 
%left  TOK_LBRACK
%left  TOK_DOT

/**************************************************************************/

%start s_specification
%%

s_specification:    specification                                           {   prt("Spec");    }
                  ;

specification:      specification declaration
                  | specification rule
                  |
                  ;

declaration:        event_decl                                              {   stm.leaveScope();   stm.insert($1); }
                  | function_proto                                          {   stm.leaveScope();   stm.insert($1); }
                  | class_decl                                              {   stm.leaveScope();                   }
                  | global_decl
                  ;

rule:               primitive_all TOK_ARROW rule_stmts                      {   $$ = allocRuleNode($1, $3); prt("Rule");   }
                  ;

rule_stmts:         compound_stmt2 semi_colon                               {   $$ = $1;    }
                  | compound_stmt2                                          {   $$ = $1;    }
                  | expression semi_colon                                   {   $$ = allocExprStmtNode($1); prt("AssignStmt");  }
                  |            semi_colon                                   {   $$ = allocExprStmtNode(NULL);   }
                  ;

compound_stmt2:     TOK_LBRACE compound_stmt2            TOK_RBRACE         {   $$ = allocScopeNode($2);    prt("CompoundStmt");   }
                  | TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE         {   $$ = allocScopeNode($2);    prt("CompoundStmt");   }
                  | compound_stmt1                                          {   $$ = $1;    } 
                  ;

compound_stmt1:     TOK_LBRACE stmt_plus1 TOK_RBRACE                        {   $$ = allocCompStmtNode(curStmtList1); curStmtList1 = NULL;  prt("CompoundStmt");  }
                  | TOK_LBRACE semi_colon TOK_RBRACE                        {   $$ = allocCompStmtNode(new list<StmtNode*>);                prt("CompoundStmt");  }
                  ;

stmt_plus1:         stmt_plus1 simple_stmt                                  {   if (!curStmtList1) curStmtList1 = new list<StmtNode*>; curStmtList1->push_back($2);}
                  |
                  ;

primitive_all:      normal_event                                            {   $$ = allocPrimPatNode($1, curVarList, NULL);    curVarList = NULL;    prt("PrimitivePat"); }
                  | any_event                                               {   $$ = allocPrimPatNode($1, curVarList, NULL);    curVarList = NULL;    prt("PrimitivePat"); }
                  | normal_event TOK_BITOR expression                       {   $$ = allocPrimPatNode($1, curVarList, $3);      curVarList = NULL;    prt("PrimitivePatWithCond");  }
                  | binary_event_oprs                                       {   $$ = $1;                        }
                  | TOK_LPAREN primitive_all TOK_RPAREN                     {   $$ = $2;    prt("(EventPat)");  }
                  ;

binary_event_oprs:  primitive_all   TOK_PAT_OR      primitive_all           {   $$ = allocPatNode(BasePatNode::PatNodeKind::OR  , $1, $3);   prt("EventPat \\/ EventPat");  }
                  | primitive_all   TOK_COLON       primitive_all           {   $$ = allocPatNode(BasePatNode::PatNodeKind::SEQ , $1, $3);   prt("EventPat : EventPat");    }
                  | primitive_all   TOK_PAT_STAR                            {   $$ = allocPatNode(BasePatNode::PatNodeKind::STAR, $1, NULL); prt("EventPat **");            }
                  |                 TOK_NOT         primitive_all           {   $$ = allocPatNode(BasePatNode::PatNodeKind::NEG , $2, NULL); prt("!EventPat");              }
                  ;

any_event:          TOK_ANY                                                 {   allocRuleBlockNode();   $$ = any;   prt("anyEvent");    }
                  ;

normal_event:       TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN          {   $$ = getEventEntry($1);             prt("NormalEvent"); }
                  ;

event_aparam_l:   
                    event_aparam_l TOK_COMMA TOK_IDENT                      {   curVarList->push_back(allocVarEntry($3, VariableEntry::UNDEFINED, new Type(Type::UNKNOWN), NULL)); prt("EventFormalParam");}
                  | TOK_IDENT                                               {   allocRuleBlockNode(); curVarList = new vector<VariableEntry*>(); 
                                                                                curVarList->push_back(allocVarEntry($1, VariableEntry::UNDEFINED, new Type(Type::UNKNOWN), NULL)); prt("EventFormalParam");}
                  |
                  ;

while_stmt:  	    TOK_WHILE condition basic_block                         {   $$ = allocWhileNode($2, $3);  prt("WhileStatement"); }
                  ;

if_then_else_stmt:  TOK_IF condition basic_block                            {   $$ = allocIfNode($2, $3, NULL); prt("IfThenStmt");          }
                  | TOK_IF condition basic_block TOK_ELSE basic_block       {   $$ = allocIfNode($2, $3, $5);   prt("IfThenElseStmt");      }
                  ;

basic_block:        TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon             {   $$ = allocCompStmtNode($2); prt("CompoundStmt");   }
                  | TOK_LBRACE stmt_plus2 TOK_RBRACE                        {   $$ = allocCompStmtNode($2); prt("CompoundStmt");   }
                  | empty_block                                             {   $$ = $1;                                                    }
                  | simple_stmt                                             {   $$ = $1;                                                    }
                  | semi_colon                                              {   $$ = allocExprStmtNode(NULL);                               }
                  ;

stmt_plus2:         stmt_plus2 simple_stmt                                  {   if($2) $$->push_back($2);                               }
                  | simple_stmt                                             {   $$ = new list<StmtNode*>; if($1) $$->push_back($1);     }
                  ;

simple_stmt:        func_invocation semi_colon                              {   $$ = allocExprStmtNode($1); prt("FunctionInvocationStmt");  }
                  | assignment semi_colon                                   {   $$ = allocExprStmtNode($1); prt("AssignStmt");              }
                  | if_then_else_stmt                                       {   $$ = $1;                                                    }
                  | TOK_RETURN expression semi_colon                        {   $$ = allocReturnNode($2);   prt("ReturnStmt");              }
                  | TOK_RETURN semi_colon                                   {   $$ = allocReturnNode(NULL); prt("ReturnStmt");              }
		  | while_stmt  					    {   $$ = $1;						    }
                  | break_stmt                                              {   $$ = $1;                                                    }
                  ;

break_stmt:         TOK_BREAK semi_colon  				    {	$$ = allocBreakNode(NULL);   prt("BreakStmt");		    }
		  | TOK_BREAK expression semi_colon			    {   $$ = allocBreakNode($2);     prt("BreakStmt");		    }
                  ;

empty_block:        TOK_LBRACE semi_colon TOK_RBRACE semi_colon             {   $$ = allocCompStmtNode(new list<StmtNode*>); prt("CompoundStmt");  }
                  | TOK_LBRACE semi_colon TOK_RBRACE                        {   $$ = allocCompStmtNode(new list<StmtNode*>); prt("CompoundStmt");  }
                  ;

condition:          TOK_LPAREN expression TOK_RPAREN                        {   $$ = $2;    prt("(Expr)"); }
                  ;

func_invocation:    func_name TOK_LPAREN caller_param_l TOK_RPAREN          {   $$ = allocInvNode($1, curExprList); curExprList = NULL; prt("FunctionInvocation"); }
                  | func_name TOK_LPAREN TOK_RPAREN                         {   $$ = allocInvNode($1, NULL);                            prt("FunctionInvocation"); }
                  ;

func_name:          TOK_IDENT                                               {   $$ = $1;                }
                  | TOK_PRINT                                               {   $$ = (char*)"print";    }
                  ;

caller_param_l:     caller_param_l TOK_COMMA expression                     {   curExprList->push_back($3);                                             }
                  | expression                                              {   curExprList = new vector<ExprNode*>(); curExprList->push_back($1);      }
                  ;

assignment:         ref_expr TOK_ASSIGN expression                          {   $$ = allocOpNode(OpNode::OpCode::ASSIGN, $1, $3); prt("Assignment");    }
                  ;

expression:         literal                                                 {   $$ = allocValueNode($1);    }
                  | ref_expr                                                {   $$ = $1;                    }
                  | func_invocation                                         {   $$ = $1;                    }
                  | assignment                                              {   $$ = $1;                    }
                  | unary_operation                                         {   $$ = $1;                    }
                  | binary_operation                                        {   $$ = $1;                    }
                  | TOK_LPAREN expression TOK_RPAREN                        {   $$ = $2;    prt("(Expr)");  }
                  ;

unary_operation:    TOK_NOT expression                                      {   $$ = allocOpNode(OpNode::OpCode::NOT   , $2, NULL); prt("!Expr");         }
                  | TOK_BITNOT expression                                   {   $$ = allocOpNode(OpNode::OpCode::BITNOT, $2, NULL); prt("~Expr");         }
                  | TOK_MINUS expression %prec TOK_UMINUS                   {   $$ = allocOpNode(OpNode::OpCode::UMINUS, $2, NULL); prt("-Expr");         }
                  ;

binary_operation:   expression TOK_OR          expression                   {   $$ = allocOpNode(OpNode::OpCode::OR    , $1, $3); prt("Expr || Expr");    }
                  | expression TOK_AND         expression                   {   $$ = allocOpNode(OpNode::OpCode::AND   , $1, $3); prt("Expr && Expr");    }
                  | expression TOK_EQ          expression                   {   $$ = allocOpNode(OpNode::OpCode::EQ    , $1, $3); prt("Expr == Expr");    }
                  | expression TOK_NE          expression                   {   $$ = allocOpNode(OpNode::OpCode::NE    , $1, $3); prt("Expr != Expr");    }
                  | expression TOK_GT          expression                   {   $$ = allocOpNode(OpNode::OpCode::GT    , $1, $3); prt("Expr > Expr");     }
                  | expression TOK_LT          expression                   {   $$ = allocOpNode(OpNode::OpCode::LT    , $1, $3); prt("Expr < Expr");     }
                  | expression TOK_GE          expression                   {   $$ = allocOpNode(OpNode::OpCode::GE    , $1, $3); prt("Expr >= Expr");    }
                  | expression TOK_LE          expression                   {   $$ = allocOpNode(OpNode::OpCode::LE    , $1, $3); prt("Expr <= Expr");    }
                  | expression TOK_BITOR       expression                   {   $$ = allocOpNode(OpNode::OpCode::BITOR , $1, $3); prt("Expr | Expr");     }
                  | expression TOK_BITXOR      expression                   {   $$ = allocOpNode(OpNode::OpCode::BITXOR, $1, $3); prt("Expr ^ Expr");     }
                  | expression TOK_BITAND      expression                   {   $$ = allocOpNode(OpNode::OpCode::BITAND, $1, $3); prt("Expr & Expr");     }
                  | expression TOK_SHL         expression                   {   $$ = allocOpNode(OpNode::OpCode::SHL   , $1, $3); prt("Expr << Expr");    }
                  | expression TOK_SHR         expression                   {   $$ = allocOpNode(OpNode::OpCode::SHR   , $1, $3); prt("Expr >> Expr");    }
                  | expression TOK_PLUS        expression                   {   $$ = allocOpNode(OpNode::OpCode::PLUS  , $1, $3); prt("Expr + Expr");     }
                  | expression TOK_MINUS       expression                   {   $$ = allocOpNode(OpNode::OpCode::MINUS , $1, $3); prt("Expr - Expr");     }
                  | expression TOK_MULT        expression                   {   $$ = allocOpNode(OpNode::OpCode::MULT  , $1, $3); prt("Expr * Expr");     }
                  | expression TOK_DIV         expression                   {   $$ = allocOpNode(OpNode::OpCode::DIV   , $1, $3); prt("Expr / Expr");     }
                  | expression TOK_MOD         expression                   {   $$ = allocOpNode(OpNode::OpCode::MOD   , $1, $3); prt("Expr % Expr");     }
                  ;

ref_expr:           TOK_IDENT                                               {   $$ = allocRefExprNode($1); prt("RefExpr"); }
                  ;

global_decl:        type global_l semi_colon
                  ;

global_l:           global_l TOK_COMMA global_var
                  | global_var
                  ;

global_var:         TOK_IDENT                                               {   $$ = allocVarEntry($1, VariableEntry::GLOBAL_VAR, curType, nullptr); prt("VariableDecl");   }
                  | TOK_IDENT TOK_ASSIGN expression                         {   $$ = allocVarEntry($1, VariableEntry::GLOBAL_VAR, curType, $3); prt("VariableDeclWithInit");}
                  ;

class_decl:         TOK_CLASS TOK_IDENT semi_colon                          {   $$ = allocClassEntry($2); prt("ClassDecl");  }
                  ;

function_proto:     function_decl semi_colon                                {   $$ = $1;                    }
                  | function_decl function_defn                             {   $1->body($2);   $$ = $1;    }
                  ;

function_defn:      TOK_LBRACE function_body TOK_RBRACE semi_colon          {   $$ = allocCompStmtNode(curStmtList3);        curStmtList3 = NULL;     prt("FunctionBody");  }
                  | TOK_LBRACE function_body TOK_RBRACE                     {   $$ = allocCompStmtNode(curStmtList3);        curStmtList3 = NULL;     prt("FunctionBody");  }
                  ;

function_body:      function_body local_decl
                  | function_body simple_stmt                               {   if (!curStmtList3) curStmtList3 = new list<StmtNode*>; curStmtList3->push_back($2);}
                  |
                  ;

local_decl:         type local_l semi_colon
                  ;

local_l:            local_l TOK_COMMA local_var
                  | local_var
                  ;

local_var:          TOK_IDENT                                               {   $$ = allocVarEntry($1, VariableEntry::LOCAL_VAR, curType, nullptr); prt("VariableDecl");    }
                  | TOK_IDENT TOK_ASSIGN expression                         {   $$ = allocVarEntry($1, VariableEntry::LOCAL_VAR, curType, $3); prt("VariableDeclWithInit"); }
                  ;

function_decl:      type TOK_IDENT func_param_l                             {   $$ = allocFuncEntry($2, $1, curTypeList);   curTypeList = NULL;     prt("FunctionDecl");  }
                  ;

func_param_l:       TOK_LPAREN func_param_l TOK_RPAREN                      {   prt("FormalParamList");     }
                  | func_param_l TOK_COMMA func_param                       {   curTypeList->push_back($3); }
                  | func_param                                              {   curTypeList = new vector<Type*>(); curTypeList->push_back($1);  }
                  | TOK_LPAREN TOK_RPAREN                                   {   curFuncEnt = allocFuncEntry();  }
                  ;
func_param:         type TOK_IDENT                                          {   if (!curFuncEnt) curFuncEnt = allocFuncEntry();  
                                                                                $$ = $1; allocVarEntry($2, VariableEntry::PARAM_VAR, $1, nullptr);  prt("FormalParam"); }
                  ;

event_decl:         TOK_EVENT TOK_IDENT event_param_l semi_colon            {   $$ = allocEventEntry($2, curTypeList);  curTypeList = NULL;     prt("EventDecl");   }
                  ;

event_param_l:      TOK_LPAREN event_param_l TOK_RPAREN                     {   prt("FormalParamList");         }
                  | event_param_l TOK_COMMA event_param                     {   curTypeList->push_back($3);     }
                  | event_param                                             {   curTypeList = new vector<Type*>(); curTypeList->push_back($1);}
                  | TOK_LPAREN TOK_RPAREN                                   {   curEventEnt = allocEventEntry();}
                  ;

event_param:        type TOK_IDENT                                          {   if (!curEventEnt) curEventEnt = allocEventEntry();  
                                                                                $$ = $1; allocVarEntry($2, VariableEntry::PARAM_VAR, $1, nullptr); prt("FormalParam");}
                  ;

semi_colon:         semi_colon TOK_SEMICOLON
                  | TOK_SEMICOLON
                  ;

literal:          
                    TOK_UINTNUM                                             {   $$ = new Value($1, Type::UINT); prt("Literal");     }
                  | TOK_DOUBLENUM                                           {   $$ = new Value($1);             prt("Literal");     }
                  | TOK_STRCONST                                            {   $$ = new Value($1);             prt("Literal");     }
                  | TOK_TRUE                                                {   $$ = new Value(true);           prt("Literal");     }
                  | TOK_FALSE                                               {   $$ = new Value(false);          prt("Literal");     }
                  ;

type:               baseType                                                {   $$ = curType = $1;                  prt("Type");    }
                  | intType                                                 {   $$ = curType = $1;                  prt("Type");    }
                  | TOK_IDENT                                               {   $$ = curType = getUserType($1);     prt("Type");    }
                  | TOK_UNSIGNED baseType                                   {   $$ = curType = new Type(Type::VOID);prt("Type");
                                                                                errMsg("Invalid use of keyword \"unsigned\"");      }
                  ;

baseType:           TOK_VOID                                                {   $$ = new Type(Type::VOID);    }
                  | TOK_BOOL                                                {   $$ = new Type(Type::BOOL);    }
                  | TOK_BYTE                                                {   $$ = new Type(Type::BYTE);    }
                  | TOK_STRING                                              {   $$ = new Type(Type::STRING);  }
                  | TOK_DOUBLE                                              {   $$ = new Type(Type::DOUBLE);  }
                  ;

intType:            TOK_INT                                                 {   $$ = new Type(Type::INT);     }
                  | TOK_UNSIGNED TOK_INT                                    {   $$ = new Type(Type::UINT);    }
                  ;

%%
