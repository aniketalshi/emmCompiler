%{

#include "Ast.h"
#include "ParserUtil.h"
#include "Error.h"

using namespace std;

extern int verbosity;
extern int yylex();
extern void yyerror(const char *s);
int offSet;
extern const OpNode::OpInfo opInfo[];

#define prt(x) cout << x << endl;

static VariableEntry* allocVarEntry(string name, VariableEntry::VarKind v, Type* type, ExprNode* init) {
    return new VariableEntry(name, v, type, init, yylineno, yycolumnno, string(yyfilename));
}

static ClassEntry* allocClassEntry(char* name) {
    assert(name != NULL);
    ClassEntry* classEnt = new ClassEntry(string(name), yylineno, yycolumnno, string(yyfilename));
    SymTabEntry* sym = NULL; // symtab_lookup (name)
    Type *te = new Type(sym, Type::CLASS);
    classEnt->type(te);

    return classEnt;
}

static EventEntry* allocEventEntry(char* name, vector<Type*>* param_l) {
    assert(name != NULL);
    EventEntry* eventEnt = new EventEntry(string(name), yylineno, yycolumnno, string(yyfilename));
    Type *te = new Type(param_l, Type::EVENT);
    eventEnt->type(te);

    return eventEnt;
}

static FunctionEntry* allocFuncEntry(char* name, Type* type, vector<Type*>* param_l) {
    assert(name != NULL);
    Type *te = new Type(param_l, type);
    return new FunctionEntry(string(name), te, yylineno, yycolumnno, string(yyfilename));
}

static RefExprNode* allocRefExprNode(char* str) {
    assert(str != NULL);
    SymTabEntry* sym = NULL; // symtab_lookup (str)
    return new RefExprNode(string(str), sym, yylineno, yycolumnno, string(yyfilename));
}

static InvocationNode* allocInvNode(char* str, vector<ExprNode*>* param_l) {
    SymTabEntry* sym = NULL; // symtab_lookup (str)
    return new InvocationNode(sym, param_l, yylineno, yycolumnno, string(yyfilename));
}

static ValueNode* allocValueNode(Value* val) {
    return new ValueNode(val, yylineno, yycolumnno, string(yyfilename));
}

static OpNode* allocOpNode(OpNode::OpCode op, ExprNode *l, ExprNode *r) {
    return new OpNode(op, l, r, yylineno, yycolumnno, string(yyfilename));
}

static ExprStmtNode* allocExprStmtNode(ExprNode* e) {
    return new ExprStmtNode(e, yylineno, yycolumnno, string(yyfilename));
}

static IfNode* allocIfNode(ExprNode* cond, StmtNode* thenStmt, StmtNode* elseStmt) {
    return new IfNode(cond, thenStmt, elseStmt, yylineno, yycolumnno, string(yyfilename));
}

static CompoundStmtNode* allocCompStmtNode(list<StmtNode*> *Slist) {
    return new CompoundStmtNode(Slist, yylineno, yycolumnno, string(yyfilename));
}

static PrimitivePatNode* allocPrimPatNode(EventEntry* ee, vector<VariableEntry*>* params, ExprNode* c) {
    return new PrimitivePatNode(ee, params, c, yylineno, yycolumnno, string(yyfilename));
}

static PatNode* allocPatNode(BasePatNode::PatNodeKind pk, BasePatNode *p1, BasePatNode *p2) {
    return new PatNode(pk, p1, p2, yylineno, yycolumnno, string(yyfilename));
}

static RuleNode* allocRuleNode(BlockEntry *re, BasePatNode* pat, StmtNode* reaction) {
    return new RuleNode(re, pat, reaction, yylineno, yycolumnno, string(yyfilename));
}

static RuleBlockEntry* allocRuleBlockEntry() {
    return new RuleBlockEntry(yylineno, yycolumnno, string(yyfilename));
}

Type*                   curType     = NULL;
vector<ExprNode*>*      curExprList = NULL;
list<StmtNode*>*        curStmtList = NULL;
vector<Type*>*          curTypeList = NULL; 
vector<VariableEntry*>* curVarList  = NULL; 

%}

%union {
    unsigned int        uVal;
    double              dVal;
    char*               cVal;
    vector<string>*     strVector;
    Value*              valVal;

    ExprNode*           exprVal;
    vector<ExprNode*>*  exprList;
    RefExprNode*        refexpVal;

    ClassEntry*         classEntry;
    Type*               typeVal;
    vector<Type*>*      typeList; 

    FunctionEntry*      functionEntry;
    EventEntry*         eventEntry;                        
    VariableEntry*      variableEntry;
    vector<VariableEntry*>* varList;

    StmtNode*           stmtVal;
    list<StmtNode*>*    stmtList;
    IfNode*             ifVal;
    CompoundStmtNode*   compoundStmtVal;
    RuleNode*           ruleNode;

    BasePatNode*        patVal;
    PrimitivePatNode*   primPatVal;
    vector<RuleNode*>*  transList;

    const OpNode::OpInfo*   funIval;
};

/* Operators */

%token TOK_LEX_ERROR TOK_PAT_STAR TOK_PAT_OR TOK_PAT_NOT
%token TOK_PLUS TOK_MINUS TOK_UMINUS TOK_MULT TOK_DIV TOK_MOD 
%token TOK_BITAND TOK_BITOR TOK_BITNOT TOK_BITXOR TOK_SHL TOK_SHR 
%token TOK_GT TOK_LT TOK_GE TOK_LE TOK_EQ  TOK_NE TOK_AND TOK_OR TOK_NOT 
%token TOK_COMMA TOK_ASSIGN TOK_SEMICOLON TOK_COLON TOK_ARROW
%token TOK_LBRACE TOK_RBRACE TOK_LPAREN TOK_RPAREN

/* Key words */

%token TOK_IF TOK_ELSE TOK_CLASS TOK_RETURN TOK_EVENT TOK_ANY TOK_PRINT 
%token TOK_UINTNUM TOK_DOUBLENUM TOK_VOID TOK_STRING TOK_STRCONST 
%token TOK_INT TOK_UNSIGNED TOK_BOOL TOK_BYTE TOK_DOUBLE TOK_SHORT
%token TOK_TRUE TOK_FALSE TOK_IDENT

/******************************** Type Info ********************************/
/* Uncomment types below as you start adding rules.
   They are commented right now to prevent compile errors.
%type <functionEntry> function_header function_decl
%type <variableEntry> variable_decl formal_param variable_decl1
%type <typeList> formal_param_list formal_param_plus 
%type <eventEntry> event_decl_hdr event_decl
%type <patVal> event_pattern rule_body1
%type <primPatVal> event primitive_pat 
%type <typeVal> type baseType 
%type <exprList> expr_list expr_plus
%type <exprVal> expr function_invocation asg_stmt
%type <refexpVal> ref_expr
%type <ruleNode> rule
%type <strVector> id_list id_plus

%type <cVal> TOK_IDENT TOK_PRINT 
%type <funIval> ev_or_fun
%type <uVal> TOK_UINTNUM 
%type <dVal> TOK_DOUBLENUM 
%type <cVal> TOK_STRCONST

%type <valVal> literal

%type <stmtList> stmt_plus
%type <stmtVal> stmt simple_stmt
%type <compoundStmtVal> compoundStmt fun_rest
%type <ifVal>  if_then_else_stmt 
*/

%type <functionEntry> function_decl function_proto
%type <variableEntry> global_decl global_l global_init_l local_decl local_l local_init_l
%type <classEntry>  class_decl
%type <eventEntry> event_decl any_event normal_event 

%type <refexpVal> ref_expr
%type <valVal> literal
%type <exprVal> expression func_invocation assignment binary_operation unary_operation condition
%type <typeVal> type baseType func_param event_param 
%type <typeList> func_param_l event_param_l
%type <exprList> caller_param_l
%type <varList> event_aparam_l
%type <ifVal> if_then_else_stmt 
%type <stmtVal> simple_stmt basic_block 
%type <compoundStmtVal> compoundStmt empty_block function_defn function_body

%type <ruleNode> rule
%type <stmtVal> rule_stmts
%type <patVal> primitive_all binary_event_oprs

%type <cVal> TOK_IDENT TOK_PRINT 
%type <uVal> TOK_UINTNUM 
%type <dVal> TOK_DOUBLENUM 
%type <cVal> TOK_STRCONST


/*********************   Precedence and Associativity    ********************/

%expect 1

%nonassoc TOK_ASSIGN
%left  TOK_PAT_OR 
%left  TOK_COLON
%left  TOK_PAT_STAR
%right TOK_PAT_NOT
%left  TOK_OR
%left  TOK_AND
%right TOK_NOT
%nonassoc TOK_EQ TOK_NE TOK_GT TOK_LT TOK_GE TOK_LE
%left  TOK_BITOR TOK_BITXOR
%left  TOK_BITAND
%right TOK_BITNOT 
%left  TOK_SHL TOK_SHR
%right TOK_DOUBLE_COLON
%left  TOK_PLUS TOK_MINUS
%left  TOK_MULT TOK_DIV TOK_MOD
%right TOK_UMINUS 
%left  TOK_LBRACK
%left  TOK_DOT

/**************************************************************************/

%start s_specification
%%

s_specification:    program                                                 {   prt("Spec");    }
                  ;

program:            specification
                  ;

specification:      specification declaration
                  | specification rule
                  |
                  ;

declaration:        event_decl
                  | function_proto
                  | class_decl
                  | global_decl
                  ;

rule:               primitive_all TOK_ARROW rule_stmts                      {   $$ = allocRuleNode(allocRuleBlockEntry(), $1, $3); prt("Rule"); }
                  ;

rule_stmts:         TOK_LBRACE compoundStmt TOK_RBRACE TOK_SEMICOLON        {   $$ = allocCompStmtNode(curStmtList); curStmtList = NULL; prt("CompoundStmt");   }
                  | TOK_LBRACE compoundStmt TOK_RBRACE                      {   $$ = allocCompStmtNode(curStmtList); curStmtList = NULL; prt("CompoundStmt");   }
                  | empty_block TOK_SEMICOLON                               {   $$ = $1;    }
                  | empty_block                                             {   $$ = $1;    }
                  | expression TOK_SEMICOLON                                {   $$ = allocExprStmtNode($1); prt("AssignStmt");  }
                  ;

primitive_all:      normal_event                                            {   $$ = allocPrimPatNode($1, curVarList, NULL);    prt("PrimitivePat"); }
                  | any_event                                               {   $$ = allocPrimPatNode($1, curVarList, NULL);    prt("PrimitivePat"); }
                  | normal_event TOK_BITOR expression                       {   $$ = allocPrimPatNode($1, curVarList, $3);      prt("PrimitivePatWithCond");  }
                  | binary_event_oprs                                       {   $$ = $1;                        }
                  | TOK_LPAREN primitive_all TOK_RPAREN                     {   $$ = $2;    prt("(EventPat)");  }
                  ;

binary_event_oprs:  primitive_all TOK_PAT_OR      primitive_all             {   $$ = allocPatNode(BasePatNode::PatNodeKind::OR  , $1, $3);   prt("EventPat \\/ EventPat");  }
                  | primitive_all TOK_COLON       primitive_all             {   $$ = allocPatNode(BasePatNode::PatNodeKind::SEQ , $1, $3);   prt("EventPat : EventPat");    }
                  | primitive_all TOK_PAT_STAR    primitive_all             {   $$ = allocPatNode(BasePatNode::PatNodeKind::STAR, $1, $3);   prt("EventPat **");            }
                  | TOK_NOT   primitive_all                                 {   $$ = allocPatNode(BasePatNode::PatNodeKind::NEG , $2, NULL); prt("!EventPat");              }
                  |
                  ;

any_event:          TOK_ANY                                                 {   $$ = any; prt("anyEvent");   }
                  ;

normal_event:       TOK_IDENT event_aparam_l                                {   $$ = NULL; /*$$ = getEventEntry($1);*/ prt("NormalEvent");   }
                  ;

event_aparam_l:     TOK_LPAREN event_aparam_l TOK_RPAREN                    
                  | event_aparam_l TOK_COMMA TOK_IDENT                      {    curVarList->push_back(allocVarEntry($3, VariableEntry::PARAM_VAR, NULL, NULL)); prt("EventFormalParam");}
                  | TOK_IDENT     {   curVarList = new vector<VariableEntry*>(); curVarList->push_back(allocVarEntry($1, VariableEntry::PARAM_VAR, NULL, NULL)); prt("EventFormalParam");}
                  | TOK_LPAREN TOK_RPAREN
                  ;


compoundStmt:       TOK_LBRACE compoundStmt TOK_RBRACE                      {   $$ = allocCompStmtNode(curStmtList); curStmtList = NULL; prt("CompoundStmt");   }
                  | empty_block                                             {   $$ = $1;                                                    }
                  | compoundStmt simple_stmt                                {   if (!curStmtList) curStmtList = new list<StmtNode*>; curStmtList->push_back($2);}
                  |
                  ;

simple_stmt:        func_invocation TOK_SEMICOLON                           {   $$ = allocExprStmtNode($1); prt("FunctionInvocationStmt");  }
                  | assignment TOK_SEMICOLON                                {   $$ = allocExprStmtNode($1); prt("AssignStmt");              }
                  | if_then_else_stmt                                       {   $$ = $1;                                                    }
                  ;

if_then_else_stmt:  TOK_IF condition basic_block                            {   $$ = allocIfNode($2, $3, NULL); prt("IfThenStmt");          }
                  | TOK_IF condition basic_block TOK_ELSE basic_block       {   $$ = allocIfNode($2, $3, $5);   prt("IfThenElseStmt");      }
                  ;

basic_block:        TOK_LBRACE compoundStmt TOK_RBRACE                      {   $$ = allocCompStmtNode(curStmtList); curStmtList = NULL; prt("CompoundStmt");   }
                  | empty_block                                             {   $$ = $1;                                                    }
                  | simple_stmt                                             {   $$ = $1;                                                    }
                  | TOK_SEMICOLON
                  ;

empty_block:        TOK_LBRACE TOK_SEMICOLON TOK_RBRACE                     {   $$ = allocCompStmtNode(new list<StmtNode*>); prt("CompoundStmt");  }
                  ;

condition:          TOK_LPAREN expression TOK_RPAREN                        {   $$ = $2;    prt("(Expr)"); }
                  ;

func_invocation:    TOK_IDENT TOK_LPAREN caller_param_l TOK_RPAREN          {   $$ = allocInvNode($1, curExprList); curExprList = NULL; prt("FunctionInvocation"); }
                  | TOK_IDENT TOK_LPAREN TOK_RPAREN                         {   $$ = allocInvNode($1, NULL); prt("FunctionInvocation"); }
                  ;

caller_param_l:     caller_param_l TOK_COMMA expression                     {   curExprList->push_back($3);                                             }
                  | expression                                              {   curExprList = new vector<ExprNode*>(); curExprList->push_back($1);      }
                  ;

assignment:         ref_expr TOK_ASSIGN expression                          {   $$ = allocOpNode(OpNode::OpCode::ASSIGN, $1, $3); prt("Assignment");    }

expression:         literal                                                 {   $$ = allocValueNode($1);    }
                  | ref_expr                                                {   $$ = $1;                    }
                  | func_invocation                                         {   $$ = $1;                    }
                  | assignment                                              {   $$ = $1;                    }
                  | unary_operation                                         {   $$ = $1;                    }
                  | binary_operation                                        {   $$ = $1;                    }
                  | TOK_LPAREN expression TOK_RPAREN                        {   $$ = $2;    prt("(Expr)");  }
                  ;

unary_operation:    TOK_NOT expression                                      {   $$ = allocOpNode(OpNode::OpCode::NOT   , $2, NULL); prt("!Expr");         }
                  | TOK_BITNOT expression                                   {   $$ = allocOpNode(OpNode::OpCode::BITNOT, $2, NULL); prt("~Expr");         }
                  | TOK_MINUS expression %prec TOK_UMINUS                   {   $$ = allocOpNode(OpNode::OpCode::UMINUS, $2, NULL); prt("-Expr");         }
                  ;

binary_operation:   expression TOK_OR          expression                   {   $$ = allocOpNode(OpNode::OpCode::OR    , $1, $3); prt("Expr || Expr");    }
                  | expression TOK_AND         expression                   {   $$ = allocOpNode(OpNode::OpCode::AND   , $1, $3); prt("Expr && Expr");    }
                  | expression TOK_EQ          expression                   {   $$ = allocOpNode(OpNode::OpCode::EQ    , $1, $3); prt("Expr == Expr");    }
                  | expression TOK_NE          expression                   {   $$ = allocOpNode(OpNode::OpCode::NE    , $1, $3); prt("Expr != Expr");    }
                  | expression TOK_GT          expression                   {   $$ = allocOpNode(OpNode::OpCode::GT    , $1, $3); prt("Expr > Expr");     }
                  | expression TOK_LT          expression                   {   $$ = allocOpNode(OpNode::OpCode::LT    , $1, $3); prt("Expr < Expr");     }
                  | expression TOK_GE          expression                   {   $$ = allocOpNode(OpNode::OpCode::GE    , $1, $3); prt("Expr >= Expr");    }
                  | expression TOK_LE          expression                   {   $$ = allocOpNode(OpNode::OpCode::LE    , $1, $3); prt("Expr <= Expr");    }
                  | expression TOK_BITOR       expression                   {   $$ = allocOpNode(OpNode::OpCode::BITOR , $1, $3); prt("Expr | Expr");     }
                  | expression TOK_BITXOR      expression                   {   $$ = allocOpNode(OpNode::OpCode::BITXOR, $1, $3); prt("Expr ^ Expr");     }
                  | expression TOK_BITAND      expression                   {   $$ = allocOpNode(OpNode::OpCode::BITAND, $1, $3); prt("Expr & Expr");     }
                  | expression TOK_SHL         expression                   {   $$ = allocOpNode(OpNode::OpCode::SHL   , $1, $3); prt("Expr << Expr");    }
                  | expression TOK_SHR         expression                   {   $$ = allocOpNode(OpNode::OpCode::SHR   , $1, $3); prt("Expr >> Expr");    }
                  | expression TOK_PLUS        expression                   {   $$ = allocOpNode(OpNode::OpCode::PLUS  , $1, $3); prt("Expr + Expr");     }
                  | expression TOK_MINUS       expression                   {   $$ = allocOpNode(OpNode::OpCode::MINUS , $1, $3); prt("Expr - Expr");     }
                  | expression TOK_MULT        expression                   {   $$ = allocOpNode(OpNode::OpCode::MULT  , $1, $3); prt("Expr * Expr");     }
                  | expression TOK_DIV         expression                   {   $$ = allocOpNode(OpNode::OpCode::DIV   , $1, $3); prt("Expr / Expr");     }
                  | expression TOK_MOD         expression                   {   $$ = allocOpNode(OpNode::OpCode::MOD   , $1, $3); prt("Expr % Expr");     }
                  ;

ref_expr:           TOK_IDENT                                               {   $$ = allocRefExprNode($1); prt("RefExpr"); }
                  ;

global_decl:        type global_l TOK_SEMICOLON     
                  | type global_init_l TOK_SEMICOLON
                  ;

global_l:           global_l TOK_COMMA TOK_IDENT                            {   $$ = allocVarEntry($3, VariableEntry::GLOBAL_VAR, curType, nullptr); prt("VariableDecl"); }
                  | TOK_IDENT                                               {   $$ = allocVarEntry($1, VariableEntry::GLOBAL_VAR, curType, nullptr); prt("VariableDecl"); }
                  ;

global_init_l:      global_init_l TOK_COMMA TOK_IDENT TOK_ASSIGN expression {   $$ = allocVarEntry($3, VariableEntry::GLOBAL_VAR, curType, $5); prt("VariableDeclWithInit"); }
                  | TOK_IDENT TOK_ASSIGN expression                         {   $$ = allocVarEntry($1, VariableEntry::GLOBAL_VAR, curType, $3); prt("VariableDeclWithInit"); }
                            
class_decl:         TOK_CLASS TOK_IDENT TOK_SEMICOLON TOK_SEMICOLON         {   $$ = allocClassEntry($2); prt("ClassDecl");  }
                  | TOK_CLASS TOK_IDENT TOK_SEMICOLON                       {   $$ = allocClassEntry($2); prt("ClassDecl");  }
                  ;

function_body:      function_body local_decl
                  | function_body simple_stmt                               {   if (!curStmtList) curStmtList = new list<StmtNode*>; curStmtList->push_back($2);}
                  |
                  ;

local_decl:         type local_l TOK_SEMICOLON
                  | type local_init_l TOK_SEMICOLON
                  ;

local_l:            local_l TOK_COMMA TOK_IDENT                             {   $$ = allocVarEntry($3, VariableEntry::LOCAL_VAR, curType, nullptr); prt("VariableDecl"); }
                  | TOK_IDENT                                               {   $$ = allocVarEntry($1, VariableEntry::LOCAL_VAR, curType, nullptr); prt("VariableDecl"); }
                  ;

local_init_l:       local_init_l TOK_COMMA TOK_IDENT TOK_ASSIGN expression  {   $$ = allocVarEntry($3, VariableEntry::LOCAL_VAR, curType, $5); prt("VariableDeclWithInit"); }
                  | TOK_IDENT TOK_ASSIGN expression                         {   $$ = allocVarEntry($1, VariableEntry::LOCAL_VAR, curType, $3); prt("VariableDeclWithInit"); }
                  ;

function_defn:      TOK_LBRACE function_body TOK_RBRACE TOK_SEMICOLON       {   $$ = allocCompStmtNode(curStmtList);        curStmtList = NULL;     prt("FunctionBody");  }
                  ;

function_decl:      type TOK_IDENT func_param_l                             {   $$ = allocFuncEntry($2, $1, curTypeList);   curTypeList = NULL;     prt("FunctionDecl");  }
                  ;

function_proto:     function_decl TOK_SEMICOLON                             {   $$ = $1;                    }
                  | function_decl function_defn                             {   $1->body($2);   $$ = $1;    }
                  ;
 /*
 new SymTabEntry(string name, SymTabEntry::Kind k, int lineno, int columnno, string filename, Type *t)
 stm.enterScope(ste);
 */
func_param_l:       TOK_LPAREN func_param_l TOK_RPAREN                      {   prt("FormalParamList");     }
                  | func_param_l TOK_COMMA func_param                       {   curTypeList->push_back($3); }
                  | func_param                                              {   curTypeList = new vector<Type*>(); curTypeList->push_back($1);}
                  | TOK_LPAREN TOK_RPAREN
                  ;
func_param:         type TOK_IDENT                                          {   $$ = $1; allocVarEntry($2, VariableEntry::PARAM_VAR, $1, nullptr); prt("FormalParam");  }
                  | TOK_IDENT TOK_IDENT                                     {   prt("Type"); prt("FormalParam");    }
                  ;

event_decl:         TOK_EVENT TOK_IDENT event_param_l TOK_SEMICOLON         {   $$ = allocEventEntry($2, curTypeList); curTypeList = NULL; prt("EventDecl");  }
                  ;

event_param_l:      TOK_LPAREN event_param_l TOK_RPAREN                     {   prt("FormalParamList");     }
                  | event_param_l TOK_COMMA event_param                     {   curTypeList->push_back($3);  }
                  | event_param                                             {   curTypeList = new vector<Type*>(); curTypeList->push_back($1);}
                  | TOK_LPAREN TOK_RPAREN
                  ;

event_param:        type TOK_IDENT                                          {   $$ = $1; allocVarEntry($2, VariableEntry::PARAM_VAR, $1, nullptr); prt("FormalParam");}
                  | TOK_IDENT TOK_IDENT                                     {   prt("Type"); prt("FormalParam");  }
                  ;

literal:          
                    TOK_UINTNUM                                             {   $$ = new Value($1, Type::UINT); prt("Literal");    }
                  | TOK_DOUBLENUM                                           {   $$ = new Value($1);             prt("Literal");    }
                  | TOK_STRCONST                                            {   $$ = new Value($1);             prt("Literal");    }
                  | TOK_TRUE                                                {   $$ = new Value(true);           prt("Literal");    }
                  | TOK_FALSE                                               {   $$ = new Value(false);          prt("Literal");    }
                  ;

type:               baseType                                                {   $$ = curType = $1;        prt("Type");       }
                  ;

baseType:           TOK_VOID                                                {   $$ = new Type(Type::VOID);    }
                  | TOK_BOOL                                                {   $$ = new Type(Type::BOOL);    }
                  | TOK_BYTE                                                {   $$ = new Type(Type::BYTE);    }
                  | TOK_STRING                                              {   $$ = new Type(Type::STRING);  }
                  | TOK_INT                                                 {   $$ = new Type(Type::INT);     }
                  | TOK_DOUBLE                                              {   $$ = new Type(Type::DOUBLE);  }
                  | TOK_UNSIGNED TOK_INT                                    {   $$ = new Type(Type::UINT);    }
                  ;

%%
