
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  int a = 5;
  int f(int i, int j) {
    
    a=((i+j)/2);
    return a*2;
  };
  void foo(int b) {
    
    if (((a&&a==b)&&b))     b=2;
    else     b=3;
    f(b, (b*b-1));
  };
 

========================Type Checking========================
mytests/in1:9:Warning: Incompatible type for agrument 1 for operator `&&'
mytests/in1:9:Warning: Incompatible type for agrument 2 for operator `&&'

======================Memory Allocation======================


====Global Declarations
Variable: a, Offset: 0

====Function 'f'
==Formal Parameters
Variable: i, Offset: 8
Variable: j, Offset: 12
==Local Variables


====Function 'foo'
==Formal Parameters
Variable: b, Offset: 8
==Local Variables
======================3 Addr Generation======================
L0:
        a = 5
f:
        enter f
        __vreg0 = i + j
        __vreg1 = __vreg0 / 2
        a = __vreg1
        __vreg2 = a * 2
        return __vreg2
        leave f
foo:
        enter foo
        if a goto L7:
        goto L5:
L7:
        if a == b goto L6:
        goto L5:
L6:
        if b goto L4:
        goto L5:
L4:
        b = 2
        goto L3:
L5:
        b = 3
L3:
        param b
        __vreg3 = b * b
        __vreg4 = __vreg3 - 1
        param __vreg4
        call f
        leave foo

