
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  int a = 5;
  int b = 10;
  int f(int i, int j) {
    int c = 2;
    double e = ((8.5+1.1)+c);
  
    if ((e<b&&e>c))     b=(9/2);
    else     b=9*2;
    e=(c+b);
    return c;
  };
  int bar() {
    
    if (a>0)     f(a, (a+2));
    return a;
  };
 

========================Type Checking========================

======================Memory Allocation======================


====Global Declarations
Variable: a, Offset: 0
Variable: b, Offset: 4

====Function 'f'
==Formal Parameters
Variable: i, Offset: 8
Variable: j, Offset: 12
==Local Variables
Variable: c, Offset: -4
Variable: e, Offset: -8


====Function 'bar'
==Local Variables

======================3 Addr Generation======================
global:
        a = 5
        b = 10
f:
        enter f
        fparam i
        fparam j
        c = 2
        __vreg0 = 8.5 + 1.1
        __vreg1 = __vreg0 + c
        e = __vreg1
        if e < b goto L5:
        goto L4:
L5:
        if e > c goto L3:
        goto L4:
L3:
        __vreg2 = 9 / 2
        b = __vreg2
        goto L2:
L4:
        __vreg3 = 9 * 2
        b = __vreg3
L2:
        __vreg4 = c + b
        e = __vreg4
        return c
        leave f
bar:
        enter bar
        if a > 0 goto L8:
        goto L7:
L8:
        __vreg5 = a + 2
        aparam __vreg5
        aparam a
        __vreg6 = call f
L9:
L7:
        return a
        leave bar

====================Basic Block creation=====================

====Basic Blocks Container: bar=====


PrevBlocks: 
Block Start: bar
        enter bar
        if a > 0 goto L8:
        goto L7:
Block end: bar
NextBlocks:L8,L7,

PrevBlocks: bar,
Block Start: L8
        __vreg5 = a + 2
        aparam __vreg5
        aparam a
        __vreg6 = call f
Block end: L8
NextBlocks:L9,

PrevBlocks: bar,L9,
Block Start: L7
        return a
        leave bar
Block end: L7
NextBlocks:

PrevBlocks: L8,
Block Start: L9
Block end: L9
NextBlocks:L7,

====Basic Blocks Container: f=====


PrevBlocks: 
Block Start: f
        enter f
        fparam i
        fparam j
        c = 2
        __vreg0 = 8.5 + 1.1
        __vreg1 = __vreg0 + c
        e = __vreg1
        if e < b goto L5:
        goto L4:
Block end: f
NextBlocks:L5,L4,

PrevBlocks: f,
Block Start: L5
        if e > c goto L3:
        goto L4:
Block end: L5
NextBlocks:L3,L4,

PrevBlocks: f,L5,
Block Start: L4
        __vreg3 = 9 * 2
        b = __vreg3
Block end: L4
NextBlocks:L2,

PrevBlocks: L5,
Block Start: L3
        __vreg2 = 9 / 2
        b = __vreg2
        goto L2:
Block end: L3
NextBlocks:L2,

PrevBlocks: L3,L4,
Block Start: L2
        __vreg4 = c + b
        e = __vreg4
        return c
        leave f
Block end: L2
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        a = 5
        b = 10
Block end: global
NextBlocks:global,

=========================Optimization========================

====Basic Blocks Container: bar=====


PrevBlocks: 
Block Start: bar
        enter bar
        if a > 0 goto L8:
        goto L7:
Block end: bar
NextBlocks:L8,L7,

PrevBlocks: bar,
Block Start: L8
        __vreg5 = a + 2
        aparam __vreg5
        aparam a
        __vreg6 = call f
Block end: L8
NextBlocks:L9,

PrevBlocks: bar,L9,
Block Start: L7
        return a
        leave bar
Block end: L7
NextBlocks:

PrevBlocks: L8,
Block Start: L9
Block end: L9
NextBlocks:L7,

====Basic Blocks Container: f=====


PrevBlocks: 
Block Start: f
        enter f
        fparam i
        fparam j
        c = 2
        __vreg0 = 9.6
        __vreg1 = 11.6
        e = 11.6
        if e < b goto L5:
        goto L4:
Block end: f
NextBlocks:L5,L4,

PrevBlocks: f,
Block Start: L5
        if e > c goto L3:
        goto L4:
Block end: L5
NextBlocks:L3,L4,

PrevBlocks: f,L5,
Block Start: L4
        __vreg3 = 18
        b = 18
Block end: L4
NextBlocks:L2,

PrevBlocks: L5,
Block Start: L3
        __vreg2 = 4
        b = 4
        goto L2:
Block end: L3
NextBlocks:L2,

PrevBlocks: L3,L4,
Block Start: L2
        __vreg4 = c + b
        e = __vreg4
        return c
        leave f
Block end: L2
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        a = 5
        b = 10
Block end: global
NextBlocks:global,

===================Final Code generation=====================
JMP begin: 
begin: 
MOVI  R000 10000    // RSP Initialized
JMP global: 
bar:
ADD  R000 4  R000
LDI  R000  R004
JMPC GT R020 0 L8
JMP L7

L8:
ADD R020 2 R021
STI R021  R000
SUB  R000 4  R000

STI R020  R000
SUB  R000 4  R000

STI R022  R000
SUB  R000 4  R000
JMP f
MOVI RRV_I R023

L7:
MOVI R020  R001
JMP  R004
L9:
f:
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R024
ADD  R000 4  R000
LDI  R000 R025
MOVI 2  R026
MOVF 9.6  F010
MOVF 11.6  F011
MOVF 11.6  F012
MOVIF R027 F013
JMPC FGT F013 F012 L5
JMP L4

L5:
MOVIF R026 F014
JMPC FGT F012 F014 L3
JMP L4

L4:
MOVI 18  R028
MOVI 18  R027
L3:
MOVI 4  R029
MOVI 4  R027
JMP 

L2:
ADD R026 R027 R030
MOVI R030  F012
MOVI R026  R001
JMP  R004
global:
MOVI 5  R020
MOVI 10  R027
Compilation Successful
