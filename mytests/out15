
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  event open(string a1, int a2, unsigned int a3);
  int logMessage(string x);
  bool condition;
  int i = 2;
  int j = 3;
  int k = 4;
  double f = 3.3;
  string s;
  byte bt;
  bool bo;
  bool bo1;
  bool bo2;
  bool bo3;
 
  (open(string file, int flags, unsigned int mode))-->   {
    if (((!i<6&&i<=j)||j>=k))     if ((i==j||j!=k))     {
      f=(((23*-i/j)-f)-(45%j));
    };
    else     {
      j=(i&(j|k))^(i&~j);
    };
    else     k=(k<<(j>>i));
    if (((!bo&&bo1==bo2)||bo2>=bo3))     if ((bo3!=bo1||bo>bo2))     {
      f=(((23*-i/j)-f)-(45%j));
      bo=(bo3<bo1||bo>bo2);
    };
    if (i>9)     {
      logMessage("Bad if - condition is not boolean - but it i int");
    };
    if (((i+f)+k)>9)     {
      logMessage("float + int in condition");
    };
    if (((i/f)+k)>9)     {
      logMessage("float condition");
    };
    if ((i/(f+k))>9)     {
      logMessage("Bad if - condition is float - this is an err");
    };
    else     {
      logMessage("OK");
    };
    if (bo)     {
      logMessage("boolean condition");
    };
  };
  ;;

========================Type Checking========================

======================Memory Allocation======================


====Global Declarations

====Event 'open'
Variable: a1, Offset: 0
Variable: a2, Offset: 4
Variable: a3, Offset: 8


====Function 'logMessage'
==Formal Parameters
Variable: x, Offset: 8

Variable: condition, Offset: 0
Variable: i, Offset: 4
Variable: j, Offset: 8
Variable: k, Offset: 12
Variable: f, Offset: 16
Variable: s, Offset: 20
Variable: bt, Offset: 24
Variable: bo, Offset: 28
Variable: bo1, Offset: 32
Variable: bo2, Offset: 36
Variable: bo3, Offset: 40
======================3 Addr Generation======================
GLOBAL:
        i = 2
        j = 3
        k = 4
        f = 3.3

====================Basic Block creation=====================
Compilation Successful
