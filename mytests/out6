
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  class CString;
  class CString x;
  class CString y;
  int i1;
  int i2;
  int i3 = 0;
  double d1 = 3;
  double d2;
  double d3;
  unsigned int i4 = 0;
  bool b1 = true;
  bool b2 = false;
  byte y2;
  string cs1;
  string cs2;
  string cs3 = "sdsd";
  event open(int a1, int a2, unsigned int a3);
  int logMessage(string x);
  void g() {
    int a1;
    int a2;
  
    a1=1;
  };
 
  (open(int file, int flags, unsigned int mode))-->   {
    logMessage("open: testing almost nothing");
  };
  ;;
  (open(int file, int flags, unsigned int mode))-->   {
    g();
  };
  ;;

========================Type Checking========================

======================Memory Allocation======================


====Global Declarations

====Class 'CString'

Variable: x, Offset: 0
Variable: y, Offset: 4
Variable: i1, Offset: 8
Variable: i2, Offset: 12
Variable: i3, Offset: 16
Variable: d1, Offset: 20
Variable: d2, Offset: 24
Variable: d3, Offset: 28
Variable: i4, Offset: 32
Variable: b1, Offset: 36
Variable: b2, Offset: 40
Variable: y2, Offset: 44
Variable: cs1, Offset: 48
Variable: cs2, Offset: 52
Variable: cs3, Offset: 56

====Event 'open'
Variable: a1, Offset: 0
Variable: a2, Offset: 4
Variable: a3, Offset: 8


====Function 'logMessage'
==Formal Parameters
Variable: x, Offset: 8


====Function 'g'
==Local Variables
Variable: a1, Offset: -4
Variable: a2, Offset: -8

======================3 Addr Generation======================
global:
        i3 = 0
        d1 = 3.0
        i4 = 0
        b1 = 1
        b2 = 0
        cs3 = "sdsd"
g:
        enter g
        a1 = 1
        leave g
_event_open:
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        aparam "open: testing almost nothing"
        __vreg2 = call logMessage
L3:
        leave _event_open
_event_open:
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        call g
L5:
        leave _event_open

====================Basic Block creation=====================

====Basic Blocks Container: _event_open=====


PrevBlocks: 
Block Start: _event_open
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        aparam "open: testing almost nothing"
        __vreg2 = call logMessage
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        call g
Block end: _event_open
NextBlocks:L3,L5,

PrevBlocks: _event_open,
Block Start: L3
        leave _event_open
Block end: L3
NextBlocks:

PrevBlocks: _event_open,
Block Start: L5
        leave _event_open
Block end: L5
NextBlocks:

====Basic Blocks Container: g=====


PrevBlocks: 
Block Start: g
        enter g
        a1 = 1
        leave g
Block end: g
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        i3 = 0
        d1 = 3.0
        i4 = 0
        b1 = 1
        b2 = 0
        cs3 = "sdsd"
Block end: global
NextBlocks:global,

=========================Optimization========================

====Basic Blocks Container: _event_open=====


PrevBlocks: 
Block Start: _event_open
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        aparam "open: testing almost nothing"
        __vreg2 = call logMessage
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        call g
Block end: _event_open
NextBlocks:L3,L5,

PrevBlocks: _event_open,
Block Start: L3
        leave _event_open
Block end: L3
NextBlocks:

PrevBlocks: _event_open,
Block Start: L5
        leave _event_open
Block end: L5
NextBlocks:

====Basic Blocks Container: g=====


PrevBlocks: 
Block Start: g
        enter g
        a1 = 1
        leave g
Block end: g
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        i3 = 0
        d1 = 3.0
        i4 = 0
        b1 = 1
        b2 = 0
        cs3 = "sdsd"
Block end: global
NextBlocks:global,

===================Final Code generation=====================
JMP begin: 
begin: 
MOVI  R000 10000    // RSP Initialized
JMP global: 
_event_open:
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R020
ADD  R000 4  R000
LDI  R000 R021
ADD  R000 4  R000
LDI  R000 R022

SUB  R000 4  R000

STI R023  R000
SUB  R000 4  R000
JMP logMessage
MOVI RRV_I R024

ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R025
ADD  R000 4  R000
LDI  R000 R026
ADD  R000 4  R000
LDI  R000 R027
STI R028  R000
SUB  R000 4  R000
JMP g

L3:
JMP  R004
L5:
JMP  R004
g:
ADD  R000 4  R000
LDI  R000  R004
MOVI 1  R029
JMP  R004
global:
MOVI 0  R030
MOVF 3.0  F010
MOVI 0  R031
MOVI 1  R032
MOVI 0  R033
MOVI "sdsd"  R034
Compilation Successful
