
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  class CString;
  string get(class CString c);
  class ArgV;
  class pid_t;
  int getpid_t(class pid_t t);
  class SchedParamP;
  class StatP;
  class NewStatP;
  int logMessage(string x);
  int logMessageInt(string x, int y);
  int getpid();
  int isChild(class pid_t a);
  event open(double a1, int a2, unsigned int a3);
  event close(int a1);
  event lstat(int a1, int a2);
  event execve;
  event fork;
  event clone;
  event unlink(int a1);
  event kill(int a1, int a2);
  event ptrace(int a1, int a2, int a3, int a4);
  event sched_setscheduler(int a1, int a2, int a3);
  event umask(int a1);
  event write(int a1, int a2, int a3);
  event chmod(int a1, unsigned int a2);
  event truncate(int a1, int a2);
  event sysinfo(int a1);
  event sched_setparam(int a1, int a2);
  event setpriority(int a1, int a2, int a3);
  int tmp;
  int i = 2;
  int j = 3;
  int k = 4;
  double f = 3.3;
  int y;
  string state_var;
 
  ((((((kill(int a1, int a2)|((getpid_t(a1)!=getpid()&&getpid_t(a1)!=0)&&tmp=(a2&&y=a2))) \/ (ptrace(int b1, int b2, int b3, int b4))) \/ (sched_setscheduler(int c1, int c2, int c3)|((getpid_t(c1)!=getpid()&&getpid_t(c1)!=0)&&isChild(c1)!=0))) \/ (sched_setparam(int d1, int d2)|getpid_t(d1)!=getpid())) \/ (setpriority(int e1, int e2, int e3)|((getpid_t(e1)!=getpid()&&e2!=0)&&isChild(e1)!=0))):(((execve()) \/ (clone())) \/ (fork())))-->   {
    logMessage("proc_ops: testing abstract event declarations");
  };
  ;;
  ((((((open(double file, int flags, unsigned int mode))**):((any)**)):(open(double file1, int flags1, unsigned int mode1)|state_var=get(file1))):(!(close(int fd)))):(unlink(int path)|state_var==get(path)))-->   {
    logMessage("unlink path
");
  };
  ;;
  (((((((((open(double file, int flags, unsigned int mode)) \/ (close(int fd))) \/ (unlink(int file1))) \/ (chmod(int file2, unsigned int mode2))) \/ (truncate(int file3, int len)))**):(unlink(int file7))):(((write(int b1, int b2, int b3)) \/ (umask(int c1))) \/ (sysinfo(int d1)))):(open(double file4, int flags4, unsigned int mode4)))-->   {
    logMessageInt("simple pattern 3, %d", mode);
  };
  ;;

========================Type Checking========================
mytests/in18:60:Error: Type Mismatch for argument 1 to getpid_t
mytests/in18:60:Error: Type Mismatch for argument 1 to getpid_t
mytests/in18:60:Warning: Incompatible type for agrument 1 for operator `&&'
mytests/in18:60:Warning: Incompatible type for agrument 2 for operator `&&'
mytests/in18:60:Error: Assigned expression must be a subtype of target
mytests/in18:60:Warning: Incompatible type for agrument 2 for operator `&&'
mytests/in18:60:Error: Type Mismatch for argument 1 to getpid_t
mytests/in18:60:Error: Type Mismatch for argument 1 to getpid_t
mytests/in18:60:Error: Type Mismatch for argument 1 to isChild
mytests/in18:60:Error: Type Mismatch for argument 1 to getpid_t
mytests/in18:60:Error: Type Mismatch for argument 1 to getpid_t
mytests/in18:60:Error: Type Mismatch for argument 1 to isChild
mytests/in18:67:Error: Type Mismatch for argument 1 to get
mytests/in18:68:Error: Type Mismatch for argument 1 to get
mytests/in18:79:Error: 11 error(s) reported.
Compilation terminated.
