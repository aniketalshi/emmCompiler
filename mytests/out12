
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  event open(int a1, int a2, unsigned int a3);
  bool condition;
 
  (open(int file, int flags, unsigned int mode))-->   {
    if (condition)     {    };
  };
  ;;

========================Type Checking========================

======================Memory Allocation======================


====Global Declarations

====Event 'open'
Variable: a1, Offset: 0
Variable: a2, Offset: 4
Variable: a3, Offset: 8

Variable: condition, Offset: 0
======================3 Addr Generation======================
global:
_event_open:
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        if condition goto L3:
        goto L2:
L3:
L2:
        leave _event_open

====================Basic Block creation=====================

====Basic Blocks Container: _event_open=====


PrevBlocks: 
Block Start: _event_open
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        if condition goto L3:
        goto L2:
Block end: _event_open
NextBlocks:L3,L2,

PrevBlocks: _event_open,
Block Start: L3
Block end: L3
NextBlocks:

PrevBlocks: _event_open,
Block Start: L2
        leave _event_open
Block end: L2
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
Block end: global
NextBlocks:global,

=========================Optimization========================

====Basic Blocks Container: _event_open=====


PrevBlocks: 
Block Start: _event_open
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        if condition goto L3:
        goto L2:
Block end: _event_open
NextBlocks:L3,L2,

PrevBlocks: _event_open,
Block Start: L3
Block end: L3
NextBlocks:

PrevBlocks: _event_open,
Block Start: L2
        leave _event_open
Block end: L2
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
Block end: global
NextBlocks:global,

===================Final Code generation=====================
JMP begin: 
begin: 
MOVI  R000 10000    // RSP Initialized
JMP global: 
_event_open:
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R020
ADD  R000 4  R000
LDI  R000 R021
ADD  R000 4  R000
LDI  R000 R022
JMPC NE  0 L3
JMP L2

L3:
L2:
JMP  R004
global:
Compilation Successful
