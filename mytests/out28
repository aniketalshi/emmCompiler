
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  int logMessage(string x, int aa);
  int a = 5;
  int b;
  int c;
  bool condition;
  int open(string file, int a, unsigned int mode) {
    
    while (a<3)     {
      a=10;
      if (a==10)       {
        continue 1;
      };
      logMessage("Assignment in condition", 1);
      break 1;
      while (a>10)       {
        a=(b+c);
        if (a>20)         {
          continue 2;
        };
        else         {
          break 2;
        };
      };
    };
    return a;
  };
 

========================Type Checking========================

======================Memory Allocation======================


====Global Declarations

====Function 'logMessage'
==Formal Parameters
Variable: x, Offset: 8
Variable: aa, Offset: 12

Variable: a, Offset: 0
Variable: b, Offset: 4
Variable: c, Offset: 8
Variable: condition, Offset: 12

====Function 'open'
==Formal Parameters
Variable: file, Offset: 8
Variable: a, Offset: 12
Variable: mode, Offset: 16
==Local Variables

======================3 Addr Generation======================
global:
        a = 5
open:
        enter open
        fparam file
        fparam a
        fparam mode
L2:
        if a < 3 goto L3:
        goto L4:
L3:
        a = 10
        if a == 10 goto L6:
        goto L5:
L6:
        goto L2:
L5:
        aparam 1
        aparam "Assignment in condition"
        __vreg0 = call logMessage
L7:
        goto L4:
L8:
        if a > 10 goto L9:
        goto L10:
L9:
        __vreg1 = b + c
        a = __vreg1
        if a > 20 goto L12:
        goto L13:
L12:
        goto L2:
        goto L11:
L13:
        goto L4:
L11:
        goto L8:
L10:
        goto L2:
L4:
        return a
        leave open

====================Basic Block creation=====================

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        a = 5
Block end: global
NextBlocks:global,

====Basic Blocks Container: open=====


PrevBlocks: 
Block Start: open
        enter open
        fparam file
        fparam a
        fparam mode
Block end: open
NextBlocks:L2,

PrevBlocks: open,L6,L12,L10,
Block Start: L2
        if a < 3 goto L3:
        goto L4:
Block end: L2
NextBlocks:L3,L4,

PrevBlocks: L2,
Block Start: L3
        a = 10
        if a == 10 goto L6:
        goto L5:
Block end: L3
NextBlocks:L6,L5,

PrevBlocks: L2,L7,L13,
Block Start: L4
        return a
        leave open
Block end: L4
NextBlocks:

PrevBlocks: L3,
Block Start: L6
        goto L2:
Block end: L6
NextBlocks:L2,

PrevBlocks: L3,
Block Start: L5
        aparam 1
        aparam "Assignment in condition"
        __vreg0 = call logMessage
Block end: L5
NextBlocks:L7,

PrevBlocks: L5,
Block Start: L7
        goto L4:
Block end: L7
NextBlocks:L4,

PrevBlocks: L11,
Block Start: L8
        if a > 10 goto L9:
        goto L10:
Block end: L8
NextBlocks:L9,L10,

PrevBlocks: L8,
Block Start: L9
        __vreg1 = b + c
        a = __vreg1
        if a > 20 goto L12:
        goto L13:
Block end: L9
NextBlocks:L12,L13,

PrevBlocks: L8,
Block Start: L10
        goto L2:
Block end: L10
NextBlocks:L2,

PrevBlocks: L9,
Block Start: L12
        goto L2:
        goto L11:
Block end: L12
NextBlocks:L2,L11,

PrevBlocks: L9,
Block Start: L13
        goto L4:
Block end: L13
NextBlocks:L4,

PrevBlocks: L12,
Block Start: L11
        goto L8:
Block end: L11
NextBlocks:L8,

=========================Optimization========================

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        a = 5
Block end: global
NextBlocks:global,

====Basic Blocks Container: open=====


PrevBlocks: 
Block Start: open
        enter open
        fparam file
        fparam a
        fparam mode
Block end: open
NextBlocks:L2,

PrevBlocks: open,L6,L12,L10,
Block Start: L2
        if a < 3 goto L3:
        goto L4:
Block end: L2
NextBlocks:L3,L4,

PrevBlocks: L2,
Block Start: L3
        a = 10
        if a == 10 goto L6:
        goto L5:
Block end: L3
NextBlocks:L6,L5,

PrevBlocks: L2,L7,L13,
Block Start: L4
        return a
        leave open
Block end: L4
NextBlocks:

PrevBlocks: L3,
Block Start: L6
        goto L2:
Block end: L6
NextBlocks:L2,

PrevBlocks: L3,
Block Start: L5
        aparam 1
        aparam "Assignment in condition"
        __vreg0 = call logMessage
Block end: L5
NextBlocks:L7,

PrevBlocks: L5,
Block Start: L7
        goto L4:
Block end: L7
NextBlocks:L4,

PrevBlocks: L11,
Block Start: L8
        if a > 10 goto L9:
        goto L10:
Block end: L8
NextBlocks:L9,L10,

PrevBlocks: L8,
Block Start: L9
        __vreg1 = b + c
        a = __vreg1
        if a > 20 goto L12:
        goto L13:
Block end: L9
NextBlocks:L12,L13,

PrevBlocks: L8,
Block Start: L10
        goto L2:
Block end: L10
NextBlocks:L2,

PrevBlocks: L9,
Block Start: L12
        goto L2:
        goto L11:
Block end: L12
NextBlocks:L2,L11,

PrevBlocks: L9,
Block Start: L13
        goto L4:
Block end: L13
NextBlocks:L4,

PrevBlocks: L12,
Block Start: L11
        goto L8:
Block end: L11
NextBlocks:L8,

===================Final Code generation=====================
JMP begin: 
begin: 
MOVI  R000 10000    // RSP Initialized
JMP global: 
global:
MOVI 5  R020
open:
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R021
ADD  R000 4  R000
LDI  R000 R022
ADD  R000 4  R000
LDI  R000 R023
L2:
JMPC GT 3 R022 L3
JMP L4

L3:
MOVI 10  R022
JMPC EQ R022 10 L6
JMP L5

L4:
MOVI R022  R001
JMP  R004
L6:
JMP 

L5:
STI 1  R000
SUB  R000 4  R000


SUB  R000 4  R000

STI R024  R000
SUB  R000 4  R000
JMP logMessage
MOVI RRV_I R025

L7:
JMP 

L8:
JMPC GT R022 10 L9
JMP L10

L9:
ADD R027 R028 R026
MOVI R026  R022
JMPC GT R022 20 L12
JMP L13

L10:
JMP 

L12:
JMP 

JMP 

L13:
JMP 

L11:
JMP 

Compilation Successful
