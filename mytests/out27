
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  int x;
  class abc{
    int m;
    int n;
    void f(int l);
  };
  void foo(int a) {
    int b;
    int c = 5;
    class abc obj;
    class abc xyz;
  
    obj.m=5;
    obj.m=obj.n;
    obj.f(c);
    xyz.m=obj.m*2;
    xyz.n=(obj.m+xyz.n);
    xyz.f(obj.m);
  };
 

========================Type Checking========================

======================Memory Allocation======================


====Global Declarations
Variable: x, Offset: 0

====Class 'abc'
Variable: m, Offset: 0
Variable: n, Offset: 4

====Function 'f'
==Formal Parameters
Variable: l, Offset: 8



====Function 'foo'
==Formal Parameters
Variable: a, Offset: 8
==Local Variables
Variable: b, Offset: -4
Variable: c, Offset: -8
Variable: obj, Offset: -16
Variable: xyz, Offset: -24

======================3 Addr Generation======================
global:
foo:
        enter foo
        fparam a
        c = 5
        __vreg0 = 5
        __vreg2 = __vreg1
        __vreg4 = __vreg3 * 2
        __vreg5 = __vreg4
        __vreg8 = __vreg7 + __vreg6
        __vreg9 = __vreg8
        leave foo

====================Basic Block creation=====================

====Basic Blocks Container: foo=====


PrevBlocks: 
Block Start: foo
        enter foo
        fparam a
        c = 5
        __vreg0 = 5
        __vreg2 = __vreg1
        __vreg4 = __vreg3 * 2
        __vreg5 = __vreg4
        __vreg8 = __vreg7 + __vreg6
        __vreg9 = __vreg8
        leave foo
Block end: foo
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
Block end: global
NextBlocks:global,

=========================Optimization========================

====Basic Blocks Container: foo=====


PrevBlocks: 
Block Start: foo
        enter foo
        fparam a
        c = 5
        __vreg0 = 5
        __vreg2 = __vreg1
        __vreg4 = __vreg3 * 2
        __vreg5 = __vreg4
        __vreg8 = __vreg7 + __vreg6
        __vreg9 = __vreg8
        leave foo
Block end: foo
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
Block end: global
NextBlocks:global,

===================Final Code generation=====================
JMP begin: 
begin: 
MOVI  R000 10000    // RSP Initialized
JMP global: 
foo:
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R020
MOVI 5  R021
MOVI 5  R022
MOVI R024  R023
MUL R026 2 R025
MOVI R025  R027
ADD R029 R030 R028
MOVI R028  R031
JMP  R004
global:
Compilation Successful
