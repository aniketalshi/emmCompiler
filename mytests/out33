
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  event a(int bb);
  event b(int aa);
  int bar(int aa) {
    
    return (aa+1);
  };
  int foo(int a) {
    
    a=(3+bar(a));
    return a;
  };
 
  (a(int i))-->   {
    print("\nFirst Param:", i);
    i=bar(i);
    print("\nResult(bar) :", i);
  };
  ;;
  (b(int i))-->   {
    print("\nFirst Param:", i);
    i=foo(i);
    print("\nResult(foo) :", i);
  };
  ;;

========================Type Checking========================

======================3 Addr Generation======================
global:
bar:
        enter bar
        fparam aa
        __vreg2 = aa + 1
        return __vreg2
        leave bar
foo:
        enter foo
        fparam a
        aparam a
        __vreg3 = call bar
L3:
        __vreg4 = 3 + __vreg3
        a = __vreg4
        return a
        leave foo
_event_a:
        enter _event_a
        fparam i
        print "\nFirst Param:"
        print i
        aparam i
        __vreg5 = call bar
L5:
        i = __vreg5
        print "\nResult(bar) :"
        print i
        leave _event_a
_event_b:
        enter _event_b
        fparam i
        print "\nFirst Param:"
        print i
        aparam i
        __vreg6 = call foo
L7:
        i = __vreg6
        print "\nResult(foo) :"
        print i
        leave _event_b

====================Basic Block creation=====================

#####_event_a#####
_event_a:
        enter _event_a
        fparam i
        print "\nFirst Param:"
        print i
        aparam i
        __vreg5 = call bar
        next: ( L5 )
L5:
        i = __vreg5
        print "\nResult(bar) :"
        print i
        leave _event_a
        next: ( )


#####_event_b#####
_event_b:
        enter _event_b
        fparam i
        print "\nFirst Param:"
        print i
        aparam i
        __vreg6 = call foo
        next: ( L7 )
L7:
        i = __vreg6
        print "\nResult(foo) :"
        print i
        leave _event_b
        next: ( )


#####bar#####
bar:
        enter bar
        fparam aa
        __vreg2 = aa + 1
        return __vreg2
        leave bar
        next: ( )


#####foo#####
foo:
        enter foo
        fparam a
        aparam a
        __vreg3 = call bar
        next: ( L3 )
L3:
        __vreg4 = 3 + __vreg3
        a = __vreg4
        return a
        leave foo
        next: ( )


#####global#####
global:
        next: ( )
global:
        next: ( )


===================Final Code generation=====================
JMP begin
_S_a: MOVL _S_START R005
STI R005 R000           // Return Addr Pushed on Stack
SUB R000 4 R000
INI R005           // READ Event Parameter Input
STI R005 R000           // Parameter Pushed on Stack
SUB R000 4 R000
JMP _event_a

_S_b: MOVL _S_START R005
STI R005 R000           // Return Addr Pushed on Stack
SUB R000 4 R000
INI R005           // READ Event Parameter Input
STI R005 R000           // Parameter Pushed on Stack
SUB R000 4 R000
JMP _event_b

_S_START: PRTS "\nEnter event name:"
IN R005
JMPC EQ R005 97 _S_a
JMPC EQ R005 98 _S_b
JMPC EQ R005 120 _S_END
PRTS "Invalid Input\n"
JMP _S_START

begin: MOVI  10000 R000           // RSP Initialized
JMP global

// Function/Event Module begins
_event_a: ADD  R000 4  R000
LDI  R000 R020           // Parameter Poped from Stack
PRTS "\nFirst Param:"
PRTI R020
STI  R020  R000
SUB  R000 4  R000
MOVL L8 R021
STI  R021  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI R020  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  bar
L8: MOVI  R001 R022
ADD  R000 4  R000
LDI  R000 R020
L5: MOVI R022 R020
PRTS "\nResult(bar) :"
PRTI R020
ADD  R000 4  R000
LDI  R000  R004           // Return Addr Poped from Stack
JMPI  R004
// Function/Event Module Ends

// Function/Event Module begins
_event_b: ADD  R000 4  R000
LDI  R000 R023           // Parameter Poped from Stack
PRTS "\nFirst Param:"
PRTI R023
STI  R023  R000
SUB  R000 4  R000
MOVL L9 R024
STI  R024  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI R023  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  foo
L9: MOVI  R001 R025
ADD  R000 4  R000
LDI  R000 R023
L7: MOVI R025 R023
PRTS "\nResult(foo) :"
PRTI R023
ADD  R000 4  R000
LDI  R000  R004           // Return Addr Poped from Stack
JMPI  R004
// Function/Event Module Ends

// Function/Event Module begins
bar: ADD  R000 4  R000
LDI  R000 R026           // Parameter Poped from Stack
ADD R026 1 R027
MOVI R027  R001
ADD  R000 4  R000
LDI  R000  R004           // Return Addr Poped from Stack
JMPI  R004
ADD  R000 4  R000
LDI  R000  R004           // Return Addr Poped from Stack
JMPI  R004
// Function/Event Module Ends

// Function/Event Module begins
foo: ADD  R000 4  R000
LDI  R000 R028           // Parameter Poped from Stack
STI  R028  R000
SUB  R000 4  R000
MOVL L10 R029
STI  R029  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI R028  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  bar
L10: MOVI  R001 R030
ADD  R000 4  R000
LDI  R000 R028
L3: ADD 3 R030 R031
MOVI R031 R028
MOVI R028  R001
ADD  R000 4  R000
LDI  R000  R004           // Return Addr Poped from Stack
JMPI  R004
ADD  R000 4  R000
LDI  R000  R004           // Return Addr Poped from Stack
JMPI  R004
// Function/Event Module Ends

global: global: JMP _S_START

_S_END: PRTS "DONE"


Compilation Successful
