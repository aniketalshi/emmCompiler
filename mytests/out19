
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  event a(int x);
  event b(int y, int z);
  event c(int a, int b, int c);
  int z;
  int f;
  int g;
  int w;
  int j;
  int y;
 
  (a(int e))-->   z=(z+1);
  ;;
  (((a(int h)) \/ (b(int y, int w))):((c(int f, int g, int w1))**))-->   z=1;
  ;;
  ((a(int h)) \/ ((b(int y, int w)):((c(int f, int g, int w1))**)))-->   z=1;
  ;;
  ((a(int i)) \/ ((b(int y, int w)):(c(int f, int g, int w1))))-->   z=w;
  ;;
  (((a(int i)) \/ (b(int y, int w))):(c(int f, int g, int w1)))-->   z=w;
  ;;
  ((a(int j)) \/ (b(int y, int w)|j==w))-->   z=j;
  ;;
  (a(int k))-->   z=(k+y);
  ;;
  ((a(int i)):(!(b(int y, int w)|j=w)))-->   z=j;
  ;;

========================Type Checking========================

======================Memory Allocation======================


====Global Declarations

====Event 'a'
Variable: x, Offset: 0


====Event 'b'
Variable: y, Offset: 0
Variable: z, Offset: 4


====Event 'c'
Variable: a, Offset: 0
Variable: b, Offset: 4
Variable: c, Offset: 8

Variable: z, Offset: 0
Variable: f, Offset: 4
Variable: g, Offset: 8
Variable: w, Offset: 12
Variable: j, Offset: 16
Variable: y, Offset: 20
======================3 Addr Generation======================
global:
_event_a:
        enter _event_a
        fparam e
        __vreg8 = z + 1
        z = __vreg8
        leave _event_a
_event_a:
        enter _event_a
        fparam k
        __vreg9 = k + y
        z = __vreg9
        leave _event_a

====================Basic Block creation=====================

====Basic Blocks Container: _event_a=====


PrevBlocks: 
Block Start: _event_a
        enter _event_a
        fparam e
        __vreg8 = z + 1
        z = __vreg8
        leave _event_a
        enter _event_a
        fparam k
        __vreg9 = k + y
        z = __vreg9
        leave _event_a
Block end: _event_a
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
Block end: global
NextBlocks:global,

=========================Optimization========================

====Basic Blocks Container: _event_a=====


PrevBlocks: 
Block Start: _event_a
        enter _event_a
        fparam e
        __vreg8 = z + 1
        z = __vreg8
        leave _event_a
        enter _event_a
        fparam k
        __vreg9 = k + y
        z = __vreg9
        leave _event_a
Block end: _event_a
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
Block end: global
NextBlocks:global,

===================Final Code generation=====================
JMP begin: 
begin: 
MOVI  R000 10000    // RSP Initialized
JMP global: 
_event_a:
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R020
ADD R022 1 R021
MOVI R021  R022
JMP  R004
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R023
ADD R023 R025 R024
MOVI R024  R022
JMP  R004
global:
Compilation Successful
