
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  event open(int a1, int a2, unsigned int a3);
  int logMessage(string x);
  bool condition;
  int i = 2;
  int j = 3;
  int k = 4;
  double f = 3.3;
  string s;
  byte bt;
  bool bo;
  bool bo1;
  bool bo2;
  bool bo3;
 
  (open(int file, int flags, unsigned int mode))-->   {
    if (((!i<6&&i<=j)||j>=k))     if ((i<j||j>k))     {
      f=(((23*-i/j)-f)-(45%j));
    };
    else     {
      j=(i&(j|k))^(i&~j);
    };
    else     k=(k<<(j>>i));
    if (((!bo&&bo1<=bo2)||bo2>=bo3))     if ((bo3<bo1||bo>bo2))     {
      f=(((23*-i/j)-f)-(45%j));
      bo=(bo3<bo1||bo>bo2);
    };
    if (i>9)     {
      logMessage("Bad if - condition is not boolean - but it i int");
    };
    if ((i+f)>9)     {
      logMessage("float + int in condition");
    };
    if ((i/f)>9)     {
      logMessage("float condition");
    };
    if (f>9)     {
      logMessage("Bad if - condition is float - this is an err");
    };
    else     {
      logMessage("OK");
    };
    if (bo)     {
      logMessage("boolean condition");
    };
  };
  ;;

========================Type Checking========================

======================3 Addr Generation======================
global:
        i = 2
        j = 3
        k = 4
        f = 3.3
_event_open:
        enter _event_open
        fparam mode
        fparam flags
        fparam file
        if i < 6 goto L5:
        goto L6:
L6:
        if i <= j goto L3:
        goto L5:
L5:
        if j >= k goto L3:
        goto L4:
L3:
        if i < j goto L8:
        goto L10:
L10:
        if j > k goto L8:
        goto L9:
L8:
        __vreg1 = -i
        __vreg2 = 23 * __vreg1
        __vreg3 = __vreg2 / j
        __vreg4 = __vreg3 - f
        __vreg5 = 45 % j
        __vreg6 = __vreg4 - __vreg5
        f = __vreg6
        goto L7:
L9:
        __vreg7 = j | k
        __vreg8 = i & __vreg7
        __vreg9 = ~j
        __vreg10 = i & __vreg9
        __vreg11 = __vreg8 ^ __vreg10
        j = __vreg11
L7:
        goto L2:
L4:
        __vreg12 = j >> i
        __vreg13 = k << __vreg12
        k = __vreg13
L2:
        if bo goto L13:
        goto L14:
L14:
        if bo1 <= bo2 goto L12:
        goto L13:
L13:
        if bo2 >= bo3 goto L12:
        goto L11:
L12:
        if bo3 < bo1 goto L16:
        goto L17:
L17:
        if bo > bo2 goto L16:
        goto L15:
L16:
        __vreg14 = -i
        __vreg15 = 23 * __vreg14
        __vreg16 = __vreg15 / j
        __vreg17 = __vreg16 - f
        __vreg18 = 45 % j
        __vreg19 = __vreg17 - __vreg18
        f = __vreg19
        __vreg20 = bo3 < bo1
        __vreg21 = bo > bo2
        __vreg22 = __vreg20 || __vreg21
        bo = __vreg22
L15:
L11:
        if i > 9 goto L19:
        goto L18:
L19:
        aparam "Bad if - condition is not boolean - but it i int"
        __vreg23 = call logMessage
L20:
L18:
        __vreg24 = i + f
        if __vreg24 > 9 goto L22:
        goto L21:
L22:
        aparam "float + int in condition"
        __vreg25 = call logMessage
L23:
L21:
        __vreg26 = i / f
        if __vreg26 > 9 goto L25:
        goto L24:
L25:
        aparam "float condition"
        __vreg27 = call logMessage
L26:
L24:
        if f > 9 goto L28:
        goto L29:
L28:
        aparam "Bad if - condition is float - this is an err"
        __vreg28 = call logMessage
L30:
        goto L27:
L29:
        aparam "OK"
        __vreg29 = call logMessage
L31:
L27:
        if bo goto L33:
        goto L32:
L33:
        aparam "boolean condition"
        __vreg30 = call logMessage
L34:
L32:
        leave _event_open

====================Basic Block creation=====================

#####_event_open#####
_event_open:
        enter _event_open
        fparam mode
        fparam flags
        fparam file
        if i < 6 goto L5:
        goto L6:
        next: ( L5 L6 )
L6:
        if i <= j goto L3:
        goto L5:
        next: ( L3 L5 )
L5:
        if j >= k goto L3:
        goto L4:
        next: ( L3 L4 )
L3:
        if i < j goto L8:
        goto L10:
        next: ( L8 L10 )
L10:
        if j > k goto L8:
        goto L9:
        next: ( L8 L9 )
L8:
        __vreg1 = -i
        __vreg2 = 23 * __vreg1
        __vreg3 = __vreg2 / j
        __vreg4 = __vreg3 - f
        __vreg5 = 45 % j
        __vreg6 = __vreg4 - __vreg5
        f = __vreg6
        goto L7:
        next: ( L7 )
L9:
        __vreg7 = j | k
        __vreg8 = i & __vreg7
        __vreg9 = ~j
        __vreg10 = i & __vreg9
        __vreg11 = __vreg8 ^ __vreg10
        j = __vreg11
        next: ( L7 )
L7:
        goto L2:
        next: ( L2 )
L4:
        __vreg12 = j >> i
        __vreg13 = k << __vreg12
        k = __vreg13
        next: ( L2 )
L2:
        if bo goto L13:
        goto L14:
        next: ( L13 L14 )
L14:
        if bo1 <= bo2 goto L12:
        goto L13:
        next: ( L12 L13 )
L13:
        if bo2 >= bo3 goto L12:
        goto L11:
        next: ( L12 L11 )
L12:
        if bo3 < bo1 goto L16:
        goto L17:
        next: ( L16 L17 )
L17:
        if bo > bo2 goto L16:
        goto L15:
        next: ( L16 L15 )
L16:
        __vreg14 = -i
        __vreg15 = 23 * __vreg14
        __vreg16 = __vreg15 / j
        __vreg17 = __vreg16 - f
        __vreg18 = 45 % j
        __vreg19 = __vreg17 - __vreg18
        f = __vreg19
        __vreg20 = bo3 < bo1
        __vreg21 = bo > bo2
        __vreg22 = __vreg20 || __vreg21
        bo = __vreg22
        next: ( L15 )
L15:
        next: ( L11 )
L11:
        if i > 9 goto L19:
        goto L18:
        next: ( L19 L18 )
L19:
        aparam "Bad if - condition is not boolean - but it i int"
        __vreg23 = call logMessage
        next: ( L20 )
L20:
        next: ( L18 )
L18:
        __vreg24 = i + f
        if __vreg24 > 9 goto L22:
        goto L21:
        next: ( L22 L21 )
L22:
        aparam "float + int in condition"
        __vreg25 = call logMessage
        next: ( L23 )
L23:
        next: ( L21 )
L21:
        __vreg26 = i / f
        if __vreg26 > 9 goto L25:
        goto L24:
        next: ( L25 L24 )
L25:
        aparam "float condition"
        __vreg27 = call logMessage
        next: ( L26 )
L26:
        next: ( L24 )
L24:
        if f > 9 goto L28:
        goto L29:
        next: ( L28 L29 )
L28:
        aparam "Bad if - condition is float - this is an err"
        __vreg28 = call logMessage
        next: ( L30 )
L30:
        goto L27:
        next: ( L27 )
L29:
        aparam "OK"
        __vreg29 = call logMessage
        next: ( L31 )
L31:
        next: ( L27 )
L27:
        if bo goto L33:
        goto L32:
        next: ( L33 L32 )
L33:
        aparam "boolean condition"
        __vreg30 = call logMessage
        next: ( L34 )
L34:
        next: ( L32 )
L32:
        leave _event_open
        next: ( )


#####global#####
global:
        i = 2
        j = 3
        k = 4
        f = 3.3
        next: ( )
global:
        i = 2
        j = 3
        k = 4
        f = 3.3
        next: ( )


===================Final Code generation=====================
JMP begin
_S_open: MOVL _S_START R005
STI R005 R000           // Return Addr Pushed on Stack
SUB R000 4 R000
INI R005           // READ Event Parameter Input
STI R005 R000           // Parameter Pushed on Stack
SUB R000 4 R000
INI R005           // READ Event Parameter Input
STI R005 R000           // Parameter Pushed on Stack
SUB R000 4 R000
INI R005           // READ Event Parameter Input
STI R005 R000           // Parameter Pushed on Stack
SUB R000 4 R000
JMP _event_open

_S_START: PRTS "\nEnter event name:"
IN R005
JMPC EQ R005 111 _S_open
JMPC EQ R005 120 _S_END
PRTS "Invalid Input\n"
JMP _S_START

begin: MOVI  10000 R000           // RSP Initialized
JMP global

// Function/Event Module begins
_event_open: ADD  R000 4  R000
LDI  R000 R020           // Parameter Poped from Stack
ADD  R000 4  R000
LDI  R000 R021           // Parameter Poped from Stack
ADD  R000 4  R000
LDI  R000 R022           // Parameter Poped from Stack
JMPC LT R023 6 L5
JMP L6
L6: JMPC LE R023 R024 L3
JMP L5
L5: JMPC GE R024 R025 L3
JMP L4
L3: JMPC LT R023 R024 L8
JMP L10
L10: JMPC GT R024 R025 L8
JMP L9
L8: MOVIF R023 F010
NEG F010 R026
MUL 23 R026 R027
DIV R027 R024 R028
MOVIF R028 F011
FSUB F011 F012 F013
MOD 45 R024 R029
MOVIF R029 F014
FSUB F013 F014 F015
MOVF F015 F012
JMP L7
L9: OR R024 R025 R030
AND R023 R030 R031

AND R023 R032 R033
XOR R031 R033 R034
MOVI R034 R024
L7: JMP L2
L4: MOVI R024  R003
MOVI R023  R002
L36: JMPC GT 0  R002 L35
DIV  R003 2  R003
SUB  R002 1  R002
JMP L36
L35: MOVI  R003 R035
MOVI R025  R003
MOVI R035  R002
L38: JMPC GT 0  R002 L37
MUL  R003 2  R003
SUB  R002 1  R002
JMP L38
L37: MOVI  R003 R036
MOVI R036 R025
L2: JMPC NE R037 0 L13
JMP L14
L14: JMPC LE R038 R039 L12
JMP L13
L13: JMPC GE R039 R040 L12
JMP L11
L12: JMPC LT R040 R038 L16
JMP L17
L17: JMPC GT R037 R039 L16
JMP L15
L16: MOVIF R023 F016
NEG F016 R041
MUL 23 R041 R042
DIV R042 R024 R043
MOVIF R043 F017
FSUB F017 F012 F018
MOD 45 R024 R044
MOVIF R044 F019
FSUB F018 F019 F020
MOVF F020 F012
LT R040 R038 R045
GT R037 R039 R046
JMPC EQ R045 1 L40
JMPC EQ R046 1 L40
MOVI 0 R047
JMP L39
L40: MOVI 1 R047
L39: MOVI R047 R037
L15: L11: JMPC GT R023 9 L19
JMP L18
L19: STI  R047  R000
SUB  R000 4  R000
STI  R046  R000
SUB  R000 4  R000
STI  R045  R000
SUB  R000 4  R000
STI  R044  R000
SUB  R000 4  R000
STI  R043  R000
SUB  R000 4  R000
STI  R042  R000
SUB  R000 4  R000
STI  R041  R000
SUB  R000 4  R000
STI  R040  R000
SUB  R000 4  R000
STI  R039  R000
SUB  R000 4  R000
STI  R038  R000
SUB  R000 4  R000
STI  R037  R000
SUB  R000 4  R000
STI  R036  R000
SUB  R000 4  R000
STI  R035  R000
SUB  R000 4  R000
STI  R034  R000
SUB  R000 4  R000
STI  R033  R000
SUB  R000 4  R000
STI  R032  R000
SUB  R000 4  R000
STI  R031  R000
SUB  R000 4  R000
STI  R030  R000
SUB  R000 4  R000
STI  R029  R000
SUB  R000 4  R000
STI  R028  R000
SUB  R000 4  R000
STI  R027  R000
SUB  R000 4  R000
STI  R026  R000
SUB  R000 4  R000
STI  R025  R000
SUB  R000 4  R000
STI  R024  R000
SUB  R000 4  R000
STI  R023  R000
SUB  R000 4  R000
STI  R022  R000
SUB  R000 4  R000
STI  R021  R000
SUB  R000 4  R000
STI  R020  R000
SUB  R000 4  R000
STF  F020  R000
SUB  R000 4  R000
STF  F019  R000
SUB  R000 4  R000
STF  F018  R000
SUB  R000 4  R000
STF  F017  R000
SUB  R000 4  R000
STF  F016  R000
SUB  R000 4  R000
STF  F015  R000
SUB  R000 4  R000
STF  F014  R000
SUB  R000 4  R000
STF  F013  R000
SUB  R000 4  R000
STF  F012  R000
SUB  R000 4  R000
STF  F011  R000
SUB  R000 4  R000
STF  F010  R000
SUB  R000 4  R000
MOVL L41 R048
STI  R048  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI "Bad if - condition is not boolean - but it i int"  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  logMessage
L41: MOVI  R001 R049
ADD  R000 4  R000
LDF  R000 F010
ADD  R000 4  R000
LDF  R000 F011
ADD  R000 4  R000
LDF  R000 F012
ADD  R000 4  R000
LDF  R000 F013
ADD  R000 4  R000
LDF  R000 F014
ADD  R000 4  R000
LDF  R000 F015
ADD  R000 4  R000
LDF  R000 F016
ADD  R000 4  R000
LDF  R000 F017
ADD  R000 4  R000
LDF  R000 F018
ADD  R000 4  R000
LDF  R000 F019
ADD  R000 4  R000
LDF  R000 F020
ADD  R000 4  R000
LDI  R000 R020
ADD  R000 4  R000
LDI  R000 R021
ADD  R000 4  R000
LDI  R000 R022
ADD  R000 4  R000
LDI  R000 R023
ADD  R000 4  R000
LDI  R000 R024
ADD  R000 4  R000
LDI  R000 R025
ADD  R000 4  R000
LDI  R000 R026
ADD  R000 4  R000
LDI  R000 R027
ADD  R000 4  R000
LDI  R000 R028
ADD  R000 4  R000
LDI  R000 R029
ADD  R000 4  R000
LDI  R000 R030
ADD  R000 4  R000
LDI  R000 R031
ADD  R000 4  R000
LDI  R000 R032
ADD  R000 4  R000
LDI  R000 R033
ADD  R000 4  R000
LDI  R000 R034
ADD  R000 4  R000
LDI  R000 R035
ADD  R000 4  R000
LDI  R000 R036
ADD  R000 4  R000
LDI  R000 R037
ADD  R000 4  R000
LDI  R000 R038
ADD  R000 4  R000
LDI  R000 R039
ADD  R000 4  R000
LDI  R000 R040
ADD  R000 4  R000
LDI  R000 R041
ADD  R000 4  R000
LDI  R000 R042
ADD  R000 4  R000
LDI  R000 R043
ADD  R000 4  R000
LDI  R000 R044
ADD  R000 4  R000
LDI  R000 R045
ADD  R000 4  R000
LDI  R000 R046
ADD  R000 4  R000
LDI  R000 R047
L20: L18: MOVIF R023 F021
FADD F021 F012 F022
MOVIF 9 F023
JMPC FGT F022 F023 L22
JMP L21
L22: STI  R049  R000
SUB  R000 4  R000
STI  R048  R000
SUB  R000 4  R000
STI  R047  R000
SUB  R000 4  R000
STI  R046  R000
SUB  R000 4  R000
STI  R045  R000
SUB  R000 4  R000
STI  R044  R000
SUB  R000 4  R000
STI  R043  R000
SUB  R000 4  R000
STI  R042  R000
SUB  R000 4  R000
STI  R041  R000
SUB  R000 4  R000
STI  R040  R000
SUB  R000 4  R000
STI  R039  R000
SUB  R000 4  R000
STI  R038  R000
SUB  R000 4  R000
STI  R037  R000
SUB  R000 4  R000
STI  R036  R000
SUB  R000 4  R000
STI  R035  R000
SUB  R000 4  R000
STI  R034  R000
SUB  R000 4  R000
STI  R033  R000
SUB  R000 4  R000
STI  R032  R000
SUB  R000 4  R000
STI  R031  R000
SUB  R000 4  R000
STI  R030  R000
SUB  R000 4  R000
STI  R029  R000
SUB  R000 4  R000
STI  R028  R000
SUB  R000 4  R000
STI  R027  R000
SUB  R000 4  R000
STI  R026  R000
SUB  R000 4  R000
STI  R025  R000
SUB  R000 4  R000
STI  R024  R000
SUB  R000 4  R000
STI  R023  R000
SUB  R000 4  R000
STI  R022  R000
SUB  R000 4  R000
STF  F023  R000
SUB  R000 4  R000
STF  F022  R000
SUB  R000 4  R000
STF  F021  R000
SUB  R000 4  R000
STF  F020  R000
SUB  R000 4  R000
STF  F019  R000
SUB  R000 4  R000
STF  F018  R000
SUB  R000 4  R000
STF  F017  R000
SUB  R000 4  R000
STF  F016  R000
SUB  R000 4  R000
STF  F015  R000
SUB  R000 4  R000
STF  F014  R000
SUB  R000 4  R000
STF  F013  R000
SUB  R000 4  R000
STF  F012  R000
SUB  R000 4  R000
STF  F011  R000
SUB  R000 4  R000
STF  F010  R000
SUB  R000 4  R000
MOVL L42 R050
STI  R050  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI "float + int in condition"  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  logMessage
L42: MOVI  R001 R051
ADD  R000 4  R000
LDF  R000 F010
ADD  R000 4  R000
LDF  R000 F011
ADD  R000 4  R000
LDF  R000 F012
ADD  R000 4  R000
LDF  R000 F013
ADD  R000 4  R000
LDF  R000 F014
ADD  R000 4  R000
LDF  R000 F015
ADD  R000 4  R000
LDF  R000 F016
ADD  R000 4  R000
LDF  R000 F017
ADD  R000 4  R000
LDF  R000 F018
ADD  R000 4  R000
LDF  R000 F019
ADD  R000 4  R000
LDF  R000 F020
ADD  R000 4  R000
LDF  R000 F021
ADD  R000 4  R000
LDF  R000 F022
ADD  R000 4  R000
LDF  R000 F023
ADD  R000 4  R000
LDI  R000 R022
ADD  R000 4  R000
LDI  R000 R023
ADD  R000 4  R000
LDI  R000 R024
ADD  R000 4  R000
LDI  R000 R025
ADD  R000 4  R000
LDI  R000 R026
ADD  R000 4  R000
LDI  R000 R027
ADD  R000 4  R000
LDI  R000 R028
ADD  R000 4  R000
LDI  R000 R029
ADD  R000 4  R000
LDI  R000 R030
ADD  R000 4  R000
LDI  R000 R031
ADD  R000 4  R000
LDI  R000 R032
ADD  R000 4  R000
LDI  R000 R033
ADD  R000 4  R000
LDI  R000 R034
ADD  R000 4  R000
LDI  R000 R035
ADD  R000 4  R000
LDI  R000 R036
ADD  R000 4  R000
LDI  R000 R037
ADD  R000 4  R000
LDI  R000 R038
ADD  R000 4  R000
LDI  R000 R039
ADD  R000 4  R000
LDI  R000 R040
ADD  R000 4  R000
LDI  R000 R041
ADD  R000 4  R000
LDI  R000 R042
ADD  R000 4  R000
LDI  R000 R043
ADD  R000 4  R000
LDI  R000 R044
ADD  R000 4  R000
LDI  R000 R045
ADD  R000 4  R000
LDI  R000 R046
ADD  R000 4  R000
LDI  R000 R047
ADD  R000 4  R000
LDI  R000 R048
ADD  R000 4  R000
LDI  R000 R049
L23: L21: MOVIF R023 F024
FDIV F024 F012 F025
MOVIF 9 F026
JMPC FGT F025 F026 L25
JMP L24
L25: STI  R051  R000
SUB  R000 4  R000
STI  R050  R000
SUB  R000 4  R000
STI  R049  R000
SUB  R000 4  R000
STI  R048  R000
SUB  R000 4  R000
STI  R047  R000
SUB  R000 4  R000
STI  R046  R000
SUB  R000 4  R000
STI  R045  R000
SUB  R000 4  R000
STI  R044  R000
SUB  R000 4  R000
STI  R043  R000
SUB  R000 4  R000
STI  R042  R000
SUB  R000 4  R000
STI  R041  R000
SUB  R000 4  R000
STI  R040  R000
SUB  R000 4  R000
STI  R039  R000
SUB  R000 4  R000
STI  R038  R000
SUB  R000 4  R000
STI  R037  R000
SUB  R000 4  R000
STI  R036  R000
SUB  R000 4  R000
STI  R035  R000
SUB  R000 4  R000
STI  R034  R000
SUB  R000 4  R000
STI  R033  R000
SUB  R000 4  R000
STI  R032  R000
SUB  R000 4  R000
STI  R031  R000
SUB  R000 4  R000
STI  R030  R000
SUB  R000 4  R000
STI  R029  R000
SUB  R000 4  R000
STI  R028  R000
SUB  R000 4  R000
STI  R027  R000
SUB  R000 4  R000
STI  R026  R000
SUB  R000 4  R000
STI  R025  R000
SUB  R000 4  R000
STI  R024  R000
SUB  R000 4  R000
STF  F026  R000
SUB  R000 4  R000
STF  F025  R000
SUB  R000 4  R000
STF  F024  R000
SUB  R000 4  R000
STF  F023  R000
SUB  R000 4  R000
STF  F022  R000
SUB  R000 4  R000
STF  F021  R000
SUB  R000 4  R000
STF  F020  R000
SUB  R000 4  R000
STF  F019  R000
SUB  R000 4  R000
STF  F018  R000
SUB  R000 4  R000
STF  F017  R000
SUB  R000 4  R000
STF  F016  R000
SUB  R000 4  R000
STF  F015  R000
SUB  R000 4  R000
STF  F014  R000
SUB  R000 4  R000
STF  F013  R000
SUB  R000 4  R000
STF  F012  R000
SUB  R000 4  R000
STF  F011  R000
SUB  R000 4  R000
STF  F010  R000
SUB  R000 4  R000
MOVL L43 R052
STI  R052  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI "float condition"  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  logMessage
L43: MOVI  R001 R053
ADD  R000 4  R000
LDF  R000 F010
ADD  R000 4  R000
LDF  R000 F011
ADD  R000 4  R000
LDF  R000 F012
ADD  R000 4  R000
LDF  R000 F013
ADD  R000 4  R000
LDF  R000 F014
ADD  R000 4  R000
LDF  R000 F015
ADD  R000 4  R000
LDF  R000 F016
ADD  R000 4  R000
LDF  R000 F017
ADD  R000 4  R000
LDF  R000 F018
ADD  R000 4  R000
LDF  R000 F019
ADD  R000 4  R000
LDF  R000 F020
ADD  R000 4  R000
LDF  R000 F021
ADD  R000 4  R000
LDF  R000 F022
ADD  R000 4  R000
LDF  R000 F023
ADD  R000 4  R000
LDF  R000 F024
ADD  R000 4  R000
LDF  R000 F025
ADD  R000 4  R000
LDF  R000 F026
ADD  R000 4  R000
LDI  R000 R024
ADD  R000 4  R000
LDI  R000 R025
ADD  R000 4  R000
LDI  R000 R026
ADD  R000 4  R000
LDI  R000 R027
ADD  R000 4  R000
LDI  R000 R028
ADD  R000 4  R000
LDI  R000 R029
ADD  R000 4  R000
LDI  R000 R030
ADD  R000 4  R000
LDI  R000 R031
ADD  R000 4  R000
LDI  R000 R032
ADD  R000 4  R000
LDI  R000 R033
ADD  R000 4  R000
LDI  R000 R034
ADD  R000 4  R000
LDI  R000 R035
ADD  R000 4  R000
LDI  R000 R036
ADD  R000 4  R000
LDI  R000 R037
ADD  R000 4  R000
LDI  R000 R038
ADD  R000 4  R000
LDI  R000 R039
ADD  R000 4  R000
LDI  R000 R040
ADD  R000 4  R000
LDI  R000 R041
ADD  R000 4  R000
LDI  R000 R042
ADD  R000 4  R000
LDI  R000 R043
ADD  R000 4  R000
LDI  R000 R044
ADD  R000 4  R000
LDI  R000 R045
ADD  R000 4  R000
LDI  R000 R046
ADD  R000 4  R000
LDI  R000 R047
ADD  R000 4  R000
LDI  R000 R048
ADD  R000 4  R000
LDI  R000 R049
ADD  R000 4  R000
LDI  R000 R050
ADD  R000 4  R000
LDI  R000 R051
L26: L24: MOVIF 9 F027
JMPC FGT F012 F027 L28
JMP L29
L28: STI  R053  R000
SUB  R000 4  R000
STI  R052  R000
SUB  R000 4  R000
STI  R051  R000
SUB  R000 4  R000
STI  R050  R000
SUB  R000 4  R000
STI  R049  R000
SUB  R000 4  R000
STI  R048  R000
SUB  R000 4  R000
STI  R047  R000
SUB  R000 4  R000
STI  R046  R000
SUB  R000 4  R000
STI  R045  R000
SUB  R000 4  R000
STI  R044  R000
SUB  R000 4  R000
STI  R043  R000
SUB  R000 4  R000
STI  R042  R000
SUB  R000 4  R000
STI  R041  R000
SUB  R000 4  R000
STI  R040  R000
SUB  R000 4  R000
STI  R039  R000
SUB  R000 4  R000
STI  R038  R000
SUB  R000 4  R000
STI  R037  R000
SUB  R000 4  R000
STI  R036  R000
SUB  R000 4  R000
STI  R035  R000
SUB  R000 4  R000
STI  R034  R000
SUB  R000 4  R000
STI  R033  R000
SUB  R000 4  R000
STI  R032  R000
SUB  R000 4  R000
STI  R031  R000
SUB  R000 4  R000
STI  R030  R000
SUB  R000 4  R000
STI  R029  R000
SUB  R000 4  R000
STI  R028  R000
SUB  R000 4  R000
STI  R027  R000
SUB  R000 4  R000
STI  R026  R000
SUB  R000 4  R000
STF  F027  R000
SUB  R000 4  R000
STF  F026  R000
SUB  R000 4  R000
STF  F025  R000
SUB  R000 4  R000
STF  F024  R000
SUB  R000 4  R000
STF  F023  R000
SUB  R000 4  R000
STF  F022  R000
SUB  R000 4  R000
STF  F021  R000
SUB  R000 4  R000
STF  F020  R000
SUB  R000 4  R000
STF  F019  R000
SUB  R000 4  R000
STF  F018  R000
SUB  R000 4  R000
STF  F017  R000
SUB  R000 4  R000
STF  F016  R000
SUB  R000 4  R000
STF  F015  R000
SUB  R000 4  R000
STF  F014  R000
SUB  R000 4  R000
STF  F013  R000
SUB  R000 4  R000
STF  F012  R000
SUB  R000 4  R000
STF  F011  R000
SUB  R000 4  R000
STF  F010  R000
SUB  R000 4  R000
MOVL L44 R054
STI  R054  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI "Bad if - condition is float - this is an err"  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  logMessage
L44: MOVI  R001 R055
ADD  R000 4  R000
LDF  R000 F010
ADD  R000 4  R000
LDF  R000 F011
ADD  R000 4  R000
LDF  R000 F012
ADD  R000 4  R000
LDF  R000 F013
ADD  R000 4  R000
LDF  R000 F014
ADD  R000 4  R000
LDF  R000 F015
ADD  R000 4  R000
LDF  R000 F016
ADD  R000 4  R000
LDF  R000 F017
ADD  R000 4  R000
LDF  R000 F018
ADD  R000 4  R000
LDF  R000 F019
ADD  R000 4  R000
LDF  R000 F020
ADD  R000 4  R000
LDF  R000 F021
ADD  R000 4  R000
LDF  R000 F022
ADD  R000 4  R000
LDF  R000 F023
ADD  R000 4  R000
LDF  R000 F024
ADD  R000 4  R000
LDF  R000 F025
ADD  R000 4  R000
LDF  R000 F026
ADD  R000 4  R000
LDF  R000 F027
ADD  R000 4  R000
LDI  R000 R026
ADD  R000 4  R000
LDI  R000 R027
ADD  R000 4  R000
LDI  R000 R028
ADD  R000 4  R000
LDI  R000 R029
ADD  R000 4  R000
LDI  R000 R030
ADD  R000 4  R000
LDI  R000 R031
ADD  R000 4  R000
LDI  R000 R032
ADD  R000 4  R000
LDI  R000 R033
ADD  R000 4  R000
LDI  R000 R034
ADD  R000 4  R000
LDI  R000 R035
ADD  R000 4  R000
LDI  R000 R036
ADD  R000 4  R000
LDI  R000 R037
ADD  R000 4  R000
LDI  R000 R038
ADD  R000 4  R000
LDI  R000 R039
ADD  R000 4  R000
LDI  R000 R040
ADD  R000 4  R000
LDI  R000 R041
ADD  R000 4  R000
LDI  R000 R042
ADD  R000 4  R000
LDI  R000 R043
ADD  R000 4  R000
LDI  R000 R044
ADD  R000 4  R000
LDI  R000 R045
ADD  R000 4  R000
LDI  R000 R046
ADD  R000 4  R000
LDI  R000 R047
ADD  R000 4  R000
LDI  R000 R048
ADD  R000 4  R000
LDI  R000 R049
ADD  R000 4  R000
LDI  R000 R050
ADD  R000 4  R000
LDI  R000 R051
ADD  R000 4  R000
LDI  R000 R052
ADD  R000 4  R000
LDI  R000 R053
L30: JMP L27
L29: STI  R055  R000
SUB  R000 4  R000
STI  R054  R000
SUB  R000 4  R000
STI  R053  R000
SUB  R000 4  R000
STI  R052  R000
SUB  R000 4  R000
STI  R051  R000
SUB  R000 4  R000
STI  R050  R000
SUB  R000 4  R000
STI  R049  R000
SUB  R000 4  R000
STI  R048  R000
SUB  R000 4  R000
STI  R047  R000
SUB  R000 4  R000
STI  R046  R000
SUB  R000 4  R000
STI  R045  R000
SUB  R000 4  R000
STI  R044  R000
SUB  R000 4  R000
STI  R043  R000
SUB  R000 4  R000
STI  R042  R000
SUB  R000 4  R000
STI  R041  R000
SUB  R000 4  R000
STI  R040  R000
SUB  R000 4  R000
STI  R039  R000
SUB  R000 4  R000
STI  R038  R000
SUB  R000 4  R000
STI  R037  R000
SUB  R000 4  R000
STI  R036  R000
SUB  R000 4  R000
STI  R035  R000
SUB  R000 4  R000
STI  R034  R000
SUB  R000 4  R000
STI  R033  R000
SUB  R000 4  R000
STI  R032  R000
SUB  R000 4  R000
STI  R031  R000
SUB  R000 4  R000
STI  R030  R000
SUB  R000 4  R000
STI  R029  R000
SUB  R000 4  R000
STI  R028  R000
SUB  R000 4  R000
STF  F027  R000
SUB  R000 4  R000
STF  F026  R000
SUB  R000 4  R000
STF  F025  R000
SUB  R000 4  R000
STF  F024  R000
SUB  R000 4  R000
STF  F023  R000
SUB  R000 4  R000
STF  F022  R000
SUB  R000 4  R000
STF  F021  R000
SUB  R000 4  R000
STF  F020  R000
SUB  R000 4  R000
STF  F019  R000
SUB  R000 4  R000
STF  F018  R000
SUB  R000 4  R000
STF  F017  R000
SUB  R000 4  R000
STF  F016  R000
SUB  R000 4  R000
STF  F015  R000
SUB  R000 4  R000
STF  F014  R000
SUB  R000 4  R000
STF  F013  R000
SUB  R000 4  R000
STF  F012  R000
SUB  R000 4  R000
STF  F011  R000
SUB  R000 4  R000
STF  F010  R000
SUB  R000 4  R000
MOVL L45 R056
STI  R056  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI "OK"  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  logMessage
L45: MOVI  R001 R057
ADD  R000 4  R000
LDF  R000 F010
ADD  R000 4  R000
LDF  R000 F011
ADD  R000 4  R000
LDF  R000 F012
ADD  R000 4  R000
LDF  R000 F013
ADD  R000 4  R000
LDF  R000 F014
ADD  R000 4  R000
LDF  R000 F015
ADD  R000 4  R000
LDF  R000 F016
ADD  R000 4  R000
LDF  R000 F017
ADD  R000 4  R000
LDF  R000 F018
ADD  R000 4  R000
LDF  R000 F019
ADD  R000 4  R000
LDF  R000 F020
ADD  R000 4  R000
LDF  R000 F021
ADD  R000 4  R000
LDF  R000 F022
ADD  R000 4  R000
LDF  R000 F023
ADD  R000 4  R000
LDF  R000 F024
ADD  R000 4  R000
LDF  R000 F025
ADD  R000 4  R000
LDF  R000 F026
ADD  R000 4  R000
LDF  R000 F027
ADD  R000 4  R000
LDI  R000 R028
ADD  R000 4  R000
LDI  R000 R029
ADD  R000 4  R000
LDI  R000 R030
ADD  R000 4  R000
LDI  R000 R031
ADD  R000 4  R000
LDI  R000 R032
ADD  R000 4  R000
LDI  R000 R033
ADD  R000 4  R000
LDI  R000 R034
ADD  R000 4  R000
LDI  R000 R035
ADD  R000 4  R000
LDI  R000 R036
ADD  R000 4  R000
LDI  R000 R037
ADD  R000 4  R000
LDI  R000 R038
ADD  R000 4  R000
LDI  R000 R039
ADD  R000 4  R000
LDI  R000 R040
ADD  R000 4  R000
LDI  R000 R041
ADD  R000 4  R000
LDI  R000 R042
ADD  R000 4  R000
LDI  R000 R043
ADD  R000 4  R000
LDI  R000 R044
ADD  R000 4  R000
LDI  R000 R045
ADD  R000 4  R000
LDI  R000 R046
ADD  R000 4  R000
LDI  R000 R047
ADD  R000 4  R000
LDI  R000 R048
ADD  R000 4  R000
LDI  R000 R049
ADD  R000 4  R000
LDI  R000 R050
ADD  R000 4  R000
LDI  R000 R051
ADD  R000 4  R000
LDI  R000 R052
ADD  R000 4  R000
LDI  R000 R053
ADD  R000 4  R000
LDI  R000 R054
ADD  R000 4  R000
LDI  R000 R055
L31: L27: JMPC NE R037 0 L33
JMP L32
L33: STI  R057  R000
SUB  R000 4  R000
STI  R056  R000
SUB  R000 4  R000
STI  R055  R000
SUB  R000 4  R000
STI  R054  R000
SUB  R000 4  R000
STI  R053  R000
SUB  R000 4  R000
STI  R052  R000
SUB  R000 4  R000
STI  R051  R000
SUB  R000 4  R000
STI  R050  R000
SUB  R000 4  R000
STI  R049  R000
SUB  R000 4  R000
STI  R048  R000
SUB  R000 4  R000
STI  R047  R000
SUB  R000 4  R000
STI  R046  R000
SUB  R000 4  R000
STI  R045  R000
SUB  R000 4  R000
STI  R044  R000
SUB  R000 4  R000
STI  R043  R000
SUB  R000 4  R000
STI  R042  R000
SUB  R000 4  R000
STI  R041  R000
SUB  R000 4  R000
STI  R040  R000
SUB  R000 4  R000
STI  R039  R000
SUB  R000 4  R000
STI  R038  R000
SUB  R000 4  R000
STI  R037  R000
SUB  R000 4  R000
STI  R036  R000
SUB  R000 4  R000
STI  R035  R000
SUB  R000 4  R000
STI  R034  R000
SUB  R000 4  R000
STI  R033  R000
SUB  R000 4  R000
STI  R032  R000
SUB  R000 4  R000
STI  R031  R000
SUB  R000 4  R000
STI  R030  R000
SUB  R000 4  R000
STF  F027  R000
SUB  R000 4  R000
STF  F026  R000
SUB  R000 4  R000
STF  F025  R000
SUB  R000 4  R000
STF  F024  R000
SUB  R000 4  R000
STF  F023  R000
SUB  R000 4  R000
STF  F022  R000
SUB  R000 4  R000
STF  F021  R000
SUB  R000 4  R000
STF  F020  R000
SUB  R000 4  R000
STF  F019  R000
SUB  R000 4  R000
STF  F018  R000
SUB  R000 4  R000
STF  F017  R000
SUB  R000 4  R000
STF  F016  R000
SUB  R000 4  R000
STF  F015  R000
SUB  R000 4  R000
STF  F014  R000
SUB  R000 4  R000
STF  F013  R000
SUB  R000 4  R000
STF  F012  R000
SUB  R000 4  R000
STF  F011  R000
SUB  R000 4  R000
STF  F010  R000
SUB  R000 4  R000
MOVL L46 R058
STI  R058  R000           // Return Addr Pushed on Stack
SUB  R000 4  R000
STI "boolean condition"  R000           // Parameter Pushed on Stack
SUB  R000 4  R000
JMP  logMessage
L46: MOVI  R001 R059
ADD  R000 4  R000
LDF  R000 F010
ADD  R000 4  R000
LDF  R000 F011
ADD  R000 4  R000
LDF  R000 F012
ADD  R000 4  R000
LDF  R000 F013
ADD  R000 4  R000
LDF  R000 F014
ADD  R000 4  R000
LDF  R000 F015
ADD  R000 4  R000
LDF  R000 F016
ADD  R000 4  R000
LDF  R000 F017
ADD  R000 4  R000
LDF  R000 F018
ADD  R000 4  R000
LDF  R000 F019
ADD  R000 4  R000
LDF  R000 F020
ADD  R000 4  R000
LDF  R000 F021
ADD  R000 4  R000
LDF  R000 F022
ADD  R000 4  R000
LDF  R000 F023
ADD  R000 4  R000
LDF  R000 F024
ADD  R000 4  R000
LDF  R000 F025
ADD  R000 4  R000
LDF  R000 F026
ADD  R000 4  R000
LDF  R000 F027
ADD  R000 4  R000
LDI  R000 R030
ADD  R000 4  R000
LDI  R000 R031
ADD  R000 4  R000
LDI  R000 R032
ADD  R000 4  R000
LDI  R000 R033
ADD  R000 4  R000
LDI  R000 R034
ADD  R000 4  R000
LDI  R000 R035
ADD  R000 4  R000
LDI  R000 R036
ADD  R000 4  R000
LDI  R000 R037
ADD  R000 4  R000
LDI  R000 R038
ADD  R000 4  R000
LDI  R000 R039
ADD  R000 4  R000
LDI  R000 R040
ADD  R000 4  R000
LDI  R000 R041
ADD  R000 4  R000
LDI  R000 R042
ADD  R000 4  R000
LDI  R000 R043
ADD  R000 4  R000
LDI  R000 R044
ADD  R000 4  R000
LDI  R000 R045
ADD  R000 4  R000
LDI  R000 R046
ADD  R000 4  R000
LDI  R000 R047
ADD  R000 4  R000
LDI  R000 R048
ADD  R000 4  R000
LDI  R000 R049
ADD  R000 4  R000
LDI  R000 R050
ADD  R000 4  R000
LDI  R000 R051
ADD  R000 4  R000
LDI  R000 R052
ADD  R000 4  R000
LDI  R000 R053
ADD  R000 4  R000
LDI  R000 R054
ADD  R000 4  R000
LDI  R000 R055
ADD  R000 4  R000
LDI  R000 R056
ADD  R000 4  R000
LDI  R000 R057
L34: L32: ADD  R000 4  R000
LDI  R000  R004           // Return Addr Poped from Stack
JMPI  R004
// Function/Event Module Ends

global: MOVI 2 R023
MOVI 3 R024
MOVI 4 R025
MOVF 3.3 F012
global: MOVI 2 R023
MOVI 3 R024
MOVI 4 R025
MOVF 3.3 F012
JMP _S_START

_S_END: PRTS "DONE"


Compilation Successful
