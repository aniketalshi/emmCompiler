
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  class CString;
  string get(class CString s);
  class CString a1;
  int b = 2;
  event open(int a1, int a2, unsigned int a3);
  int logMessage(string x);
 
  (open(int file, int flags, unsigned int mode)|get(a1))-->   {
    logMessage("open: testing almost nothing");
  };
  ;;

========================Type Checking========================

======================Memory Allocation======================


====Global Declarations

====Class 'CString'


====Function 'get'
==Formal Parameters
Variable: s, Offset: 8

Variable: a1, Offset: 0
Variable: b, Offset: 4

====Event 'open'
Variable: a1, Offset: 0
Variable: a2, Offset: 4
Variable: a3, Offset: 8


====Function 'logMessage'
==Formal Parameters
Variable: x, Offset: 8

======================3 Addr Generation======================
global:
        b = 2
_event_open:
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        aparam "open: testing almost nothing"
        __vreg1 = call logMessage
L2:
        leave _event_open

====================Basic Block creation=====================

====Basic Blocks Container: _event_open=====


PrevBlocks: 
Block Start: _event_open
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        aparam "open: testing almost nothing"
        __vreg1 = call logMessage
Block end: _event_open
NextBlocks:L2,

PrevBlocks: _event_open,
Block Start: L2
        leave _event_open
Block end: L2
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        b = 2
Block end: global
NextBlocks:global,

=========================Optimization========================

====Basic Blocks Container: _event_open=====


PrevBlocks: 
Block Start: _event_open
        enter _event_open
        fparam file
        fparam flags
        fparam mode
        aparam "open: testing almost nothing"
        __vreg1 = call logMessage
Block end: _event_open
NextBlocks:L2,

PrevBlocks: _event_open,
Block Start: L2
        leave _event_open
Block end: L2
NextBlocks:

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        b = 2
Block end: global
NextBlocks:global,

===================Final Code generation=====================
JMP begin: 
begin: 
MOVI  R000 10000    // RSP Initialized
JMP global: 
_event_open:
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R020
ADD  R000 4  R000
LDI  R000 R021
ADD  R000 4  R000
LDI  R000 R022

SUB  R000 4  R000

STI R023  R000
SUB  R000 4  R000
JMP logMessage
MOVI RRV_I R024

L2:
JMP  R004
global:
MOVI 2  R025
Compilation Successful
