class CString;;
string get(CString s);

class Integer;
class ArgV;
class StatP;
  
class NewStatP;

int logmessage(string x) ;
int logmessageint(string x, int y) ;
bool isfile(string x, string y) ;

event open (int a1 , int a2 , unsigned int a3);
event close (int a1);
event execve(int a1, int a2, int a3);     
event lstat(int a1 , int a2 );
event stat (int a1, int a2);
#define abs1 (open(o1, o2, o3)|(get(o1) == "abc"))

int i = 0;
int j = 1;

string rv, t2;
             
(open(a1, a2, a3)|((get(a1) == "abc") && (rv = get(a2)))):
 (lstat(s1, s2): (close(c1)|(get(c1) == rv)))**  -> {
     logmessageint("proc_ops open.lstat.close", rv) ;
}; 


(open(o1, o2, o3) |(!(isfile(get(o1), "bd")) && (t2 = o3))) :
(stat(s3, s4))**:execve(b1, b2, b3) -> {
     logmessage("proc_ops open.stat.execve") ;
};
     
any** : close(c1)|(get(c1) == 1 && rv = get(c1)) : 
     (stat(s3, s4))**:execve(b1, b2, b3) -> {
     logmessage("proc_ops any.close.stat.execve") ;
};

any**: (open(o1, o2, o3)|get(o1) == "abc"): close(c1) -> {
     logmessage("rule1:");
};   

any**: (open(a1, a2, a3)|get(a1) == "xyz"): close(d1) -> {
     logmessage("rule2:");   
};           

