Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_LBRACK
   TOK_DOT


State 197 conflicts: 1 shift/reduce


Grammar

    0 $accept: s_specification $end

    1 s_specification: specification

    2 specification: specification declaration
    3              | specification rule
    4              | /* empty */

    5 declaration: event_decl
    6            | function_proto
    7            | class_decl
    8            | global_decl

    9 rule: primitive_all TOK_ARROW rule_stmts

   10 rule_stmts: compound_stmt2 semi_colon
   11           | compound_stmt2
   12           | expression semi_colon

   13 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE
   14               | TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE
   15               | compound_stmt1

   16 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE
   17               | TOK_LBRACE semi_colon TOK_RBRACE

   18 stmt_plus1: stmt_plus1 simple_stmt
   19           | /* empty */

   20 primitive_all: normal_event
   21              | any_event
   22              | normal_event TOK_BITOR expression
   23              | binary_event_oprs
   24              | TOK_LPAREN primitive_all TOK_RPAREN

   25 binary_event_oprs: primitive_all TOK_PAT_OR primitive_all
   26                  | primitive_all TOK_COLON primitive_all
   27                  | primitive_all TOK_PAT_STAR
   28                  | TOK_NOT primitive_all

   29 any_event: TOK_ANY

   30 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN

   31 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT
   32               | TOK_IDENT
   33               | /* empty */

   34 if_then_else_stmt: TOK_IF condition basic_block
   35                  | TOK_IF condition basic_block TOK_ELSE basic_block

   36 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE
   37            | empty_block
   38            | simple_stmt
   39            | semi_colon

   40 stmt_plus2: stmt_plus2 simple_stmt
   41           | /* empty */

   42 simple_stmt: func_invocation semi_colon
   43            | assignment semi_colon
   44            | if_then_else_stmt
   45            | TOK_RETURN expression semi_colon
   46            | TOK_RETURN semi_colon

   47 empty_block: TOK_LBRACE semi_colon TOK_RBRACE

   48 condition: TOK_LPAREN expression TOK_RPAREN

   49 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN
   50                | func_name TOK_LPAREN TOK_RPAREN

   51 func_name: TOK_IDENT
   52          | TOK_PRINT

   53 caller_param_l: caller_param_l TOK_COMMA expression
   54               | expression

   55 assignment: ref_expr TOK_ASSIGN expression

   56 expression: literal
   57           | ref_expr
   58           | func_invocation
   59           | assignment
   60           | unary_operation
   61           | binary_operation
   62           | TOK_LPAREN expression TOK_RPAREN

   63 unary_operation: TOK_NOT expression
   64                | TOK_BITNOT expression
   65                | TOK_MINUS expression

   66 binary_operation: expression TOK_OR expression
   67                 | expression TOK_AND expression
   68                 | expression TOK_EQ expression
   69                 | expression TOK_NE expression
   70                 | expression TOK_GT expression
   71                 | expression TOK_LT expression
   72                 | expression TOK_GE expression
   73                 | expression TOK_LE expression
   74                 | expression TOK_BITOR expression
   75                 | expression TOK_BITXOR expression
   76                 | expression TOK_BITAND expression
   77                 | expression TOK_SHL expression
   78                 | expression TOK_SHR expression
   79                 | expression TOK_PLUS expression
   80                 | expression TOK_MINUS expression
   81                 | expression TOK_MULT expression
   82                 | expression TOK_DIV expression
   83                 | expression TOK_MOD expression

   84 ref_expr: TOK_IDENT

   85 global_decl: type global_l semi_colon

   86 global_l: global_l TOK_COMMA global_var
   87         | global_var

   88 global_var: TOK_IDENT
   89           | TOK_IDENT TOK_ASSIGN expression

   90 class_decl: TOK_CLASS TOK_IDENT semi_colon

   91 function_proto: function_decl semi_colon
   92               | function_decl function_defn

   93 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon

   94 function_body: function_body local_decl
   95              | function_body simple_stmt
   96              | /* empty */

   97 local_decl: type local_l semi_colon

   98 local_l: local_l TOK_COMMA local_var
   99        | local_var

  100 local_var: TOK_IDENT
  101          | TOK_IDENT TOK_ASSIGN expression

  102 function_decl: type TOK_IDENT func_param_l

  103 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN
  104             | func_param_l TOK_COMMA func_param
  105             | func_param
  106             | TOK_LPAREN TOK_RPAREN

  107 func_param: type TOK_IDENT

  108 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon

  109 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN
  110              | event_param_l TOK_COMMA event_param
  111              | event_param
  112              | TOK_LPAREN TOK_RPAREN

  113 event_param: type TOK_IDENT

  114 semi_colon: semi_colon TOK_SEMICOLON
  115           | TOK_SEMICOLON

  116 literal: TOK_UINTNUM
  117        | TOK_DOUBLENUM
  118        | TOK_STRCONST
  119        | TOK_TRUE
  120        | TOK_FALSE

  121 type: baseType
  122     | intType
  123     | TOK_IDENT
  124     | TOK_UNSIGNED baseType

  125 baseType: TOK_VOID
  126         | TOK_BOOL
  127         | TOK_BYTE
  128         | TOK_STRING
  129         | TOK_DOUBLE

  130 intType: TOK_INT
  131        | TOK_UNSIGNED TOK_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 27
TOK_PAT_OR (260) 25
TOK_PAT_NOT (261)
TOK_PLUS (262) 79
TOK_MINUS (263) 65 80
TOK_UMINUS (264)
TOK_MULT (265) 81
TOK_DIV (266) 82
TOK_MOD (267) 83
TOK_BITAND (268) 76
TOK_BITOR (269) 22 74
TOK_BITNOT (270) 64
TOK_BITXOR (271) 75
TOK_SHL (272) 77
TOK_SHR (273) 78
TOK_GT (274) 70
TOK_LT (275) 71
TOK_GE (276) 72
TOK_LE (277) 73
TOK_EQ (278) 68
TOK_NE (279) 69
TOK_AND (280) 67
TOK_OR (281) 66
TOK_NOT (282) 28 63
TOK_COMMA (283) 31 53 86 98 104 110
TOK_ASSIGN (284) 55 89 101
TOK_SEMICOLON (285) 114 115
TOK_COLON (286) 26
TOK_ARROW (287) 9
TOK_LBRACE (288) 13 14 16 17 36 47 93
TOK_RBRACE (289) 13 14 16 17 36 47 93
TOK_LPAREN (290) 24 30 48 49 50 62 103 106 109 112
TOK_RPAREN (291) 24 30 48 49 50 62 103 106 109 112
TOK_IF (292) 34 35
TOK_ELSE (293) 35
TOK_CLASS (294) 90
TOK_RETURN (295) 45 46
TOK_EVENT (296) 108
TOK_ANY (297) 29
TOK_PRINT (298) 52
TOK_UINTNUM (299) 116
TOK_DOUBLENUM (300) 117
TOK_VOID (301) 125
TOK_STRING (302) 128
TOK_STRCONST (303) 118
TOK_INT (304) 130 131
TOK_UNSIGNED (305) 124 131
TOK_BOOL (306) 126
TOK_BYTE (307) 127
TOK_DOUBLE (308) 129
TOK_SHORT (309)
TOK_TRUE (310) 119
TOK_FALSE (311) 120
TOK_IDENT (312) 30 31 32 51 84 88 89 90 100 101 102 107 108 113 123
TOK_DOUBLE_COLON (313)
TOK_LBRACK (314)
TOK_DOT (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
s_specification (62)
    on left: 1, on right: 0
specification (63)
    on left: 2 3 4, on right: 1 2 3
declaration (64)
    on left: 5 6 7 8, on right: 2
rule (65)
    on left: 9, on right: 3
rule_stmts (66)
    on left: 10 11 12, on right: 9
compound_stmt2 (67)
    on left: 13 14 15, on right: 10 11 13 14
compound_stmt1 (68)
    on left: 16 17, on right: 15
stmt_plus1 (69)
    on left: 18 19, on right: 16 18
primitive_all (70)
    on left: 20 21 22 23 24, on right: 9 24 25 26 27 28
binary_event_oprs (71)
    on left: 25 26 27 28, on right: 23
any_event (72)
    on left: 29, on right: 21
normal_event (73)
    on left: 30, on right: 20 22
event_aparam_l (74)
    on left: 31 32 33, on right: 30 31
if_then_else_stmt (75)
    on left: 34 35, on right: 44
basic_block (76)
    on left: 36 37 38 39, on right: 34 35
stmt_plus2 (77)
    on left: 40 41, on right: 36 40
simple_stmt (78)
    on left: 42 43 44 45 46, on right: 18 38 40 95
empty_block (79)
    on left: 47, on right: 37
condition (80)
    on left: 48, on right: 34 35
func_invocation (81)
    on left: 49 50, on right: 42 58
func_name (82)
    on left: 51 52, on right: 49 50
caller_param_l (83)
    on left: 53 54, on right: 49 53
assignment (84)
    on left: 55, on right: 43 59
expression (85)
    on left: 56 57 58 59 60 61 62, on right: 12 22 45 48 53 54 55 62
    63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83
    89 101
unary_operation (86)
    on left: 63 64 65, on right: 60
binary_operation (87)
    on left: 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83,
    on right: 61
ref_expr (88)
    on left: 84, on right: 55 57
global_decl (89)
    on left: 85, on right: 8
global_l (90)
    on left: 86 87, on right: 85 86
global_var (91)
    on left: 88 89, on right: 86 87
class_decl (92)
    on left: 90, on right: 7
function_proto (93)
    on left: 91 92, on right: 6
function_defn (94)
    on left: 93, on right: 92
function_body (95)
    on left: 94 95 96, on right: 93 94 95
local_decl (96)
    on left: 97, on right: 94
local_l (97)
    on left: 98 99, on right: 97 98
local_var (98)
    on left: 100 101, on right: 98 99
function_decl (99)
    on left: 102, on right: 91 92
func_param_l (100)
    on left: 103 104 105 106, on right: 102 103 104
func_param (101)
    on left: 107, on right: 104 105
event_decl (102)
    on left: 108, on right: 5
event_param_l (103)
    on left: 109 110 111 112, on right: 108 109 110
event_param (104)
    on left: 113, on right: 110 111
semi_colon (105)
    on left: 114 115, on right: 10 12 14 17 39 42 43 45 46 47 85 90
    91 93 97 108 114
literal (106)
    on left: 116 117 118 119 120, on right: 56
type (107)
    on left: 121 122 123 124, on right: 85 97 102 107 113
baseType (108)
    on left: 125 126 127 128 129, on right: 121 124
intType (109)
    on left: 130 131, on right: 122


state 0

    0 $accept: . s_specification $end

    $default  reduce using rule 4 (specification)

    s_specification  go to state 1
    specification    go to state 2


state 1

    0 $accept: s_specification . $end

    $end  shift, and go to state 3


state 2

    1 s_specification: specification .
    2 specification: specification . declaration
    3              | specification . rule

    TOK_NOT       shift, and go to state 4
    TOK_LPAREN    shift, and go to state 5
    TOK_CLASS     shift, and go to state 6
    TOK_EVENT     shift, and go to state 7
    TOK_ANY       shift, and go to state 8
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 16

    $default  reduce using rule 1 (s_specification)

    declaration        go to state 17
    rule               go to state 18
    primitive_all      go to state 19
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22
    global_decl        go to state 23
    class_decl         go to state 24
    function_proto     go to state 25
    function_decl      go to state 26
    event_decl         go to state 27
    type               go to state 28
    baseType           go to state 29
    intType            go to state 30


state 3

    0 $accept: s_specification $end .

    $default  accept


state 4

   28 binary_event_oprs: TOK_NOT . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 32
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 5

   24 primitive_all: TOK_LPAREN . primitive_all TOK_RPAREN

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 33
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 6

   90 class_decl: TOK_CLASS . TOK_IDENT semi_colon

    TOK_IDENT  shift, and go to state 34


state 7

  108 event_decl: TOK_EVENT . TOK_IDENT event_param_l semi_colon

    TOK_IDENT  shift, and go to state 35


state 8

   29 any_event: TOK_ANY .

    $default  reduce using rule 29 (any_event)


state 9

  125 baseType: TOK_VOID .

    $default  reduce using rule 125 (baseType)


state 10

  128 baseType: TOK_STRING .

    $default  reduce using rule 128 (baseType)


state 11

  130 intType: TOK_INT .

    $default  reduce using rule 130 (intType)


state 12

  124 type: TOK_UNSIGNED . baseType
  131 intType: TOK_UNSIGNED . TOK_INT

    TOK_VOID    shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_INT     shift, and go to state 36
    TOK_BOOL    shift, and go to state 13
    TOK_BYTE    shift, and go to state 14
    TOK_DOUBLE  shift, and go to state 15

    baseType  go to state 37


state 13

  126 baseType: TOK_BOOL .

    $default  reduce using rule 126 (baseType)


state 14

  127 baseType: TOK_BYTE .

    $default  reduce using rule 127 (baseType)


state 15

  129 baseType: TOK_DOUBLE .

    $default  reduce using rule 129 (baseType)


state 16

   30 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN
  123 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 38

    $default  reduce using rule 123 (type)


state 17

    2 specification: specification declaration .

    $default  reduce using rule 2 (specification)


state 18

    3 specification: specification rule .

    $default  reduce using rule 3 (specification)


state 19

    9 rule: primitive_all . TOK_ARROW rule_stmts
   25 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39
    TOK_PAT_OR    shift, and go to state 40
    TOK_COLON     shift, and go to state 41
    TOK_ARROW     shift, and go to state 42


state 20

   23 primitive_all: binary_event_oprs .

    $default  reduce using rule 23 (primitive_all)


state 21

   21 primitive_all: any_event .

    $default  reduce using rule 21 (primitive_all)


state 22

   20 primitive_all: normal_event .
   22              | normal_event . TOK_BITOR expression

    TOK_BITOR  shift, and go to state 43

    $default  reduce using rule 20 (primitive_all)


state 23

    8 declaration: global_decl .

    $default  reduce using rule 8 (declaration)


state 24

    7 declaration: class_decl .

    $default  reduce using rule 7 (declaration)


state 25

    6 declaration: function_proto .

    $default  reduce using rule 6 (declaration)


state 26

   91 function_proto: function_decl . semi_colon
   92               | function_decl . function_defn

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 45

    function_defn  go to state 46
    semi_colon     go to state 47


state 27

    5 declaration: event_decl .

    $default  reduce using rule 5 (declaration)


state 28

   85 global_decl: type . global_l semi_colon
  102 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 48

    global_l    go to state 49
    global_var  go to state 50


state 29

  121 type: baseType .

    $default  reduce using rule 121 (type)


state 30

  122 type: intType .

    $default  reduce using rule 122 (type)


state 31

   30 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN

    TOK_LPAREN  shift, and go to state 38


state 32

   25 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all . TOK_PAT_STAR
   28                  | TOK_NOT primitive_all .

    $default  reduce using rule 28 (binary_event_oprs)


state 33

   24 primitive_all: TOK_LPAREN primitive_all . TOK_RPAREN
   25 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39
    TOK_PAT_OR    shift, and go to state 40
    TOK_COLON     shift, and go to state 41
    TOK_RPAREN    shift, and go to state 51


state 34

   90 class_decl: TOK_CLASS TOK_IDENT . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 52


state 35

  108 event_decl: TOK_EVENT TOK_IDENT . event_param_l semi_colon

    TOK_LPAREN    shift, and go to state 53
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    event_param_l  go to state 55
    event_param    go to state 56
    type           go to state 57
    baseType       go to state 29
    intType        go to state 30


state 36

  131 intType: TOK_UNSIGNED TOK_INT .

    $default  reduce using rule 131 (intType)


state 37

  124 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 124 (type)


state 38

   30 normal_event: TOK_IDENT TOK_LPAREN . event_aparam_l TOK_RPAREN

    TOK_IDENT  shift, and go to state 58

    $default  reduce using rule 33 (event_aparam_l)

    event_aparam_l  go to state 59


state 39

   27 binary_event_oprs: primitive_all TOK_PAT_STAR .

    $default  reduce using rule 27 (binary_event_oprs)


state 40

   25 binary_event_oprs: primitive_all TOK_PAT_OR . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 60
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 41

   26 binary_event_oprs: primitive_all TOK_COLON . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 61
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 42

    9 rule: primitive_all TOK_ARROW . rule_stmts

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LBRACE     shift, and go to state 65
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    rule_stmts        go to state 74
    compound_stmt2    go to state 75
    compound_stmt1    go to state 76
    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 80
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 43

   22 primitive_all: normal_event TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 85
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 44

  115 semi_colon: TOK_SEMICOLON .

    $default  reduce using rule 115 (semi_colon)


state 45

   93 function_defn: TOK_LBRACE . function_body TOK_RBRACE semi_colon

    $default  reduce using rule 96 (function_body)

    function_body  go to state 86


state 46

   92 function_proto: function_decl function_defn .

    $default  reduce using rule 92 (function_proto)


state 47

   91 function_proto: function_decl semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 91 (function_proto)


state 48

   88 global_var: TOK_IDENT .
   89           | TOK_IDENT . TOK_ASSIGN expression
  102 function_decl: type TOK_IDENT . func_param_l

    TOK_ASSIGN    shift, and go to state 88
    TOK_LPAREN    shift, and go to state 89
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    $default  reduce using rule 88 (global_var)

    func_param_l  go to state 90
    func_param    go to state 91
    type          go to state 92
    baseType      go to state 29
    intType       go to state 30


state 49

   85 global_decl: type global_l . semi_colon
   86 global_l: global_l . TOK_COMMA global_var

    TOK_COMMA      shift, and go to state 93
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 94


state 50

   87 global_l: global_var .

    $default  reduce using rule 87 (global_l)


state 51

   24 primitive_all: TOK_LPAREN primitive_all TOK_RPAREN .

    $default  reduce using rule 24 (primitive_all)


state 52

   90 class_decl: TOK_CLASS TOK_IDENT semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 90 (class_decl)


state 53

  109 event_param_l: TOK_LPAREN . event_param_l TOK_RPAREN
  112              | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 53
    TOK_RPAREN    shift, and go to state 95
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    event_param_l  go to state 96
    event_param    go to state 56
    type           go to state 57
    baseType       go to state 29
    intType        go to state 30


state 54

  123 type: TOK_IDENT .

    $default  reduce using rule 123 (type)


state 55

  108 event_decl: TOK_EVENT TOK_IDENT event_param_l . semi_colon
  110 event_param_l: event_param_l . TOK_COMMA event_param

    TOK_COMMA      shift, and go to state 97
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 98


state 56

  111 event_param_l: event_param .

    $default  reduce using rule 111 (event_param_l)


state 57

  113 event_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 99


state 58

   32 event_aparam_l: TOK_IDENT .

    $default  reduce using rule 32 (event_aparam_l)


state 59

   30 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l . TOK_RPAREN
   31 event_aparam_l: event_aparam_l . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 100
    TOK_RPAREN  shift, and go to state 101


state 60

   25 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   25                  | primitive_all TOK_PAT_OR primitive_all .
   26                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39
    TOK_COLON     shift, and go to state 41

    $default  reduce using rule 25 (binary_event_oprs)


state 61

   25 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all . TOK_COLON primitive_all
   26                  | primitive_all TOK_COLON primitive_all .
   27                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39

    $default  reduce using rule 26 (binary_event_oprs)


state 62

   65 unary_operation: TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 102
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 63

   64 unary_operation: TOK_BITNOT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 103
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 64

   63 unary_operation: TOK_NOT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 104
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 65

   13 compound_stmt2: TOK_LBRACE . compound_stmt2 TOK_RBRACE
   14               | TOK_LBRACE . compound_stmt2 semi_colon TOK_RBRACE
   16 compound_stmt1: TOK_LBRACE . stmt_plus1 TOK_RBRACE
   17               | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 65

    $default  reduce using rule 19 (stmt_plus1)

    compound_stmt2  go to state 105
    compound_stmt1  go to state 76
    stmt_plus1      go to state 106
    semi_colon      go to state 107


state 66

   62 expression: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 108
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 67

   52 func_name: TOK_PRINT .

    $default  reduce using rule 52 (func_name)


state 68

  116 literal: TOK_UINTNUM .

    $default  reduce using rule 116 (literal)


state 69

  117 literal: TOK_DOUBLENUM .

    $default  reduce using rule 117 (literal)


state 70

  118 literal: TOK_STRCONST .

    $default  reduce using rule 118 (literal)


state 71

  119 literal: TOK_TRUE .

    $default  reduce using rule 119 (literal)


state 72

  120 literal: TOK_FALSE .

    $default  reduce using rule 120 (literal)


state 73

   51 func_name: TOK_IDENT .
   84 ref_expr: TOK_IDENT .

    TOK_LPAREN  reduce using rule 51 (func_name)
    $default    reduce using rule 84 (ref_expr)


state 74

    9 rule: primitive_all TOK_ARROW rule_stmts .

    $default  reduce using rule 9 (rule)


state 75

   10 rule_stmts: compound_stmt2 . semi_colon
   11           | compound_stmt2 .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 11 (rule_stmts)

    semi_colon  go to state 109


state 76

   15 compound_stmt2: compound_stmt1 .

    $default  reduce using rule 15 (compound_stmt2)


state 77

   58 expression: func_invocation .

    $default  reduce using rule 58 (expression)


state 78

   49 func_invocation: func_name . TOK_LPAREN caller_param_l TOK_RPAREN
   50                | func_name . TOK_LPAREN TOK_RPAREN

    TOK_LPAREN  shift, and go to state 110


state 79

   59 expression: assignment .

    $default  reduce using rule 59 (expression)


state 80

   12 rule_stmts: expression . semi_colon
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 111
    TOK_MINUS      shift, and go to state 112
    TOK_MULT       shift, and go to state 113
    TOK_DIV        shift, and go to state 114
    TOK_MOD        shift, and go to state 115
    TOK_BITAND     shift, and go to state 116
    TOK_BITOR      shift, and go to state 117
    TOK_BITXOR     shift, and go to state 118
    TOK_SHL        shift, and go to state 119
    TOK_SHR        shift, and go to state 120
    TOK_GT         shift, and go to state 121
    TOK_LT         shift, and go to state 122
    TOK_GE         shift, and go to state 123
    TOK_LE         shift, and go to state 124
    TOK_EQ         shift, and go to state 125
    TOK_NE         shift, and go to state 126
    TOK_AND        shift, and go to state 127
    TOK_OR         shift, and go to state 128
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 129


state 81

   60 expression: unary_operation .

    $default  reduce using rule 60 (expression)


state 82

   61 expression: binary_operation .

    $default  reduce using rule 61 (expression)


state 83

   55 assignment: ref_expr . TOK_ASSIGN expression
   57 expression: ref_expr .

    TOK_ASSIGN  shift, and go to state 130

    $default  reduce using rule 57 (expression)


state 84

   56 expression: literal .

    $default  reduce using rule 56 (expression)


state 85

   22 primitive_all: normal_event TOK_BITOR expression .
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126
    TOK_AND     shift, and go to state 127
    TOK_OR      shift, and go to state 128

    $default  reduce using rule 22 (primitive_all)


state 86

   93 function_defn: TOK_LBRACE function_body . TOK_RBRACE semi_colon
   94 function_body: function_body . local_decl
   95              | function_body . simple_stmt

    TOK_RBRACE    shift, and go to state 131
    TOK_IF        shift, and go to state 132
    TOK_RETURN    shift, and go to state 133
    TOK_PRINT     shift, and go to state 67
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 134

    if_then_else_stmt  go to state 135
    simple_stmt        go to state 136
    func_invocation    go to state 137
    func_name          go to state 78
    assignment         go to state 138
    ref_expr           go to state 139
    local_decl         go to state 140
    type               go to state 141
    baseType           go to state 29
    intType            go to state 30


state 87

  114 semi_colon: semi_colon TOK_SEMICOLON .

    $default  reduce using rule 114 (semi_colon)


state 88

   89 global_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 142
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 89

  103 func_param_l: TOK_LPAREN . func_param_l TOK_RPAREN
  106             | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 89
    TOK_RPAREN    shift, and go to state 143
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    func_param_l  go to state 144
    func_param    go to state 91
    type          go to state 92
    baseType      go to state 29
    intType       go to state 30


state 90

  102 function_decl: type TOK_IDENT func_param_l .
  104 func_param_l: func_param_l . TOK_COMMA func_param

    TOK_COMMA  shift, and go to state 145

    $default  reduce using rule 102 (function_decl)


state 91

  105 func_param_l: func_param .

    $default  reduce using rule 105 (func_param_l)


state 92

  107 func_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 146


state 93

   86 global_l: global_l TOK_COMMA . global_var

    TOK_IDENT  shift, and go to state 147

    global_var  go to state 148


state 94

   85 global_decl: type global_l semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 85 (global_decl)


state 95

  112 event_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 112 (event_param_l)


state 96

  109 event_param_l: TOK_LPAREN event_param_l . TOK_RPAREN
  110              | event_param_l . TOK_COMMA event_param

    TOK_COMMA   shift, and go to state 97
    TOK_RPAREN  shift, and go to state 149


state 97

  110 event_param_l: event_param_l TOK_COMMA . event_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    event_param  go to state 150
    type         go to state 57
    baseType     go to state 29
    intType      go to state 30


state 98

  108 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 108 (event_decl)


state 99

  113 event_param: type TOK_IDENT .

    $default  reduce using rule 113 (event_param)


state 100

   31 event_aparam_l: event_aparam_l TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 151


state 101

   30 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN .

    $default  reduce using rule 30 (normal_event)


state 102

   65 unary_operation: TOK_MINUS expression .
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    $default  reduce using rule 65 (unary_operation)


state 103

   64 unary_operation: TOK_BITNOT expression .
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 111
    TOK_MINUS  shift, and go to state 112
    TOK_MULT   shift, and go to state 113
    TOK_DIV    shift, and go to state 114
    TOK_MOD    shift, and go to state 115
    TOK_SHL    shift, and go to state 119
    TOK_SHR    shift, and go to state 120

    $default  reduce using rule 64 (unary_operation)


state 104

   63 unary_operation: TOK_NOT expression .
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126

    $default  reduce using rule 63 (unary_operation)


state 105

   13 compound_stmt2: TOK_LBRACE compound_stmt2 . TOK_RBRACE
   14               | TOK_LBRACE compound_stmt2 . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44
    TOK_RBRACE     shift, and go to state 152

    semi_colon  go to state 153


state 106

   16 compound_stmt1: TOK_LBRACE stmt_plus1 . TOK_RBRACE
   18 stmt_plus1: stmt_plus1 . simple_stmt

    TOK_RBRACE  shift, and go to state 154
    TOK_IF      shift, and go to state 132
    TOK_RETURN  shift, and go to state 133
    TOK_PRINT   shift, and go to state 67
    TOK_IDENT   shift, and go to state 73

    if_then_else_stmt  go to state 135
    simple_stmt        go to state 155
    func_invocation    go to state 137
    func_name          go to state 78
    assignment         go to state 138
    ref_expr           go to state 139


state 107

   17 compound_stmt1: TOK_LBRACE semi_colon . TOK_RBRACE
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87
    TOK_RBRACE     shift, and go to state 156


state 108

   62 expression: TOK_LPAREN expression . TOK_RPAREN
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126
    TOK_AND     shift, and go to state 127
    TOK_OR      shift, and go to state 128
    TOK_RPAREN  shift, and go to state 157


state 109

   10 rule_stmts: compound_stmt2 semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 10 (rule_stmts)


state 110

   49 func_invocation: func_name TOK_LPAREN . caller_param_l TOK_RPAREN
   50                | func_name TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_RPAREN     shift, and go to state 158
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    caller_param_l    go to state 159
    assignment        go to state 79
    expression        go to state 160
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 111

   79 binary_operation: expression TOK_PLUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 161
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 112

   80 binary_operation: expression TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 162
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 113

   81 binary_operation: expression TOK_MULT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 163
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 114

   82 binary_operation: expression TOK_DIV . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 164
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 115

   83 binary_operation: expression TOK_MOD . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 165
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 116

   76 binary_operation: expression TOK_BITAND . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 166
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 117

   74 binary_operation: expression TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 167
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 118

   75 binary_operation: expression TOK_BITXOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 168
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 119

   77 binary_operation: expression TOK_SHL . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 169
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 120

   78 binary_operation: expression TOK_SHR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 170
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 121

   70 binary_operation: expression TOK_GT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 171
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 122

   71 binary_operation: expression TOK_LT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 172
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 123

   72 binary_operation: expression TOK_GE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 173
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 124

   73 binary_operation: expression TOK_LE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 174
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 125

   68 binary_operation: expression TOK_EQ . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 175
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 126

   69 binary_operation: expression TOK_NE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 176
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 127

   67 binary_operation: expression TOK_AND . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 177
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 128

   66 binary_operation: expression TOK_OR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 178
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 129

   12 rule_stmts: expression semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 12 (rule_stmts)


state 130

   55 assignment: ref_expr TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 179
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 131

   93 function_defn: TOK_LBRACE function_body TOK_RBRACE . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 180


state 132

   34 if_then_else_stmt: TOK_IF . condition basic_block
   35                  | TOK_IF . condition basic_block TOK_ELSE basic_block

    TOK_LPAREN  shift, and go to state 181

    condition  go to state 182


state 133

   45 simple_stmt: TOK_RETURN . expression semi_colon
   46            | TOK_RETURN . semi_colon

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_SEMICOLON  shift, and go to state 44
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 183
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    semi_colon        go to state 184
    literal           go to state 84


state 134

   51 func_name: TOK_IDENT .
   84 ref_expr: TOK_IDENT .
  123 type: TOK_IDENT .

    TOK_ASSIGN  reduce using rule 84 (ref_expr)
    TOK_IDENT   reduce using rule 123 (type)
    $default    reduce using rule 51 (func_name)


state 135

   44 simple_stmt: if_then_else_stmt .

    $default  reduce using rule 44 (simple_stmt)


state 136

   95 function_body: function_body simple_stmt .

    $default  reduce using rule 95 (function_body)


state 137

   42 simple_stmt: func_invocation . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 185


state 138

   43 simple_stmt: assignment . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 186


state 139

   55 assignment: ref_expr . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 130


state 140

   94 function_body: function_body local_decl .

    $default  reduce using rule 94 (function_body)


state 141

   97 local_decl: type . local_l semi_colon

    TOK_IDENT  shift, and go to state 187

    local_l    go to state 188
    local_var  go to state 189


state 142

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression
   89 global_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126
    TOK_AND     shift, and go to state 127
    TOK_OR      shift, and go to state 128

    $default  reduce using rule 89 (global_var)


state 143

  106 func_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 106 (func_param_l)


state 144

  103 func_param_l: TOK_LPAREN func_param_l . TOK_RPAREN
  104             | func_param_l . TOK_COMMA func_param

    TOK_COMMA   shift, and go to state 145
    TOK_RPAREN  shift, and go to state 190


state 145

  104 func_param_l: func_param_l TOK_COMMA . func_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    func_param  go to state 191
    type        go to state 92
    baseType    go to state 29
    intType     go to state 30


state 146

  107 func_param: type TOK_IDENT .

    $default  reduce using rule 107 (func_param)


state 147

   88 global_var: TOK_IDENT .
   89           | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 88

    $default  reduce using rule 88 (global_var)


state 148

   86 global_l: global_l TOK_COMMA global_var .

    $default  reduce using rule 86 (global_l)


state 149

  109 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN .

    $default  reduce using rule 109 (event_param_l)


state 150

  110 event_param_l: event_param_l TOK_COMMA event_param .

    $default  reduce using rule 110 (event_param_l)


state 151

   31 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT .

    $default  reduce using rule 31 (event_aparam_l)


state 152

   13 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE .

    $default  reduce using rule 13 (compound_stmt2)


state 153

   14 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon . TOK_RBRACE
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87
    TOK_RBRACE     shift, and go to state 192


state 154

   16 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE .

    $default  reduce using rule 16 (compound_stmt1)


state 155

   18 stmt_plus1: stmt_plus1 simple_stmt .

    $default  reduce using rule 18 (stmt_plus1)


state 156

   17 compound_stmt1: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 17 (compound_stmt1)


state 157

   62 expression: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 62 (expression)


state 158

   50 func_invocation: func_name TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 50 (func_invocation)


state 159

   49 func_invocation: func_name TOK_LPAREN caller_param_l . TOK_RPAREN
   53 caller_param_l: caller_param_l . TOK_COMMA expression

    TOK_COMMA   shift, and go to state 193
    TOK_RPAREN  shift, and go to state 194


state 160

   54 caller_param_l: expression .
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126
    TOK_AND     shift, and go to state 127
    TOK_OR      shift, and go to state 128

    $default  reduce using rule 54 (caller_param_l)


state 161

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   79                 | expression TOK_PLUS expression .
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 113
    TOK_DIV   shift, and go to state 114
    TOK_MOD   shift, and go to state 115

    $default  reduce using rule 79 (binary_operation)


state 162

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   80                 | expression TOK_MINUS expression .
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 113
    TOK_DIV   shift, and go to state 114
    TOK_MOD   shift, and go to state 115

    $default  reduce using rule 80 (binary_operation)


state 163

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   81                 | expression TOK_MULT expression .
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    $default  reduce using rule 81 (binary_operation)


state 164

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   82                 | expression TOK_DIV expression .
   83                 | expression . TOK_MOD expression

    $default  reduce using rule 82 (binary_operation)


state 165

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression
   83                 | expression TOK_MOD expression .

    $default  reduce using rule 83 (binary_operation)


state 166

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   76                 | expression TOK_BITAND expression .
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 111
    TOK_MINUS  shift, and go to state 112
    TOK_MULT   shift, and go to state 113
    TOK_DIV    shift, and go to state 114
    TOK_MOD    shift, and go to state 115
    TOK_SHL    shift, and go to state 119
    TOK_SHR    shift, and go to state 120

    $default  reduce using rule 76 (binary_operation)


state 167

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   74                 | expression TOK_BITOR expression .
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120

    $default  reduce using rule 74 (binary_operation)


state 168

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   75                 | expression TOK_BITXOR expression .
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120

    $default  reduce using rule 75 (binary_operation)


state 169

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   77                 | expression TOK_SHL expression .
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 111
    TOK_MINUS  shift, and go to state 112
    TOK_MULT   shift, and go to state 113
    TOK_DIV    shift, and go to state 114
    TOK_MOD    shift, and go to state 115

    $default  reduce using rule 77 (binary_operation)


state 170

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   78                 | expression TOK_SHR expression .
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 111
    TOK_MINUS  shift, and go to state 112
    TOK_MULT   shift, and go to state 113
    TOK_DIV    shift, and go to state 114
    TOK_MOD    shift, and go to state 115

    $default  reduce using rule 78 (binary_operation)


state 171

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   70                 | expression TOK_GT expression .
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 70 (binary_operation)


state 172

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   71                 | expression TOK_LT expression .
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 71 (binary_operation)


state 173

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   72                 | expression TOK_GE expression .
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 72 (binary_operation)


state 174

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   73                 | expression TOK_LE expression .
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 73 (binary_operation)


state 175

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   68                 | expression TOK_EQ expression .
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 68 (binary_operation)


state 176

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   69                 | expression TOK_NE expression .
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 69 (binary_operation)


state 177

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   67                 | expression TOK_AND expression .
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126

    $default  reduce using rule 67 (binary_operation)


state 178

   66 binary_operation: expression . TOK_OR expression
   66                 | expression TOK_OR expression .
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126
    TOK_AND     shift, and go to state 127

    $default  reduce using rule 66 (binary_operation)


state 179

   55 assignment: ref_expr TOK_ASSIGN expression .
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126
    TOK_AND     shift, and go to state 127
    TOK_OR      shift, and go to state 128

    $default  reduce using rule 55 (assignment)


state 180

   93 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 93 (function_defn)


state 181

   48 condition: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 195
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 182

   34 if_then_else_stmt: TOK_IF condition . basic_block
   35                  | TOK_IF condition . basic_block TOK_ELSE basic_block

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 196
    TOK_IF         shift, and go to state 132
    TOK_RETURN     shift, and go to state 133
    TOK_PRINT      shift, and go to state 67
    TOK_IDENT      shift, and go to state 73

    if_then_else_stmt  go to state 135
    basic_block        go to state 197
    simple_stmt        go to state 198
    empty_block        go to state 199
    func_invocation    go to state 137
    func_name          go to state 78
    assignment         go to state 138
    ref_expr           go to state 139
    semi_colon         go to state 200


state 183

   45 simple_stmt: TOK_RETURN expression . semi_colon
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 111
    TOK_MINUS      shift, and go to state 112
    TOK_MULT       shift, and go to state 113
    TOK_DIV        shift, and go to state 114
    TOK_MOD        shift, and go to state 115
    TOK_BITAND     shift, and go to state 116
    TOK_BITOR      shift, and go to state 117
    TOK_BITXOR     shift, and go to state 118
    TOK_SHL        shift, and go to state 119
    TOK_SHR        shift, and go to state 120
    TOK_GT         shift, and go to state 121
    TOK_LT         shift, and go to state 122
    TOK_GE         shift, and go to state 123
    TOK_LE         shift, and go to state 124
    TOK_EQ         shift, and go to state 125
    TOK_NE         shift, and go to state 126
    TOK_AND        shift, and go to state 127
    TOK_OR         shift, and go to state 128
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 201


state 184

   46 simple_stmt: TOK_RETURN semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 46 (simple_stmt)


state 185

   42 simple_stmt: func_invocation semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 42 (simple_stmt)


state 186

   43 simple_stmt: assignment semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 43 (simple_stmt)


state 187

  100 local_var: TOK_IDENT .
  101          | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 202

    $default  reduce using rule 100 (local_var)


state 188

   97 local_decl: type local_l . semi_colon
   98 local_l: local_l . TOK_COMMA local_var

    TOK_COMMA      shift, and go to state 203
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 204


state 189

   99 local_l: local_var .

    $default  reduce using rule 99 (local_l)


state 190

  103 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN .

    $default  reduce using rule 103 (func_param_l)


state 191

  104 func_param_l: func_param_l TOK_COMMA func_param .

    $default  reduce using rule 104 (func_param_l)


state 192

   14 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE .

    $default  reduce using rule 14 (compound_stmt2)


state 193

   53 caller_param_l: caller_param_l TOK_COMMA . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 205
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 194

   49 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 49 (func_invocation)


state 195

   48 condition: TOK_LPAREN expression . TOK_RPAREN
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126
    TOK_AND     shift, and go to state 127
    TOK_OR      shift, and go to state 128
    TOK_RPAREN  shift, and go to state 206


state 196

   36 basic_block: TOK_LBRACE . stmt_plus2 TOK_RBRACE
   47 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 41 (stmt_plus2)

    stmt_plus2  go to state 207
    semi_colon  go to state 208


state 197

   34 if_then_else_stmt: TOK_IF condition basic_block .
   35                  | TOK_IF condition basic_block . TOK_ELSE basic_block

    TOK_ELSE  shift, and go to state 209

    TOK_ELSE  [reduce using rule 34 (if_then_else_stmt)]
    $default  reduce using rule 34 (if_then_else_stmt)


state 198

   38 basic_block: simple_stmt .

    $default  reduce using rule 38 (basic_block)


state 199

   37 basic_block: empty_block .

    $default  reduce using rule 37 (basic_block)


state 200

   39 basic_block: semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 39 (basic_block)


state 201

   45 simple_stmt: TOK_RETURN expression semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 45 (simple_stmt)


state 202

  101 local_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 210
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 84


state 203

   98 local_l: local_l TOK_COMMA . local_var

    TOK_IDENT  shift, and go to state 187

    local_var  go to state 211


state 204

   97 local_decl: type local_l semi_colon .
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87

    $default  reduce using rule 97 (local_decl)


state 205

   53 caller_param_l: caller_param_l TOK_COMMA expression .
   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126
    TOK_AND     shift, and go to state 127
    TOK_OR      shift, and go to state 128

    $default  reduce using rule 53 (caller_param_l)


state 206

   48 condition: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 48 (condition)


state 207

   36 basic_block: TOK_LBRACE stmt_plus2 . TOK_RBRACE
   40 stmt_plus2: stmt_plus2 . simple_stmt

    TOK_RBRACE  shift, and go to state 212
    TOK_IF      shift, and go to state 132
    TOK_RETURN  shift, and go to state 133
    TOK_PRINT   shift, and go to state 67
    TOK_IDENT   shift, and go to state 73

    if_then_else_stmt  go to state 135
    simple_stmt        go to state 213
    func_invocation    go to state 137
    func_name          go to state 78
    assignment         go to state 138
    ref_expr           go to state 139


state 208

   47 empty_block: TOK_LBRACE semi_colon . TOK_RBRACE
  114 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 87
    TOK_RBRACE     shift, and go to state 214


state 209

   35 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE . basic_block

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 196
    TOK_IF         shift, and go to state 132
    TOK_RETURN     shift, and go to state 133
    TOK_PRINT      shift, and go to state 67
    TOK_IDENT      shift, and go to state 73

    if_then_else_stmt  go to state 135
    basic_block        go to state 215
    simple_stmt        go to state 198
    empty_block        go to state 199
    func_invocation    go to state 137
    func_name          go to state 78
    assignment         go to state 138
    ref_expr           go to state 139
    semi_colon         go to state 200


state 210

   66 binary_operation: expression . TOK_OR expression
   67                 | expression . TOK_AND expression
   68                 | expression . TOK_EQ expression
   69                 | expression . TOK_NE expression
   70                 | expression . TOK_GT expression
   71                 | expression . TOK_LT expression
   72                 | expression . TOK_GE expression
   73                 | expression . TOK_LE expression
   74                 | expression . TOK_BITOR expression
   75                 | expression . TOK_BITXOR expression
   76                 | expression . TOK_BITAND expression
   77                 | expression . TOK_SHL expression
   78                 | expression . TOK_SHR expression
   79                 | expression . TOK_PLUS expression
   80                 | expression . TOK_MINUS expression
   81                 | expression . TOK_MULT expression
   82                 | expression . TOK_DIV expression
   83                 | expression . TOK_MOD expression
  101 local_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 111
    TOK_MINUS   shift, and go to state 112
    TOK_MULT    shift, and go to state 113
    TOK_DIV     shift, and go to state 114
    TOK_MOD     shift, and go to state 115
    TOK_BITAND  shift, and go to state 116
    TOK_BITOR   shift, and go to state 117
    TOK_BITXOR  shift, and go to state 118
    TOK_SHL     shift, and go to state 119
    TOK_SHR     shift, and go to state 120
    TOK_GT      shift, and go to state 121
    TOK_LT      shift, and go to state 122
    TOK_GE      shift, and go to state 123
    TOK_LE      shift, and go to state 124
    TOK_EQ      shift, and go to state 125
    TOK_NE      shift, and go to state 126
    TOK_AND     shift, and go to state 127
    TOK_OR      shift, and go to state 128

    $default  reduce using rule 101 (local_var)


state 211

   98 local_l: local_l TOK_COMMA local_var .

    $default  reduce using rule 98 (local_l)


state 212

   36 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE .

    $default  reduce using rule 36 (basic_block)


state 213

   40 stmt_plus2: stmt_plus2 simple_stmt .

    $default  reduce using rule 40 (stmt_plus2)


state 214

   47 empty_block: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 47 (empty_block)


state 215

   35 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE basic_block .

    $default  reduce using rule 35 (if_then_else_stmt)
