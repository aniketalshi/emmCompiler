Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_LBRACK
   TOK_DOT


State 198 conflicts: 1 shift/reduce


Grammar

    0 $accept: s_specification $end

    1 s_specification: specification

    2 specification: specification declaration
    3              | specification rule
    4              | /* empty */

    5 declaration: event_decl
    6            | function_proto
    7            | class_decl
    8            | global_decl

    9 rule: primitive_all TOK_ARROW rule_stmts

   10 rule_stmts: compound_stmt2 semi_colon
   11           | compound_stmt2
   12           | expression semi_colon
   13           | semi_colon

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE
   16               | compound_stmt1

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE semi_colon TOK_RBRACE

   19 stmt_plus1: stmt_plus1 simple_stmt
   20           | /* empty */

   21 primitive_all: normal_event
   22              | any_event
   23              | normal_event TOK_BITOR expression
   24              | binary_event_oprs
   25              | TOK_LPAREN primitive_all TOK_RPAREN

   26 binary_event_oprs: primitive_all TOK_PAT_OR primitive_all
   27                  | primitive_all TOK_COLON primitive_all
   28                  | primitive_all TOK_PAT_STAR
   29                  | TOK_NOT primitive_all

   30 any_event: TOK_ANY

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT
   33               | TOK_IDENT
   34               | /* empty */

   35 if_then_else_stmt: TOK_IF condition basic_block
   36                  | TOK_IF condition basic_block TOK_ELSE basic_block

   37 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon
   38            | TOK_LBRACE stmt_plus2 TOK_RBRACE
   39            | empty_block
   40            | simple_stmt
   41            | semi_colon

   42 stmt_plus2: stmt_plus2 simple_stmt
   43           | /* empty */

   44 simple_stmt: func_invocation semi_colon
   45            | assignment semi_colon
   46            | if_then_else_stmt
   47            | TOK_RETURN expression semi_colon
   48            | TOK_RETURN semi_colon

   49 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon
   50            | TOK_LBRACE semi_colon TOK_RBRACE

   51 condition: TOK_LPAREN expression TOK_RPAREN

   52 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN
   53                | func_name TOK_LPAREN TOK_RPAREN

   54 func_name: TOK_IDENT
   55          | TOK_PRINT

   56 caller_param_l: caller_param_l TOK_COMMA expression
   57               | expression

   58 assignment: ref_expr TOK_ASSIGN expression

   59 expression: literal
   60           | ref_expr
   61           | func_invocation
   62           | assignment
   63           | unary_operation
   64           | binary_operation
   65           | TOK_LPAREN expression TOK_RPAREN

   66 unary_operation: TOK_NOT expression
   67                | TOK_BITNOT expression
   68                | TOK_MINUS expression

   69 binary_operation: expression TOK_OR expression
   70                 | expression TOK_AND expression
   71                 | expression TOK_EQ expression
   72                 | expression TOK_NE expression
   73                 | expression TOK_GT expression
   74                 | expression TOK_LT expression
   75                 | expression TOK_GE expression
   76                 | expression TOK_LE expression
   77                 | expression TOK_BITOR expression
   78                 | expression TOK_BITXOR expression
   79                 | expression TOK_BITAND expression
   80                 | expression TOK_SHL expression
   81                 | expression TOK_SHR expression
   82                 | expression TOK_PLUS expression
   83                 | expression TOK_MINUS expression
   84                 | expression TOK_MULT expression
   85                 | expression TOK_DIV expression
   86                 | expression TOK_MOD expression

   87 ref_expr: TOK_IDENT

   88 global_decl: type global_l semi_colon

   89 global_l: global_l TOK_COMMA global_var
   90         | global_var

   91 global_var: TOK_IDENT
   92           | TOK_IDENT TOK_ASSIGN expression

   93 class_decl: TOK_CLASS TOK_IDENT semi_colon

   94 function_proto: function_decl semi_colon
   95               | function_decl function_defn

   96 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon
   97              | TOK_LBRACE function_body TOK_RBRACE

   98 function_body: function_body local_decl
   99              | function_body simple_stmt
  100              | /* empty */

  101 local_decl: type local_l semi_colon

  102 local_l: local_l TOK_COMMA local_var
  103        | local_var

  104 local_var: TOK_IDENT
  105          | TOK_IDENT TOK_ASSIGN expression

  106 function_decl: type TOK_IDENT func_param_l

  107 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN
  108             | func_param_l TOK_COMMA func_param
  109             | func_param
  110             | TOK_LPAREN TOK_RPAREN

  111 func_param: type TOK_IDENT

  112 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon

  113 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN
  114              | event_param_l TOK_COMMA event_param
  115              | event_param
  116              | TOK_LPAREN TOK_RPAREN

  117 event_param: type TOK_IDENT

  118 semi_colon: semi_colon TOK_SEMICOLON
  119           | TOK_SEMICOLON

  120 literal: TOK_UINTNUM
  121        | TOK_DOUBLENUM
  122        | TOK_STRCONST
  123        | TOK_TRUE
  124        | TOK_FALSE

  125 type: baseType
  126     | intType
  127     | TOK_IDENT
  128     | TOK_UNSIGNED baseType

  129 baseType: TOK_VOID
  130         | TOK_BOOL
  131         | TOK_BYTE
  132         | TOK_STRING
  133         | TOK_DOUBLE

  134 intType: TOK_INT
  135        | TOK_UNSIGNED TOK_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 28
TOK_PAT_OR (260) 26
TOK_PAT_NOT (261)
TOK_PLUS (262) 82
TOK_MINUS (263) 68 83
TOK_UMINUS (264)
TOK_MULT (265) 84
TOK_DIV (266) 85
TOK_MOD (267) 86
TOK_BITAND (268) 79
TOK_BITOR (269) 23 77
TOK_BITNOT (270) 67
TOK_BITXOR (271) 78
TOK_SHL (272) 80
TOK_SHR (273) 81
TOK_GT (274) 73
TOK_LT (275) 74
TOK_GE (276) 75
TOK_LE (277) 76
TOK_EQ (278) 71
TOK_NE (279) 72
TOK_AND (280) 70
TOK_OR (281) 69
TOK_NOT (282) 29 66
TOK_COMMA (283) 32 56 89 102 108 114
TOK_ASSIGN (284) 58 92 105
TOK_SEMICOLON (285) 118 119
TOK_COLON (286) 27
TOK_ARROW (287) 9
TOK_LBRACE (288) 14 15 17 18 37 38 49 50 96 97
TOK_RBRACE (289) 14 15 17 18 37 38 49 50 96 97
TOK_LPAREN (290) 25 31 51 52 53 65 107 110 113 116
TOK_RPAREN (291) 25 31 51 52 53 65 107 110 113 116
TOK_IF (292) 35 36
TOK_ELSE (293) 36
TOK_CLASS (294) 93
TOK_RETURN (295) 47 48
TOK_EVENT (296) 112
TOK_ANY (297) 30
TOK_PRINT (298) 55
TOK_UINTNUM (299) 120
TOK_DOUBLENUM (300) 121
TOK_VOID (301) 129
TOK_STRING (302) 132
TOK_STRCONST (303) 122
TOK_INT (304) 134 135
TOK_UNSIGNED (305) 128 135
TOK_BOOL (306) 130
TOK_BYTE (307) 131
TOK_DOUBLE (308) 133
TOK_SHORT (309)
TOK_TRUE (310) 123
TOK_FALSE (311) 124
TOK_IDENT (312) 31 32 33 54 87 91 92 93 104 105 106 111 112 117 127
TOK_DOUBLE_COLON (313)
TOK_LBRACK (314)
TOK_DOT (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
s_specification (62)
    on left: 1, on right: 0
specification (63)
    on left: 2 3 4, on right: 1 2 3
declaration (64)
    on left: 5 6 7 8, on right: 2
rule (65)
    on left: 9, on right: 3
rule_stmts (66)
    on left: 10 11 12 13, on right: 9
compound_stmt2 (67)
    on left: 14 15 16, on right: 10 11 14 15
compound_stmt1 (68)
    on left: 17 18, on right: 16
stmt_plus1 (69)
    on left: 19 20, on right: 17 19
primitive_all (70)
    on left: 21 22 23 24 25, on right: 9 25 26 27 28 29
binary_event_oprs (71)
    on left: 26 27 28 29, on right: 24
any_event (72)
    on left: 30, on right: 22
normal_event (73)
    on left: 31, on right: 21 23
event_aparam_l (74)
    on left: 32 33 34, on right: 31 32
if_then_else_stmt (75)
    on left: 35 36, on right: 46
basic_block (76)
    on left: 37 38 39 40 41, on right: 35 36
stmt_plus2 (77)
    on left: 42 43, on right: 37 38 42
simple_stmt (78)
    on left: 44 45 46 47 48, on right: 19 40 42 99
empty_block (79)
    on left: 49 50, on right: 39
condition (80)
    on left: 51, on right: 35 36
func_invocation (81)
    on left: 52 53, on right: 44 61
func_name (82)
    on left: 54 55, on right: 52 53
caller_param_l (83)
    on left: 56 57, on right: 52 56
assignment (84)
    on left: 58, on right: 45 62
expression (85)
    on left: 59 60 61 62 63 64 65, on right: 12 23 47 51 56 57 58 65
    66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
    92 105
unary_operation (86)
    on left: 66 67 68, on right: 63
binary_operation (87)
    on left: 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86,
    on right: 64
ref_expr (88)
    on left: 87, on right: 58 60
global_decl (89)
    on left: 88, on right: 8
global_l (90)
    on left: 89 90, on right: 88 89
global_var (91)
    on left: 91 92, on right: 89 90
class_decl (92)
    on left: 93, on right: 7
function_proto (93)
    on left: 94 95, on right: 6
function_defn (94)
    on left: 96 97, on right: 95
function_body (95)
    on left: 98 99 100, on right: 96 97 98 99
local_decl (96)
    on left: 101, on right: 98
local_l (97)
    on left: 102 103, on right: 101 102
local_var (98)
    on left: 104 105, on right: 102 103
function_decl (99)
    on left: 106, on right: 94 95
func_param_l (100)
    on left: 107 108 109 110, on right: 106 107 108
func_param (101)
    on left: 111, on right: 108 109
event_decl (102)
    on left: 112, on right: 5
event_param_l (103)
    on left: 113 114 115 116, on right: 112 113 114
event_param (104)
    on left: 117, on right: 114 115
semi_colon (105)
    on left: 118 119, on right: 10 12 13 15 18 37 41 44 45 47 48 49
    50 88 93 94 96 101 112 118
literal (106)
    on left: 120 121 122 123 124, on right: 59
type (107)
    on left: 125 126 127 128, on right: 88 101 106 111 117
baseType (108)
    on left: 129 130 131 132 133, on right: 125 128
intType (109)
    on left: 134 135, on right: 126


state 0

    0 $accept: . s_specification $end

    $default  reduce using rule 4 (specification)

    s_specification  go to state 1
    specification    go to state 2


state 1

    0 $accept: s_specification . $end

    $end  shift, and go to state 3


state 2

    1 s_specification: specification .
    2 specification: specification . declaration
    3              | specification . rule

    TOK_NOT       shift, and go to state 4
    TOK_LPAREN    shift, and go to state 5
    TOK_CLASS     shift, and go to state 6
    TOK_EVENT     shift, and go to state 7
    TOK_ANY       shift, and go to state 8
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 16

    $default  reduce using rule 1 (s_specification)

    declaration        go to state 17
    rule               go to state 18
    primitive_all      go to state 19
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22
    global_decl        go to state 23
    class_decl         go to state 24
    function_proto     go to state 25
    function_decl      go to state 26
    event_decl         go to state 27
    type               go to state 28
    baseType           go to state 29
    intType            go to state 30


state 3

    0 $accept: s_specification $end .

    $default  accept


state 4

   29 binary_event_oprs: TOK_NOT . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 32
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 5

   25 primitive_all: TOK_LPAREN . primitive_all TOK_RPAREN

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 33
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 6

   93 class_decl: TOK_CLASS . TOK_IDENT semi_colon

    TOK_IDENT  shift, and go to state 34


state 7

  112 event_decl: TOK_EVENT . TOK_IDENT event_param_l semi_colon

    TOK_IDENT  shift, and go to state 35


state 8

   30 any_event: TOK_ANY .

    $default  reduce using rule 30 (any_event)


state 9

  129 baseType: TOK_VOID .

    $default  reduce using rule 129 (baseType)


state 10

  132 baseType: TOK_STRING .

    $default  reduce using rule 132 (baseType)


state 11

  134 intType: TOK_INT .

    $default  reduce using rule 134 (intType)


state 12

  128 type: TOK_UNSIGNED . baseType
  135 intType: TOK_UNSIGNED . TOK_INT

    TOK_VOID    shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_INT     shift, and go to state 36
    TOK_BOOL    shift, and go to state 13
    TOK_BYTE    shift, and go to state 14
    TOK_DOUBLE  shift, and go to state 15

    baseType  go to state 37


state 13

  130 baseType: TOK_BOOL .

    $default  reduce using rule 130 (baseType)


state 14

  131 baseType: TOK_BYTE .

    $default  reduce using rule 131 (baseType)


state 15

  133 baseType: TOK_DOUBLE .

    $default  reduce using rule 133 (baseType)


state 16

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN
  127 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 38

    $default  reduce using rule 127 (type)


state 17

    2 specification: specification declaration .

    $default  reduce using rule 2 (specification)


state 18

    3 specification: specification rule .

    $default  reduce using rule 3 (specification)


state 19

    9 rule: primitive_all . TOK_ARROW rule_stmts
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39
    TOK_PAT_OR    shift, and go to state 40
    TOK_COLON     shift, and go to state 41
    TOK_ARROW     shift, and go to state 42


state 20

   24 primitive_all: binary_event_oprs .

    $default  reduce using rule 24 (primitive_all)


state 21

   22 primitive_all: any_event .

    $default  reduce using rule 22 (primitive_all)


state 22

   21 primitive_all: normal_event .
   23              | normal_event . TOK_BITOR expression

    TOK_BITOR  shift, and go to state 43

    $default  reduce using rule 21 (primitive_all)


state 23

    8 declaration: global_decl .

    $default  reduce using rule 8 (declaration)


state 24

    7 declaration: class_decl .

    $default  reduce using rule 7 (declaration)


state 25

    6 declaration: function_proto .

    $default  reduce using rule 6 (declaration)


state 26

   94 function_proto: function_decl . semi_colon
   95               | function_decl . function_defn

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 45

    function_defn  go to state 46
    semi_colon     go to state 47


state 27

    5 declaration: event_decl .

    $default  reduce using rule 5 (declaration)


state 28

   88 global_decl: type . global_l semi_colon
  106 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 48

    global_l    go to state 49
    global_var  go to state 50


state 29

  125 type: baseType .

    $default  reduce using rule 125 (type)


state 30

  126 type: intType .

    $default  reduce using rule 126 (type)


state 31

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN

    TOK_LPAREN  shift, and go to state 38


state 32

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR
   29                  | TOK_NOT primitive_all .

    $default  reduce using rule 29 (binary_event_oprs)


state 33

   25 primitive_all: TOK_LPAREN primitive_all . TOK_RPAREN
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39
    TOK_PAT_OR    shift, and go to state 40
    TOK_COLON     shift, and go to state 41
    TOK_RPAREN    shift, and go to state 51


state 34

   93 class_decl: TOK_CLASS TOK_IDENT . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 52


state 35

  112 event_decl: TOK_EVENT TOK_IDENT . event_param_l semi_colon

    TOK_LPAREN    shift, and go to state 53
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    event_param_l  go to state 55
    event_param    go to state 56
    type           go to state 57
    baseType       go to state 29
    intType        go to state 30


state 36

  135 intType: TOK_UNSIGNED TOK_INT .

    $default  reduce using rule 135 (intType)


state 37

  128 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 128 (type)


state 38

   31 normal_event: TOK_IDENT TOK_LPAREN . event_aparam_l TOK_RPAREN

    TOK_IDENT  shift, and go to state 58

    $default  reduce using rule 34 (event_aparam_l)

    event_aparam_l  go to state 59


state 39

   28 binary_event_oprs: primitive_all TOK_PAT_STAR .

    $default  reduce using rule 28 (binary_event_oprs)


state 40

   26 binary_event_oprs: primitive_all TOK_PAT_OR . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 60
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 41

   27 binary_event_oprs: primitive_all TOK_COLON . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 61
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 42

    9 rule: primitive_all TOK_ARROW . rule_stmts

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 65
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    rule_stmts        go to state 74
    compound_stmt2    go to state 75
    compound_stmt1    go to state 76
    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 80
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    semi_colon        go to state 84
    literal           go to state 85


state 43

   23 primitive_all: normal_event TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 86
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 44

  119 semi_colon: TOK_SEMICOLON .

    $default  reduce using rule 119 (semi_colon)


state 45

   96 function_defn: TOK_LBRACE . function_body TOK_RBRACE semi_colon
   97              | TOK_LBRACE . function_body TOK_RBRACE

    $default  reduce using rule 100 (function_body)

    function_body  go to state 87


state 46

   95 function_proto: function_decl function_defn .

    $default  reduce using rule 95 (function_proto)


state 47

   94 function_proto: function_decl semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 94 (function_proto)


state 48

   91 global_var: TOK_IDENT .
   92           | TOK_IDENT . TOK_ASSIGN expression
  106 function_decl: type TOK_IDENT . func_param_l

    TOK_ASSIGN    shift, and go to state 89
    TOK_LPAREN    shift, and go to state 90
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    $default  reduce using rule 91 (global_var)

    func_param_l  go to state 91
    func_param    go to state 92
    type          go to state 93
    baseType      go to state 29
    intType       go to state 30


state 49

   88 global_decl: type global_l . semi_colon
   89 global_l: global_l . TOK_COMMA global_var

    TOK_COMMA      shift, and go to state 94
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 95


state 50

   90 global_l: global_var .

    $default  reduce using rule 90 (global_l)


state 51

   25 primitive_all: TOK_LPAREN primitive_all TOK_RPAREN .

    $default  reduce using rule 25 (primitive_all)


state 52

   93 class_decl: TOK_CLASS TOK_IDENT semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 93 (class_decl)


state 53

  113 event_param_l: TOK_LPAREN . event_param_l TOK_RPAREN
  116              | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 53
    TOK_RPAREN    shift, and go to state 96
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    event_param_l  go to state 97
    event_param    go to state 56
    type           go to state 57
    baseType       go to state 29
    intType        go to state 30


state 54

  127 type: TOK_IDENT .

    $default  reduce using rule 127 (type)


state 55

  112 event_decl: TOK_EVENT TOK_IDENT event_param_l . semi_colon
  114 event_param_l: event_param_l . TOK_COMMA event_param

    TOK_COMMA      shift, and go to state 98
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 99


state 56

  115 event_param_l: event_param .

    $default  reduce using rule 115 (event_param_l)


state 57

  117 event_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 100


state 58

   33 event_aparam_l: TOK_IDENT .

    $default  reduce using rule 33 (event_aparam_l)


state 59

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l . TOK_RPAREN
   32 event_aparam_l: event_aparam_l . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 101
    TOK_RPAREN  shift, and go to state 102


state 60

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all TOK_PAT_OR primitive_all .
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39
    TOK_COLON     shift, and go to state 41

    $default  reduce using rule 26 (binary_event_oprs)


state 61

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all TOK_COLON primitive_all .
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39

    $default  reduce using rule 27 (binary_event_oprs)


state 62

   68 unary_operation: TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 103
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 63

   67 unary_operation: TOK_BITNOT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 104
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 64

   66 unary_operation: TOK_NOT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 105
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 65

   14 compound_stmt2: TOK_LBRACE . compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE . compound_stmt2 semi_colon TOK_RBRACE
   17 compound_stmt1: TOK_LBRACE . stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 65

    $default  reduce using rule 20 (stmt_plus1)

    compound_stmt2  go to state 106
    compound_stmt1  go to state 76
    stmt_plus1      go to state 107
    semi_colon      go to state 108


state 66

   65 expression: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 109
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 67

   55 func_name: TOK_PRINT .

    $default  reduce using rule 55 (func_name)


state 68

  120 literal: TOK_UINTNUM .

    $default  reduce using rule 120 (literal)


state 69

  121 literal: TOK_DOUBLENUM .

    $default  reduce using rule 121 (literal)


state 70

  122 literal: TOK_STRCONST .

    $default  reduce using rule 122 (literal)


state 71

  123 literal: TOK_TRUE .

    $default  reduce using rule 123 (literal)


state 72

  124 literal: TOK_FALSE .

    $default  reduce using rule 124 (literal)


state 73

   54 func_name: TOK_IDENT .
   87 ref_expr: TOK_IDENT .

    TOK_LPAREN  reduce using rule 54 (func_name)
    $default    reduce using rule 87 (ref_expr)


state 74

    9 rule: primitive_all TOK_ARROW rule_stmts .

    $default  reduce using rule 9 (rule)


state 75

   10 rule_stmts: compound_stmt2 . semi_colon
   11           | compound_stmt2 .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 11 (rule_stmts)

    semi_colon  go to state 110


state 76

   16 compound_stmt2: compound_stmt1 .

    $default  reduce using rule 16 (compound_stmt2)


state 77

   61 expression: func_invocation .

    $default  reduce using rule 61 (expression)


state 78

   52 func_invocation: func_name . TOK_LPAREN caller_param_l TOK_RPAREN
   53                | func_name . TOK_LPAREN TOK_RPAREN

    TOK_LPAREN  shift, and go to state 111


state 79

   62 expression: assignment .

    $default  reduce using rule 62 (expression)


state 80

   12 rule_stmts: expression . semi_colon
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 112
    TOK_MINUS      shift, and go to state 113
    TOK_MULT       shift, and go to state 114
    TOK_DIV        shift, and go to state 115
    TOK_MOD        shift, and go to state 116
    TOK_BITAND     shift, and go to state 117
    TOK_BITOR      shift, and go to state 118
    TOK_BITXOR     shift, and go to state 119
    TOK_SHL        shift, and go to state 120
    TOK_SHR        shift, and go to state 121
    TOK_GT         shift, and go to state 122
    TOK_LT         shift, and go to state 123
    TOK_GE         shift, and go to state 124
    TOK_LE         shift, and go to state 125
    TOK_EQ         shift, and go to state 126
    TOK_NE         shift, and go to state 127
    TOK_AND        shift, and go to state 128
    TOK_OR         shift, and go to state 129
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 130


state 81

   63 expression: unary_operation .

    $default  reduce using rule 63 (expression)


state 82

   64 expression: binary_operation .

    $default  reduce using rule 64 (expression)


state 83

   58 assignment: ref_expr . TOK_ASSIGN expression
   60 expression: ref_expr .

    TOK_ASSIGN  shift, and go to state 131

    $default  reduce using rule 60 (expression)


state 84

   13 rule_stmts: semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 13 (rule_stmts)


state 85

   59 expression: literal .

    $default  reduce using rule 59 (expression)


state 86

   23 primitive_all: normal_event TOK_BITOR expression .
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 23 (primitive_all)


state 87

   96 function_defn: TOK_LBRACE function_body . TOK_RBRACE semi_colon
   97              | TOK_LBRACE function_body . TOK_RBRACE
   98 function_body: function_body . local_decl
   99              | function_body . simple_stmt

    TOK_RBRACE    shift, and go to state 132
    TOK_IF        shift, and go to state 133
    TOK_RETURN    shift, and go to state 134
    TOK_PRINT     shift, and go to state 67
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 135

    if_then_else_stmt  go to state 136
    simple_stmt        go to state 137
    func_invocation    go to state 138
    func_name          go to state 78
    assignment         go to state 139
    ref_expr           go to state 140
    local_decl         go to state 141
    type               go to state 142
    baseType           go to state 29
    intType            go to state 30


state 88

  118 semi_colon: semi_colon TOK_SEMICOLON .

    $default  reduce using rule 118 (semi_colon)


state 89

   92 global_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 143
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 90

  107 func_param_l: TOK_LPAREN . func_param_l TOK_RPAREN
  110             | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 90
    TOK_RPAREN    shift, and go to state 144
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    func_param_l  go to state 145
    func_param    go to state 92
    type          go to state 93
    baseType      go to state 29
    intType       go to state 30


state 91

  106 function_decl: type TOK_IDENT func_param_l .
  108 func_param_l: func_param_l . TOK_COMMA func_param

    TOK_COMMA  shift, and go to state 146

    $default  reduce using rule 106 (function_decl)


state 92

  109 func_param_l: func_param .

    $default  reduce using rule 109 (func_param_l)


state 93

  111 func_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 147


state 94

   89 global_l: global_l TOK_COMMA . global_var

    TOK_IDENT  shift, and go to state 148

    global_var  go to state 149


state 95

   88 global_decl: type global_l semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 88 (global_decl)


state 96

  116 event_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 116 (event_param_l)


state 97

  113 event_param_l: TOK_LPAREN event_param_l . TOK_RPAREN
  114              | event_param_l . TOK_COMMA event_param

    TOK_COMMA   shift, and go to state 98
    TOK_RPAREN  shift, and go to state 150


state 98

  114 event_param_l: event_param_l TOK_COMMA . event_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    event_param  go to state 151
    type         go to state 57
    baseType     go to state 29
    intType      go to state 30


state 99

  112 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 112 (event_decl)


state 100

  117 event_param: type TOK_IDENT .

    $default  reduce using rule 117 (event_param)


state 101

   32 event_aparam_l: event_aparam_l TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 152


state 102

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN .

    $default  reduce using rule 31 (normal_event)


state 103

   68 unary_operation: TOK_MINUS expression .
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    $default  reduce using rule 68 (unary_operation)


state 104

   67 unary_operation: TOK_BITNOT expression .
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116
    TOK_SHL    shift, and go to state 120
    TOK_SHR    shift, and go to state 121

    $default  reduce using rule 67 (unary_operation)


state 105

   66 unary_operation: TOK_NOT expression .
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127

    $default  reduce using rule 66 (unary_operation)


state 106

   14 compound_stmt2: TOK_LBRACE compound_stmt2 . TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44
    TOK_RBRACE     shift, and go to state 153

    semi_colon  go to state 154


state 107

   17 compound_stmt1: TOK_LBRACE stmt_plus1 . TOK_RBRACE
   19 stmt_plus1: stmt_plus1 . simple_stmt

    TOK_RBRACE  shift, and go to state 155
    TOK_IF      shift, and go to state 133
    TOK_RETURN  shift, and go to state 134
    TOK_PRINT   shift, and go to state 67
    TOK_IDENT   shift, and go to state 73

    if_then_else_stmt  go to state 136
    simple_stmt        go to state 156
    func_invocation    go to state 138
    func_name          go to state 78
    assignment         go to state 139
    ref_expr           go to state 140


state 108

   18 compound_stmt1: TOK_LBRACE semi_colon . TOK_RBRACE
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88
    TOK_RBRACE     shift, and go to state 157


state 109

   65 expression: TOK_LPAREN expression . TOK_RPAREN
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129
    TOK_RPAREN  shift, and go to state 158


state 110

   10 rule_stmts: compound_stmt2 semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 10 (rule_stmts)


state 111

   52 func_invocation: func_name TOK_LPAREN . caller_param_l TOK_RPAREN
   53                | func_name TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_RPAREN     shift, and go to state 159
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    caller_param_l    go to state 160
    assignment        go to state 79
    expression        go to state 161
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 112

   82 binary_operation: expression TOK_PLUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 162
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 113

   83 binary_operation: expression TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 163
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 114

   84 binary_operation: expression TOK_MULT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 164
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 115

   85 binary_operation: expression TOK_DIV . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 165
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 116

   86 binary_operation: expression TOK_MOD . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 166
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 117

   79 binary_operation: expression TOK_BITAND . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 167
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 118

   77 binary_operation: expression TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 168
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 119

   78 binary_operation: expression TOK_BITXOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 169
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 120

   80 binary_operation: expression TOK_SHL . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 170
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 121

   81 binary_operation: expression TOK_SHR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 171
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 122

   73 binary_operation: expression TOK_GT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 172
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 123

   74 binary_operation: expression TOK_LT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 173
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 124

   75 binary_operation: expression TOK_GE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 174
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 125

   76 binary_operation: expression TOK_LE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 175
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 126

   71 binary_operation: expression TOK_EQ . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 176
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 127

   72 binary_operation: expression TOK_NE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 177
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 128

   70 binary_operation: expression TOK_AND . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 178
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 129

   69 binary_operation: expression TOK_OR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 179
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 130

   12 rule_stmts: expression semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 12 (rule_stmts)


state 131

   58 assignment: ref_expr TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 180
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 132

   96 function_defn: TOK_LBRACE function_body TOK_RBRACE . semi_colon
   97              | TOK_LBRACE function_body TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 97 (function_defn)

    semi_colon  go to state 181


state 133

   35 if_then_else_stmt: TOK_IF . condition basic_block
   36                  | TOK_IF . condition basic_block TOK_ELSE basic_block

    TOK_LPAREN  shift, and go to state 182

    condition  go to state 183


state 134

   47 simple_stmt: TOK_RETURN . expression semi_colon
   48            | TOK_RETURN . semi_colon

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_SEMICOLON  shift, and go to state 44
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 184
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    semi_colon        go to state 185
    literal           go to state 85


state 135

   54 func_name: TOK_IDENT .
   87 ref_expr: TOK_IDENT .
  127 type: TOK_IDENT .

    TOK_ASSIGN  reduce using rule 87 (ref_expr)
    TOK_IDENT   reduce using rule 127 (type)
    $default    reduce using rule 54 (func_name)


state 136

   46 simple_stmt: if_then_else_stmt .

    $default  reduce using rule 46 (simple_stmt)


state 137

   99 function_body: function_body simple_stmt .

    $default  reduce using rule 99 (function_body)


state 138

   44 simple_stmt: func_invocation . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 186


state 139

   45 simple_stmt: assignment . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 187


state 140

   58 assignment: ref_expr . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 131


state 141

   98 function_body: function_body local_decl .

    $default  reduce using rule 98 (function_body)


state 142

  101 local_decl: type . local_l semi_colon

    TOK_IDENT  shift, and go to state 188

    local_l    go to state 189
    local_var  go to state 190


state 143

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression
   92 global_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 92 (global_var)


state 144

  110 func_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 110 (func_param_l)


state 145

  107 func_param_l: TOK_LPAREN func_param_l . TOK_RPAREN
  108             | func_param_l . TOK_COMMA func_param

    TOK_COMMA   shift, and go to state 146
    TOK_RPAREN  shift, and go to state 191


state 146

  108 func_param_l: func_param_l TOK_COMMA . func_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    func_param  go to state 192
    type        go to state 93
    baseType    go to state 29
    intType     go to state 30


state 147

  111 func_param: type TOK_IDENT .

    $default  reduce using rule 111 (func_param)


state 148

   91 global_var: TOK_IDENT .
   92           | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 89

    $default  reduce using rule 91 (global_var)


state 149

   89 global_l: global_l TOK_COMMA global_var .

    $default  reduce using rule 89 (global_l)


state 150

  113 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN .

    $default  reduce using rule 113 (event_param_l)


state 151

  114 event_param_l: event_param_l TOK_COMMA event_param .

    $default  reduce using rule 114 (event_param_l)


state 152

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT .

    $default  reduce using rule 32 (event_aparam_l)


state 153

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE .

    $default  reduce using rule 14 (compound_stmt2)


state 154

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon . TOK_RBRACE
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88
    TOK_RBRACE     shift, and go to state 193


state 155

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE .

    $default  reduce using rule 17 (compound_stmt1)


state 156

   19 stmt_plus1: stmt_plus1 simple_stmt .

    $default  reduce using rule 19 (stmt_plus1)


state 157

   18 compound_stmt1: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 18 (compound_stmt1)


state 158

   65 expression: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 65 (expression)


state 159

   53 func_invocation: func_name TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 53 (func_invocation)


state 160

   52 func_invocation: func_name TOK_LPAREN caller_param_l . TOK_RPAREN
   56 caller_param_l: caller_param_l . TOK_COMMA expression

    TOK_COMMA   shift, and go to state 194
    TOK_RPAREN  shift, and go to state 195


state 161

   57 caller_param_l: expression .
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 57 (caller_param_l)


state 162

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   82                 | expression TOK_PLUS expression .
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 114
    TOK_DIV   shift, and go to state 115
    TOK_MOD   shift, and go to state 116

    $default  reduce using rule 82 (binary_operation)


state 163

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   83                 | expression TOK_MINUS expression .
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 114
    TOK_DIV   shift, and go to state 115
    TOK_MOD   shift, and go to state 116

    $default  reduce using rule 83 (binary_operation)


state 164

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   84                 | expression TOK_MULT expression .
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    $default  reduce using rule 84 (binary_operation)


state 165

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   85                 | expression TOK_DIV expression .
   86                 | expression . TOK_MOD expression

    $default  reduce using rule 85 (binary_operation)


state 166

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression
   86                 | expression TOK_MOD expression .

    $default  reduce using rule 86 (binary_operation)


state 167

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   79                 | expression TOK_BITAND expression .
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116
    TOK_SHL    shift, and go to state 120
    TOK_SHR    shift, and go to state 121

    $default  reduce using rule 79 (binary_operation)


state 168

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   77                 | expression TOK_BITOR expression .
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    $default  reduce using rule 77 (binary_operation)


state 169

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   78                 | expression TOK_BITXOR expression .
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    $default  reduce using rule 78 (binary_operation)


state 170

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   80                 | expression TOK_SHL expression .
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116

    $default  reduce using rule 80 (binary_operation)


state 171

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   81                 | expression TOK_SHR expression .
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116

    $default  reduce using rule 81 (binary_operation)


state 172

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   73                 | expression TOK_GT expression .
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 73 (binary_operation)


state 173

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   74                 | expression TOK_LT expression .
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 74 (binary_operation)


state 174

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   75                 | expression TOK_GE expression .
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 75 (binary_operation)


state 175

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   76                 | expression TOK_LE expression .
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 76 (binary_operation)


state 176

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   71                 | expression TOK_EQ expression .
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 71 (binary_operation)


state 177

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   72                 | expression TOK_NE expression .
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 72 (binary_operation)


state 178

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   70                 | expression TOK_AND expression .
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127

    $default  reduce using rule 70 (binary_operation)


state 179

   69 binary_operation: expression . TOK_OR expression
   69                 | expression TOK_OR expression .
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128

    $default  reduce using rule 69 (binary_operation)


state 180

   58 assignment: ref_expr TOK_ASSIGN expression .
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 58 (assignment)


state 181

   96 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 96 (function_defn)


state 182

   51 condition: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 196
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 183

   35 if_then_else_stmt: TOK_IF condition . basic_block
   36                  | TOK_IF condition . basic_block TOK_ELSE basic_block

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 197
    TOK_IF         shift, and go to state 133
    TOK_RETURN     shift, and go to state 134
    TOK_PRINT      shift, and go to state 67
    TOK_IDENT      shift, and go to state 73

    if_then_else_stmt  go to state 136
    basic_block        go to state 198
    simple_stmt        go to state 199
    empty_block        go to state 200
    func_invocation    go to state 138
    func_name          go to state 78
    assignment         go to state 139
    ref_expr           go to state 140
    semi_colon         go to state 201


state 184

   47 simple_stmt: TOK_RETURN expression . semi_colon
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 112
    TOK_MINUS      shift, and go to state 113
    TOK_MULT       shift, and go to state 114
    TOK_DIV        shift, and go to state 115
    TOK_MOD        shift, and go to state 116
    TOK_BITAND     shift, and go to state 117
    TOK_BITOR      shift, and go to state 118
    TOK_BITXOR     shift, and go to state 119
    TOK_SHL        shift, and go to state 120
    TOK_SHR        shift, and go to state 121
    TOK_GT         shift, and go to state 122
    TOK_LT         shift, and go to state 123
    TOK_GE         shift, and go to state 124
    TOK_LE         shift, and go to state 125
    TOK_EQ         shift, and go to state 126
    TOK_NE         shift, and go to state 127
    TOK_AND        shift, and go to state 128
    TOK_OR         shift, and go to state 129
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 202


state 185

   48 simple_stmt: TOK_RETURN semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 48 (simple_stmt)


state 186

   44 simple_stmt: func_invocation semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 44 (simple_stmt)


state 187

   45 simple_stmt: assignment semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 45 (simple_stmt)


state 188

  104 local_var: TOK_IDENT .
  105          | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 203

    $default  reduce using rule 104 (local_var)


state 189

  101 local_decl: type local_l . semi_colon
  102 local_l: local_l . TOK_COMMA local_var

    TOK_COMMA      shift, and go to state 204
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 205


state 190

  103 local_l: local_var .

    $default  reduce using rule 103 (local_l)


state 191

  107 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN .

    $default  reduce using rule 107 (func_param_l)


state 192

  108 func_param_l: func_param_l TOK_COMMA func_param .

    $default  reduce using rule 108 (func_param_l)


state 193

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE .

    $default  reduce using rule 15 (compound_stmt2)


state 194

   56 caller_param_l: caller_param_l TOK_COMMA . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 206
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 195

   52 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 52 (func_invocation)


state 196

   51 condition: TOK_LPAREN expression . TOK_RPAREN
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129
    TOK_RPAREN  shift, and go to state 207


state 197

   37 basic_block: TOK_LBRACE . stmt_plus2 TOK_RBRACE semi_colon
   38            | TOK_LBRACE . stmt_plus2 TOK_RBRACE
   49 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE semi_colon
   50            | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 43 (stmt_plus2)

    stmt_plus2  go to state 208
    semi_colon  go to state 209


state 198

   35 if_then_else_stmt: TOK_IF condition basic_block .
   36                  | TOK_IF condition basic_block . TOK_ELSE basic_block

    TOK_ELSE  shift, and go to state 210

    TOK_ELSE  [reduce using rule 35 (if_then_else_stmt)]
    $default  reduce using rule 35 (if_then_else_stmt)


state 199

   40 basic_block: simple_stmt .

    $default  reduce using rule 40 (basic_block)


state 200

   39 basic_block: empty_block .

    $default  reduce using rule 39 (basic_block)


state 201

   41 basic_block: semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 41 (basic_block)


state 202

   47 simple_stmt: TOK_RETURN expression semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 47 (simple_stmt)


state 203

  105 local_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 211
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


state 204

  102 local_l: local_l TOK_COMMA . local_var

    TOK_IDENT  shift, and go to state 188

    local_var  go to state 212


state 205

  101 local_decl: type local_l semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 101 (local_decl)


state 206

   56 caller_param_l: caller_param_l TOK_COMMA expression .
   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 56 (caller_param_l)


state 207

   51 condition: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 51 (condition)


state 208

   37 basic_block: TOK_LBRACE stmt_plus2 . TOK_RBRACE semi_colon
   38            | TOK_LBRACE stmt_plus2 . TOK_RBRACE
   42 stmt_plus2: stmt_plus2 . simple_stmt

    TOK_RBRACE  shift, and go to state 213
    TOK_IF      shift, and go to state 133
    TOK_RETURN  shift, and go to state 134
    TOK_PRINT   shift, and go to state 67
    TOK_IDENT   shift, and go to state 73

    if_then_else_stmt  go to state 136
    simple_stmt        go to state 214
    func_invocation    go to state 138
    func_name          go to state 78
    assignment         go to state 139
    ref_expr           go to state 140


state 209

   49 empty_block: TOK_LBRACE semi_colon . TOK_RBRACE semi_colon
   50            | TOK_LBRACE semi_colon . TOK_RBRACE
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88
    TOK_RBRACE     shift, and go to state 215


state 210

   36 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE . basic_block

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 197
    TOK_IF         shift, and go to state 133
    TOK_RETURN     shift, and go to state 134
    TOK_PRINT      shift, and go to state 67
    TOK_IDENT      shift, and go to state 73

    if_then_else_stmt  go to state 136
    basic_block        go to state 216
    simple_stmt        go to state 199
    empty_block        go to state 200
    func_invocation    go to state 138
    func_name          go to state 78
    assignment         go to state 139
    ref_expr           go to state 140
    semi_colon         go to state 201


state 211

   69 binary_operation: expression . TOK_OR expression
   70                 | expression . TOK_AND expression
   71                 | expression . TOK_EQ expression
   72                 | expression . TOK_NE expression
   73                 | expression . TOK_GT expression
   74                 | expression . TOK_LT expression
   75                 | expression . TOK_GE expression
   76                 | expression . TOK_LE expression
   77                 | expression . TOK_BITOR expression
   78                 | expression . TOK_BITXOR expression
   79                 | expression . TOK_BITAND expression
   80                 | expression . TOK_SHL expression
   81                 | expression . TOK_SHR expression
   82                 | expression . TOK_PLUS expression
   83                 | expression . TOK_MINUS expression
   84                 | expression . TOK_MULT expression
   85                 | expression . TOK_DIV expression
   86                 | expression . TOK_MOD expression
  105 local_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 105 (local_var)


state 212

  102 local_l: local_l TOK_COMMA local_var .

    $default  reduce using rule 102 (local_l)


state 213

   37 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE . semi_colon
   38            | TOK_LBRACE stmt_plus2 TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 38 (basic_block)

    semi_colon  go to state 217


state 214

   42 stmt_plus2: stmt_plus2 simple_stmt .

    $default  reduce using rule 42 (stmt_plus2)


state 215

   49 empty_block: TOK_LBRACE semi_colon TOK_RBRACE . semi_colon
   50            | TOK_LBRACE semi_colon TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 50 (empty_block)

    semi_colon  go to state 218


state 216

   36 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE basic_block .

    $default  reduce using rule 36 (if_then_else_stmt)


state 217

   37 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 37 (basic_block)


state 218

   49 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon .
  118 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 49 (empty_block)
