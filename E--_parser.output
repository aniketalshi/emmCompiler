Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_QMARK
   TOK_LBRACK
   TOK_RBRACK
   TOK_DOUBLE_COLON


State 238 conflicts: 1 shift/reduce


Grammar

    0 $accept: s_specification $end

    1 s_specification: specification

    2 specification: specification declaration
    3              | specification rule
    4              | /* empty */

    5 declaration: event_decl
    6            | function_proto
    7            | class_proto
    8            | global_decl

    9 rule: primitive_all TOK_ARROW rule_stmts

   10 rule_stmts: compound_stmt2 semi_colon
   11           | compound_stmt2
   12           | expression semi_colon
   13           | semi_colon

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE
   16               | compound_stmt1

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE semi_colon TOK_RBRACE

   19 stmt_plus1: stmt_plus1 simple_stmt
   20           | /* empty */

   21 primitive_all: normal_event
   22              | any_event
   23              | normal_event TOK_BITOR expression
   24              | binary_event_oprs
   25              | TOK_LPAREN primitive_all TOK_RPAREN

   26 binary_event_oprs: primitive_all TOK_PAT_OR primitive_all
   27                  | primitive_all TOK_COLON primitive_all
   28                  | primitive_all TOK_PAT_STAR
   29                  | TOK_NOT primitive_all

   30 any_event: TOK_ANY

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT
   33               | TOK_IDENT
   34               | /* empty */

   35 while_stmt: TOK_WHILE condition basic_block

   36 if_then_else_stmt: TOK_IF condition basic_block
   37                  | TOK_IF condition basic_block TOK_ELSE basic_block

   38 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon
   39            | TOK_LBRACE stmt_plus2 TOK_RBRACE
   40            | empty_block
   41            | simple_stmt
   42            | semi_colon

   43 stmt_plus2: stmt_plus2 simple_stmt
   44           | simple_stmt

   45 simple_stmt: func_invocation semi_colon
   46            | assignment semi_colon
   47            | if_then_else_stmt
   48            | return_stmt
   49            | while_stmt
   50            | break_stmt
   51            | continue_stmt
   52            | obj_func

   53 return_stmt: TOK_RETURN expression semi_colon
   54            | TOK_RETURN semi_colon

   55 break_stmt: TOK_BREAK semi_colon
   56           | TOK_BREAK TOK_UINTNUM semi_colon

   57 continue_stmt: TOK_CONTINUE semi_colon
   58              | TOK_CONTINUE TOK_UINTNUM semi_colon

   59 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon
   60            | TOK_LBRACE semi_colon TOK_RBRACE

   61 condition: TOK_LPAREN expression TOK_RPAREN

   62 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN
   63                | func_name TOK_LPAREN TOK_RPAREN
   64                | TOK_PRINT TOK_LPAREN caller_param_l TOK_RPAREN
   65                | TOK_PRINT TOK_LPAREN TOK_RPAREN

   66 func_name: TOK_IDENT

   67 caller_param_l: caller_param_l TOK_COMMA expression
   68               | expression

   69 assignment: ref_expr TOK_ASSIGN expression

   70 expression: literal
   71           | ref_expr
   72           | func_invocation
   73           | assignment
   74           | unary_operation
   75           | binary_operation
   76           | TOK_LPAREN expression TOK_RPAREN

   77 unary_operation: TOK_NOT expression
   78                | TOK_BITNOT expression
   79                | TOK_MINUS expression

   80 binary_operation: expression TOK_OR expression
   81                 | expression TOK_AND expression
   82                 | expression TOK_EQ expression
   83                 | expression TOK_NE expression
   84                 | expression TOK_GT expression
   85                 | expression TOK_LT expression
   86                 | expression TOK_GE expression
   87                 | expression TOK_LE expression
   88                 | expression TOK_BITOR expression
   89                 | expression TOK_BITXOR expression
   90                 | expression TOK_BITAND expression
   91                 | expression TOK_SHL expression
   92                 | expression TOK_SHR expression
   93                 | expression TOK_PLUS expression
   94                 | expression TOK_MINUS expression
   95                 | expression TOK_MULT expression
   96                 | expression TOK_DIV expression
   97                 | expression TOK_MOD expression

   98 ref_expr: TOK_IDENT
   99         | obj_var

  100 global_decl: type global_l semi_colon

  101 global_l: global_l TOK_COMMA global_var
  102         | global_var

  103 global_var: TOK_IDENT
  104           | TOK_IDENT TOK_ASSIGN expression

  105 class_proto: class_decl semi_colon
  106            | class_decl class_defn semi_colon

  107 class_decl: TOK_CLASS TOK_IDENT

  108 class_defn: TOK_LBRACE class_body TOK_RBRACE

  109 class_body: class_body class_var_decl
  110           | class_body function_proto
  111           | /* empty */

  112 class_var_decl: type class_var_l semi_colon

  113 class_var_l: class_var_l TOK_COMMA class_var
  114            | class_var

  115 class_var: TOK_IDENT

  116 obj_var: TOK_IDENT TOK_DOT TOK_IDENT

  117 obj_func: TOK_IDENT TOK_DOT class_func_invocation semi_colon

  118 class_func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN
  119                      | func_name TOK_LPAREN TOK_RPAREN

  120 function_proto: function_decl semi_colon
  121               | function_decl function_defn

  122 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon
  123              | TOK_LBRACE function_body TOK_RBRACE

  124 function_body: function_body local_decl
  125              | function_body simple_stmt
  126              | /* empty */

  127 local_decl: type local_l semi_colon

  128 local_l: local_l TOK_COMMA local_var
  129        | local_var

  130 local_var: TOK_IDENT
  131          | TOK_IDENT TOK_ASSIGN expression

  132 function_decl: type TOK_IDENT func_param_l

  133 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN
  134             | func_param_l TOK_COMMA func_param
  135             | func_param
  136             | TOK_LPAREN TOK_RPAREN

  137 func_param: type TOK_IDENT

  138 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon

  139 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN
  140              | event_param_l TOK_COMMA event_param
  141              | event_param
  142              | TOK_LPAREN TOK_RPAREN

  143 event_param: type TOK_IDENT

  144 semi_colon: semi_colon TOK_SEMICOLON
  145           | TOK_SEMICOLON

  146 literal: TOK_UINTNUM
  147        | TOK_DOUBLENUM
  148        | TOK_STRCONST
  149        | TOK_TRUE
  150        | TOK_FALSE

  151 type: baseType
  152     | intType
  153     | TOK_IDENT
  154     | TOK_UNSIGNED baseType

  155 baseType: TOK_VOID
  156         | TOK_BOOL
  157         | TOK_BYTE
  158         | TOK_STRING
  159         | TOK_DOUBLE
  160         | TOK_SHORT
  161         | TOK_LONG
  162         | TOK_BIT
  163         | TOK_ENUM

  164 intType: TOK_INT
  165        | TOK_UNSIGNED TOK_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 28
TOK_PAT_OR (260) 26
TOK_PAT_NOT (261)
TOK_PLUS (262) 93
TOK_MINUS (263) 79 94
TOK_UMINUS (264)
TOK_MULT (265) 95
TOK_DIV (266) 96
TOK_MOD (267) 97
TOK_BITAND (268) 90
TOK_BITOR (269) 23 88
TOK_BITNOT (270) 78
TOK_BITXOR (271) 89
TOK_SHL (272) 91
TOK_SHR (273) 92
TOK_GT (274) 84
TOK_LT (275) 85
TOK_GE (276) 86
TOK_LE (277) 87
TOK_EQ (278) 82
TOK_NE (279) 83
TOK_AND (280) 81
TOK_OR (281) 80
TOK_NOT (282) 29 77
TOK_COMMA (283) 32 67 101 113 128 134 140
TOK_ASSIGN (284) 69 104 131
TOK_SEMICOLON (285) 144 145
TOK_COLON (286) 27
TOK_ARROW (287) 9
TOK_QMARK (288)
TOK_LBRACE (289) 14 15 17 18 38 39 59 60 108 122 123
TOK_RBRACE (290) 14 15 17 18 38 39 59 60 108 122 123
TOK_LPAREN (291) 25 31 61 62 63 64 65 76 118 119 133 136 139 142
TOK_RPAREN (292) 25 31 61 62 63 64 65 76 118 119 133 136 139 142
TOK_LBRACK (293)
TOK_RBRACK (294)
TOK_IF (295) 36 37
TOK_ELSE (296) 37
TOK_CLASS (297) 107
TOK_RETURN (298) 53 54
TOK_EVENT (299) 138
TOK_ANY (300) 30
TOK_PRINT (301) 64 65
TOK_WHILE (302) 35
TOK_BREAK (303) 55 56
TOK_CONTINUE (304) 57 58
TOK_UINTNUM (305) 56 58 146
TOK_DOUBLENUM (306) 147
TOK_VOID (307) 155
TOK_STRING (308) 158
TOK_STRCONST (309) 148
TOK_INT (310) 164 165
TOK_UNSIGNED (311) 154 165
TOK_BOOL (312) 156
TOK_BYTE (313) 157
TOK_DOUBLE (314) 159
TOK_SHORT (315) 160
TOK_LONG (316) 161
TOK_BIT (317) 162
TOK_ENUM (318) 163
TOK_TRUE (319) 149
TOK_FALSE (320) 150
TOK_IDENT (321) 31 32 33 66 98 103 104 107 115 116 117 130 131 132
    137 138 143 153
TOK_DOUBLE_COLON (322)
TOK_DOT (323) 116 117


Nonterminals, with rules where they appear

$accept (69)
    on left: 0
s_specification (70)
    on left: 1, on right: 0
specification (71)
    on left: 2 3 4, on right: 1 2 3
declaration (72)
    on left: 5 6 7 8, on right: 2
rule (73)
    on left: 9, on right: 3
rule_stmts (74)
    on left: 10 11 12 13, on right: 9
compound_stmt2 (75)
    on left: 14 15 16, on right: 10 11 14 15
compound_stmt1 (76)
    on left: 17 18, on right: 16
stmt_plus1 (77)
    on left: 19 20, on right: 17 19
primitive_all (78)
    on left: 21 22 23 24 25, on right: 9 25 26 27 28 29
binary_event_oprs (79)
    on left: 26 27 28 29, on right: 24
any_event (80)
    on left: 30, on right: 22
normal_event (81)
    on left: 31, on right: 21 23
event_aparam_l (82)
    on left: 32 33 34, on right: 31 32
while_stmt (83)
    on left: 35, on right: 49
if_then_else_stmt (84)
    on left: 36 37, on right: 47
basic_block (85)
    on left: 38 39 40 41 42, on right: 35 36 37
stmt_plus2 (86)
    on left: 43 44, on right: 38 39 43
simple_stmt (87)
    on left: 45 46 47 48 49 50 51 52, on right: 19 41 43 44 125
return_stmt (88)
    on left: 53 54, on right: 48
break_stmt (89)
    on left: 55 56, on right: 50
continue_stmt (90)
    on left: 57 58, on right: 51
empty_block (91)
    on left: 59 60, on right: 40
condition (92)
    on left: 61, on right: 35 36 37
func_invocation (93)
    on left: 62 63 64 65, on right: 45 72
func_name (94)
    on left: 66, on right: 62 63 118 119
caller_param_l (95)
    on left: 67 68, on right: 62 64 67 118
assignment (96)
    on left: 69, on right: 46 73
expression (97)
    on left: 70 71 72 73 74 75 76, on right: 12 23 53 61 67 68 69 76
    77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97
    104 131
unary_operation (98)
    on left: 77 78 79, on right: 74
binary_operation (99)
    on left: 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97,
    on right: 75
ref_expr (100)
    on left: 98 99, on right: 69 71
global_decl (101)
    on left: 100, on right: 8
global_l (102)
    on left: 101 102, on right: 100 101
global_var (103)
    on left: 103 104, on right: 101 102
class_proto (104)
    on left: 105 106, on right: 7
class_decl (105)
    on left: 107, on right: 105 106
class_defn (106)
    on left: 108, on right: 106
class_body (107)
    on left: 109 110 111, on right: 108 109 110
class_var_decl (108)
    on left: 112, on right: 109
class_var_l (109)
    on left: 113 114, on right: 112 113
class_var (110)
    on left: 115, on right: 113 114
obj_var (111)
    on left: 116, on right: 99
obj_func (112)
    on left: 117, on right: 52
class_func_invocation (113)
    on left: 118 119, on right: 117
function_proto (114)
    on left: 120 121, on right: 6 110
function_defn (115)
    on left: 122 123, on right: 121
function_body (116)
    on left: 124 125 126, on right: 122 123 124 125
local_decl (117)
    on left: 127, on right: 124
local_l (118)
    on left: 128 129, on right: 127 128
local_var (119)
    on left: 130 131, on right: 128 129
function_decl (120)
    on left: 132, on right: 120 121
func_param_l (121)
    on left: 133 134 135 136, on right: 132 133 134
func_param (122)
    on left: 137, on right: 134 135
event_decl (123)
    on left: 138, on right: 5
event_param_l (124)
    on left: 139 140 141 142, on right: 138 139 140
event_param (125)
    on left: 143, on right: 140 141
semi_colon (126)
    on left: 144 145, on right: 10 12 13 15 18 38 42 45 46 53 54 55
    56 57 58 59 60 100 105 106 112 117 120 122 127 138 144
literal (127)
    on left: 146 147 148 149 150, on right: 70
type (128)
    on left: 151 152 153 154, on right: 100 112 127 132 137 143
baseType (129)
    on left: 155 156 157 158 159 160 161 162 163, on right: 151 154
intType (130)
    on left: 164 165, on right: 152


state 0

    0 $accept: . s_specification $end

    $default  reduce using rule 4 (specification)

    s_specification  go to state 1
    specification    go to state 2


state 1

    0 $accept: s_specification . $end

    $end  shift, and go to state 3


state 2

    1 s_specification: specification .
    2 specification: specification . declaration
    3              | specification . rule

    TOK_NOT       shift, and go to state 4
    TOK_LPAREN    shift, and go to state 5
    TOK_CLASS     shift, and go to state 6
    TOK_EVENT     shift, and go to state 7
    TOK_ANY       shift, and go to state 8
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 20

    $default  reduce using rule 1 (s_specification)

    declaration        go to state 21
    rule               go to state 22
    primitive_all      go to state 23
    binary_event_oprs  go to state 24
    any_event          go to state 25
    normal_event       go to state 26
    global_decl        go to state 27
    class_proto        go to state 28
    class_decl         go to state 29
    function_proto     go to state 30
    function_decl      go to state 31
    event_decl         go to state 32
    type               go to state 33
    baseType           go to state 34
    intType            go to state 35


state 3

    0 $accept: s_specification $end .

    $default  accept


state 4

   29 binary_event_oprs: TOK_NOT . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 36

    primitive_all      go to state 37
    binary_event_oprs  go to state 24
    any_event          go to state 25
    normal_event       go to state 26


state 5

   25 primitive_all: TOK_LPAREN . primitive_all TOK_RPAREN

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 36

    primitive_all      go to state 38
    binary_event_oprs  go to state 24
    any_event          go to state 25
    normal_event       go to state 26


state 6

  107 class_decl: TOK_CLASS . TOK_IDENT

    TOK_IDENT  shift, and go to state 39


state 7

  138 event_decl: TOK_EVENT . TOK_IDENT event_param_l semi_colon

    TOK_IDENT  shift, and go to state 40


state 8

   30 any_event: TOK_ANY .

    $default  reduce using rule 30 (any_event)


state 9

  155 baseType: TOK_VOID .

    $default  reduce using rule 155 (baseType)


state 10

  158 baseType: TOK_STRING .

    $default  reduce using rule 158 (baseType)


state 11

  164 intType: TOK_INT .

    $default  reduce using rule 164 (intType)


state 12

  154 type: TOK_UNSIGNED . baseType
  165 intType: TOK_UNSIGNED . TOK_INT

    TOK_VOID    shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_INT     shift, and go to state 41
    TOK_BOOL    shift, and go to state 13
    TOK_BYTE    shift, and go to state 14
    TOK_DOUBLE  shift, and go to state 15
    TOK_SHORT   shift, and go to state 16
    TOK_LONG    shift, and go to state 17
    TOK_BIT     shift, and go to state 18
    TOK_ENUM    shift, and go to state 19

    baseType  go to state 42


state 13

  156 baseType: TOK_BOOL .

    $default  reduce using rule 156 (baseType)


state 14

  157 baseType: TOK_BYTE .

    $default  reduce using rule 157 (baseType)


state 15

  159 baseType: TOK_DOUBLE .

    $default  reduce using rule 159 (baseType)


state 16

  160 baseType: TOK_SHORT .

    $default  reduce using rule 160 (baseType)


state 17

  161 baseType: TOK_LONG .

    $default  reduce using rule 161 (baseType)


state 18

  162 baseType: TOK_BIT .

    $default  reduce using rule 162 (baseType)


state 19

  163 baseType: TOK_ENUM .

    $default  reduce using rule 163 (baseType)


state 20

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN
  153 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 43

    $default  reduce using rule 153 (type)


state 21

    2 specification: specification declaration .

    $default  reduce using rule 2 (specification)


state 22

    3 specification: specification rule .

    $default  reduce using rule 3 (specification)


state 23

    9 rule: primitive_all . TOK_ARROW rule_stmts
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 44
    TOK_PAT_OR    shift, and go to state 45
    TOK_COLON     shift, and go to state 46
    TOK_ARROW     shift, and go to state 47


state 24

   24 primitive_all: binary_event_oprs .

    $default  reduce using rule 24 (primitive_all)


state 25

   22 primitive_all: any_event .

    $default  reduce using rule 22 (primitive_all)


state 26

   21 primitive_all: normal_event .
   23              | normal_event . TOK_BITOR expression

    TOK_BITOR  shift, and go to state 48

    $default  reduce using rule 21 (primitive_all)


state 27

    8 declaration: global_decl .

    $default  reduce using rule 8 (declaration)


state 28

    7 declaration: class_proto .

    $default  reduce using rule 7 (declaration)


state 29

  105 class_proto: class_decl . semi_colon
  106            | class_decl . class_defn semi_colon

    TOK_SEMICOLON  shift, and go to state 49
    TOK_LBRACE     shift, and go to state 50

    class_defn  go to state 51
    semi_colon  go to state 52


state 30

    6 declaration: function_proto .

    $default  reduce using rule 6 (declaration)


state 31

  120 function_proto: function_decl . semi_colon
  121               | function_decl . function_defn

    TOK_SEMICOLON  shift, and go to state 49
    TOK_LBRACE     shift, and go to state 53

    function_defn  go to state 54
    semi_colon     go to state 55


state 32

    5 declaration: event_decl .

    $default  reduce using rule 5 (declaration)


state 33

  100 global_decl: type . global_l semi_colon
  132 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 56

    global_l    go to state 57
    global_var  go to state 58


state 34

  151 type: baseType .

    $default  reduce using rule 151 (type)


state 35

  152 type: intType .

    $default  reduce using rule 152 (type)


state 36

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN

    TOK_LPAREN  shift, and go to state 43


state 37

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR
   29                  | TOK_NOT primitive_all .

    $default  reduce using rule 29 (binary_event_oprs)


state 38

   25 primitive_all: TOK_LPAREN primitive_all . TOK_RPAREN
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 44
    TOK_PAT_OR    shift, and go to state 45
    TOK_COLON     shift, and go to state 46
    TOK_RPAREN    shift, and go to state 59


state 39

  107 class_decl: TOK_CLASS TOK_IDENT .

    $default  reduce using rule 107 (class_decl)


state 40

  138 event_decl: TOK_EVENT TOK_IDENT . event_param_l semi_colon

    TOK_LPAREN    shift, and go to state 60
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 61

    event_param_l  go to state 62
    event_param    go to state 63
    type           go to state 64
    baseType       go to state 34
    intType        go to state 35


state 41

  165 intType: TOK_UNSIGNED TOK_INT .

    $default  reduce using rule 165 (intType)


state 42

  154 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 154 (type)


state 43

   31 normal_event: TOK_IDENT TOK_LPAREN . event_aparam_l TOK_RPAREN

    TOK_IDENT  shift, and go to state 65

    $default  reduce using rule 34 (event_aparam_l)

    event_aparam_l  go to state 66


state 44

   28 binary_event_oprs: primitive_all TOK_PAT_STAR .

    $default  reduce using rule 28 (binary_event_oprs)


state 45

   26 binary_event_oprs: primitive_all TOK_PAT_OR . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 36

    primitive_all      go to state 67
    binary_event_oprs  go to state 24
    any_event          go to state 25
    normal_event       go to state 26


state 46

   27 binary_event_oprs: primitive_all TOK_COLON . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 36

    primitive_all      go to state 68
    binary_event_oprs  go to state 24
    any_event          go to state 25
    normal_event       go to state 26


state 47

    9 rule: primitive_all TOK_ARROW . rule_stmts

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_SEMICOLON  shift, and go to state 49
    TOK_LBRACE     shift, and go to state 72
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    rule_stmts        go to state 81
    compound_stmt2    go to state 82
    compound_stmt1    go to state 83
    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 87
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    semi_colon        go to state 92
    literal           go to state 93


state 48

   23 primitive_all: normal_event TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 94
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 49

  145 semi_colon: TOK_SEMICOLON .

    $default  reduce using rule 145 (semi_colon)


state 50

  108 class_defn: TOK_LBRACE . class_body TOK_RBRACE

    $default  reduce using rule 111 (class_body)

    class_body  go to state 95


state 51

  106 class_proto: class_decl class_defn . semi_colon

    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 96


state 52

  105 class_proto: class_decl semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 105 (class_proto)


state 53

  122 function_defn: TOK_LBRACE . function_body TOK_RBRACE semi_colon
  123              | TOK_LBRACE . function_body TOK_RBRACE

    $default  reduce using rule 126 (function_body)

    function_body  go to state 98


state 54

  121 function_proto: function_decl function_defn .

    $default  reduce using rule 121 (function_proto)


state 55

  120 function_proto: function_decl semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 120 (function_proto)


state 56

  103 global_var: TOK_IDENT .
  104           | TOK_IDENT . TOK_ASSIGN expression
  132 function_decl: type TOK_IDENT . func_param_l

    TOK_ASSIGN    shift, and go to state 99
    TOK_LPAREN    shift, and go to state 100
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 61

    $default  reduce using rule 103 (global_var)

    func_param_l  go to state 101
    func_param    go to state 102
    type          go to state 103
    baseType      go to state 34
    intType       go to state 35


state 57

  100 global_decl: type global_l . semi_colon
  101 global_l: global_l . TOK_COMMA global_var

    TOK_COMMA      shift, and go to state 104
    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 105


state 58

  102 global_l: global_var .

    $default  reduce using rule 102 (global_l)


state 59

   25 primitive_all: TOK_LPAREN primitive_all TOK_RPAREN .

    $default  reduce using rule 25 (primitive_all)


state 60

  139 event_param_l: TOK_LPAREN . event_param_l TOK_RPAREN
  142              | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 60
    TOK_RPAREN    shift, and go to state 106
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 61

    event_param_l  go to state 107
    event_param    go to state 63
    type           go to state 64
    baseType       go to state 34
    intType        go to state 35


state 61

  153 type: TOK_IDENT .

    $default  reduce using rule 153 (type)


state 62

  138 event_decl: TOK_EVENT TOK_IDENT event_param_l . semi_colon
  140 event_param_l: event_param_l . TOK_COMMA event_param

    TOK_COMMA      shift, and go to state 108
    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 109


state 63

  141 event_param_l: event_param .

    $default  reduce using rule 141 (event_param_l)


state 64

  143 event_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 110


state 65

   33 event_aparam_l: TOK_IDENT .

    $default  reduce using rule 33 (event_aparam_l)


state 66

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l . TOK_RPAREN
   32 event_aparam_l: event_aparam_l . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 111
    TOK_RPAREN  shift, and go to state 112


state 67

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all TOK_PAT_OR primitive_all .
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 44
    TOK_COLON     shift, and go to state 46

    $default  reduce using rule 26 (binary_event_oprs)


state 68

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all TOK_COLON primitive_all .
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 44

    $default  reduce using rule 27 (binary_event_oprs)


state 69

   79 unary_operation: TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 113
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 70

   78 unary_operation: TOK_BITNOT . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 114
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 71

   77 unary_operation: TOK_NOT . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 115
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 72

   14 compound_stmt2: TOK_LBRACE . compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE . compound_stmt2 semi_colon TOK_RBRACE
   17 compound_stmt1: TOK_LBRACE . stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 49
    TOK_LBRACE     shift, and go to state 72

    $default  reduce using rule 20 (stmt_plus1)

    compound_stmt2  go to state 116
    compound_stmt1  go to state 83
    stmt_plus1      go to state 117
    semi_colon      go to state 118


state 73

   76 expression: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 119
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 74

   64 func_invocation: TOK_PRINT . TOK_LPAREN caller_param_l TOK_RPAREN
   65                | TOK_PRINT . TOK_LPAREN TOK_RPAREN

    TOK_LPAREN  shift, and go to state 120


state 75

  146 literal: TOK_UINTNUM .

    $default  reduce using rule 146 (literal)


state 76

  147 literal: TOK_DOUBLENUM .

    $default  reduce using rule 147 (literal)


state 77

  148 literal: TOK_STRCONST .

    $default  reduce using rule 148 (literal)


state 78

  149 literal: TOK_TRUE .

    $default  reduce using rule 149 (literal)


state 79

  150 literal: TOK_FALSE .

    $default  reduce using rule 150 (literal)


state 80

   66 func_name: TOK_IDENT .
   98 ref_expr: TOK_IDENT .
  116 obj_var: TOK_IDENT . TOK_DOT TOK_IDENT

    TOK_DOT  shift, and go to state 121

    TOK_LPAREN  reduce using rule 66 (func_name)
    $default    reduce using rule 98 (ref_expr)


state 81

    9 rule: primitive_all TOK_ARROW rule_stmts .

    $default  reduce using rule 9 (rule)


state 82

   10 rule_stmts: compound_stmt2 . semi_colon
   11           | compound_stmt2 .

    TOK_SEMICOLON  shift, and go to state 49

    $default  reduce using rule 11 (rule_stmts)

    semi_colon  go to state 122


state 83

   16 compound_stmt2: compound_stmt1 .

    $default  reduce using rule 16 (compound_stmt2)


state 84

   72 expression: func_invocation .

    $default  reduce using rule 72 (expression)


state 85

   62 func_invocation: func_name . TOK_LPAREN caller_param_l TOK_RPAREN
   63                | func_name . TOK_LPAREN TOK_RPAREN

    TOK_LPAREN  shift, and go to state 123


state 86

   73 expression: assignment .

    $default  reduce using rule 73 (expression)


state 87

   12 rule_stmts: expression . semi_colon
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 124
    TOK_MINUS      shift, and go to state 125
    TOK_MULT       shift, and go to state 126
    TOK_DIV        shift, and go to state 127
    TOK_MOD        shift, and go to state 128
    TOK_BITAND     shift, and go to state 129
    TOK_BITOR      shift, and go to state 130
    TOK_BITXOR     shift, and go to state 131
    TOK_SHL        shift, and go to state 132
    TOK_SHR        shift, and go to state 133
    TOK_GT         shift, and go to state 134
    TOK_LT         shift, and go to state 135
    TOK_GE         shift, and go to state 136
    TOK_LE         shift, and go to state 137
    TOK_EQ         shift, and go to state 138
    TOK_NE         shift, and go to state 139
    TOK_AND        shift, and go to state 140
    TOK_OR         shift, and go to state 141
    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 142


state 88

   74 expression: unary_operation .

    $default  reduce using rule 74 (expression)


state 89

   75 expression: binary_operation .

    $default  reduce using rule 75 (expression)


state 90

   69 assignment: ref_expr . TOK_ASSIGN expression
   71 expression: ref_expr .

    TOK_ASSIGN  shift, and go to state 143

    $default  reduce using rule 71 (expression)


state 91

   99 ref_expr: obj_var .

    $default  reduce using rule 99 (ref_expr)


state 92

   13 rule_stmts: semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 13 (rule_stmts)


state 93

   70 expression: literal .

    $default  reduce using rule 70 (expression)


state 94

   23 primitive_all: normal_event TOK_BITOR expression .
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139
    TOK_AND     shift, and go to state 140
    TOK_OR      shift, and go to state 141

    $default  reduce using rule 23 (primitive_all)


state 95

  108 class_defn: TOK_LBRACE class_body . TOK_RBRACE
  109 class_body: class_body . class_var_decl
  110           | class_body . function_proto

    TOK_RBRACE    shift, and go to state 144
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 61

    class_var_decl  go to state 145
    function_proto  go to state 146
    function_decl   go to state 31
    type            go to state 147
    baseType        go to state 34
    intType         go to state 35


state 96

  106 class_proto: class_decl class_defn semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 106 (class_proto)


state 97

  144 semi_colon: semi_colon TOK_SEMICOLON .

    $default  reduce using rule 144 (semi_colon)


state 98

  122 function_defn: TOK_LBRACE function_body . TOK_RBRACE semi_colon
  123              | TOK_LBRACE function_body . TOK_RBRACE
  124 function_body: function_body . local_decl
  125              | function_body . simple_stmt

    TOK_RBRACE    shift, and go to state 148
    TOK_IF        shift, and go to state 149
    TOK_RETURN    shift, and go to state 150
    TOK_PRINT     shift, and go to state 74
    TOK_WHILE     shift, and go to state 151
    TOK_BREAK     shift, and go to state 152
    TOK_CONTINUE  shift, and go to state 153
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 154

    while_stmt         go to state 155
    if_then_else_stmt  go to state 156
    simple_stmt        go to state 157
    return_stmt        go to state 158
    break_stmt         go to state 159
    continue_stmt      go to state 160
    func_invocation    go to state 161
    func_name          go to state 85
    assignment         go to state 162
    ref_expr           go to state 163
    obj_var            go to state 91
    obj_func           go to state 164
    local_decl         go to state 165
    type               go to state 166
    baseType           go to state 34
    intType            go to state 35


state 99

  104 global_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 167
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 100

  133 func_param_l: TOK_LPAREN . func_param_l TOK_RPAREN
  136             | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 100
    TOK_RPAREN    shift, and go to state 168
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 61

    func_param_l  go to state 169
    func_param    go to state 102
    type          go to state 103
    baseType      go to state 34
    intType       go to state 35


state 101

  132 function_decl: type TOK_IDENT func_param_l .
  134 func_param_l: func_param_l . TOK_COMMA func_param

    TOK_COMMA  shift, and go to state 170

    $default  reduce using rule 132 (function_decl)


state 102

  135 func_param_l: func_param .

    $default  reduce using rule 135 (func_param_l)


state 103

  137 func_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 171


state 104

  101 global_l: global_l TOK_COMMA . global_var

    TOK_IDENT  shift, and go to state 172

    global_var  go to state 173


state 105

  100 global_decl: type global_l semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 100 (global_decl)


state 106

  142 event_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 142 (event_param_l)


state 107

  139 event_param_l: TOK_LPAREN event_param_l . TOK_RPAREN
  140              | event_param_l . TOK_COMMA event_param

    TOK_COMMA   shift, and go to state 108
    TOK_RPAREN  shift, and go to state 174


state 108

  140 event_param_l: event_param_l TOK_COMMA . event_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 61

    event_param  go to state 175
    type         go to state 64
    baseType     go to state 34
    intType      go to state 35


state 109

  138 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 138 (event_decl)


state 110

  143 event_param: type TOK_IDENT .

    $default  reduce using rule 143 (event_param)


state 111

   32 event_aparam_l: event_aparam_l TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 176


state 112

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN .

    $default  reduce using rule 31 (normal_event)


state 113

   79 unary_operation: TOK_MINUS expression .
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    $default  reduce using rule 79 (unary_operation)


state 114

   78 unary_operation: TOK_BITNOT expression .
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 124
    TOK_MINUS  shift, and go to state 125
    TOK_MULT   shift, and go to state 126
    TOK_DIV    shift, and go to state 127
    TOK_MOD    shift, and go to state 128
    TOK_SHL    shift, and go to state 132
    TOK_SHR    shift, and go to state 133

    $default  reduce using rule 78 (unary_operation)


state 115

   77 unary_operation: TOK_NOT expression .
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139

    $default  reduce using rule 77 (unary_operation)


state 116

   14 compound_stmt2: TOK_LBRACE compound_stmt2 . TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 49
    TOK_RBRACE     shift, and go to state 177

    semi_colon  go to state 178


state 117

   17 compound_stmt1: TOK_LBRACE stmt_plus1 . TOK_RBRACE
   19 stmt_plus1: stmt_plus1 . simple_stmt

    TOK_RBRACE    shift, and go to state 179
    TOK_IF        shift, and go to state 149
    TOK_RETURN    shift, and go to state 150
    TOK_PRINT     shift, and go to state 74
    TOK_WHILE     shift, and go to state 151
    TOK_BREAK     shift, and go to state 152
    TOK_CONTINUE  shift, and go to state 153
    TOK_IDENT     shift, and go to state 180

    while_stmt         go to state 155
    if_then_else_stmt  go to state 156
    simple_stmt        go to state 181
    return_stmt        go to state 158
    break_stmt         go to state 159
    continue_stmt      go to state 160
    func_invocation    go to state 161
    func_name          go to state 85
    assignment         go to state 162
    ref_expr           go to state 163
    obj_var            go to state 91
    obj_func           go to state 164


state 118

   18 compound_stmt1: TOK_LBRACE semi_colon . TOK_RBRACE
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97
    TOK_RBRACE     shift, and go to state 182


state 119

   76 expression: TOK_LPAREN expression . TOK_RPAREN
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139
    TOK_AND     shift, and go to state 140
    TOK_OR      shift, and go to state 141
    TOK_RPAREN  shift, and go to state 183


state 120

   64 func_invocation: TOK_PRINT TOK_LPAREN . caller_param_l TOK_RPAREN
   65                | TOK_PRINT TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_RPAREN     shift, and go to state 184
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    caller_param_l    go to state 185
    assignment        go to state 86
    expression        go to state 186
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 121

  116 obj_var: TOK_IDENT TOK_DOT . TOK_IDENT

    TOK_IDENT  shift, and go to state 187


state 122

   10 rule_stmts: compound_stmt2 semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 10 (rule_stmts)


state 123

   62 func_invocation: func_name TOK_LPAREN . caller_param_l TOK_RPAREN
   63                | func_name TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_RPAREN     shift, and go to state 188
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    caller_param_l    go to state 189
    assignment        go to state 86
    expression        go to state 186
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 124

   93 binary_operation: expression TOK_PLUS . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 190
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 125

   94 binary_operation: expression TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 191
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 126

   95 binary_operation: expression TOK_MULT . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 192
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 127

   96 binary_operation: expression TOK_DIV . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 193
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 128

   97 binary_operation: expression TOK_MOD . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 194
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 129

   90 binary_operation: expression TOK_BITAND . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 195
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 130

   88 binary_operation: expression TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 196
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 131

   89 binary_operation: expression TOK_BITXOR . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 197
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 132

   91 binary_operation: expression TOK_SHL . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 198
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 133

   92 binary_operation: expression TOK_SHR . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 199
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 134

   84 binary_operation: expression TOK_GT . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 200
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 135

   85 binary_operation: expression TOK_LT . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 201
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 136

   86 binary_operation: expression TOK_GE . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 202
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 137

   87 binary_operation: expression TOK_LE . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 203
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 138

   82 binary_operation: expression TOK_EQ . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 204
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 139

   83 binary_operation: expression TOK_NE . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 205
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 140

   81 binary_operation: expression TOK_AND . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 206
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 141

   80 binary_operation: expression TOK_OR . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 207
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 142

   12 rule_stmts: expression semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 12 (rule_stmts)


state 143

   69 assignment: ref_expr TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 208
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 144

  108 class_defn: TOK_LBRACE class_body TOK_RBRACE .

    $default  reduce using rule 108 (class_defn)


state 145

  109 class_body: class_body class_var_decl .

    $default  reduce using rule 109 (class_body)


state 146

  110 class_body: class_body function_proto .

    $default  reduce using rule 110 (class_body)


state 147

  112 class_var_decl: type . class_var_l semi_colon
  132 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 209

    class_var_l  go to state 210
    class_var    go to state 211


state 148

  122 function_defn: TOK_LBRACE function_body TOK_RBRACE . semi_colon
  123              | TOK_LBRACE function_body TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 49

    $default  reduce using rule 123 (function_defn)

    semi_colon  go to state 212


state 149

   36 if_then_else_stmt: TOK_IF . condition basic_block
   37                  | TOK_IF . condition basic_block TOK_ELSE basic_block

    TOK_LPAREN  shift, and go to state 213

    condition  go to state 214


state 150

   53 return_stmt: TOK_RETURN . expression semi_colon
   54            | TOK_RETURN . semi_colon

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_SEMICOLON  shift, and go to state 49
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 215
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    semi_colon        go to state 216
    literal           go to state 93


state 151

   35 while_stmt: TOK_WHILE . condition basic_block

    TOK_LPAREN  shift, and go to state 213

    condition  go to state 217


state 152

   55 break_stmt: TOK_BREAK . semi_colon
   56           | TOK_BREAK . TOK_UINTNUM semi_colon

    TOK_SEMICOLON  shift, and go to state 49
    TOK_UINTNUM    shift, and go to state 218

    semi_colon  go to state 219


state 153

   57 continue_stmt: TOK_CONTINUE . semi_colon
   58              | TOK_CONTINUE . TOK_UINTNUM semi_colon

    TOK_SEMICOLON  shift, and go to state 49
    TOK_UINTNUM    shift, and go to state 220

    semi_colon  go to state 221


state 154

   66 func_name: TOK_IDENT .
   98 ref_expr: TOK_IDENT .
  116 obj_var: TOK_IDENT . TOK_DOT TOK_IDENT
  117 obj_func: TOK_IDENT . TOK_DOT class_func_invocation semi_colon
  153 type: TOK_IDENT .

    TOK_DOT  shift, and go to state 222

    TOK_ASSIGN  reduce using rule 98 (ref_expr)
    TOK_IDENT   reduce using rule 153 (type)
    $default    reduce using rule 66 (func_name)


state 155

   49 simple_stmt: while_stmt .

    $default  reduce using rule 49 (simple_stmt)


state 156

   47 simple_stmt: if_then_else_stmt .

    $default  reduce using rule 47 (simple_stmt)


state 157

  125 function_body: function_body simple_stmt .

    $default  reduce using rule 125 (function_body)


state 158

   48 simple_stmt: return_stmt .

    $default  reduce using rule 48 (simple_stmt)


state 159

   50 simple_stmt: break_stmt .

    $default  reduce using rule 50 (simple_stmt)


state 160

   51 simple_stmt: continue_stmt .

    $default  reduce using rule 51 (simple_stmt)


state 161

   45 simple_stmt: func_invocation . semi_colon

    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 223


state 162

   46 simple_stmt: assignment . semi_colon

    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 224


state 163

   69 assignment: ref_expr . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 143


state 164

   52 simple_stmt: obj_func .

    $default  reduce using rule 52 (simple_stmt)


state 165

  124 function_body: function_body local_decl .

    $default  reduce using rule 124 (function_body)


state 166

  127 local_decl: type . local_l semi_colon

    TOK_IDENT  shift, and go to state 225

    local_l    go to state 226
    local_var  go to state 227


state 167

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression
  104 global_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139
    TOK_AND     shift, and go to state 140
    TOK_OR      shift, and go to state 141

    $default  reduce using rule 104 (global_var)


state 168

  136 func_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 136 (func_param_l)


state 169

  133 func_param_l: TOK_LPAREN func_param_l . TOK_RPAREN
  134             | func_param_l . TOK_COMMA func_param

    TOK_COMMA   shift, and go to state 170
    TOK_RPAREN  shift, and go to state 228


state 170

  134 func_param_l: func_param_l TOK_COMMA . func_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 61

    func_param  go to state 229
    type        go to state 103
    baseType    go to state 34
    intType     go to state 35


state 171

  137 func_param: type TOK_IDENT .

    $default  reduce using rule 137 (func_param)


state 172

  103 global_var: TOK_IDENT .
  104           | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 99

    $default  reduce using rule 103 (global_var)


state 173

  101 global_l: global_l TOK_COMMA global_var .

    $default  reduce using rule 101 (global_l)


state 174

  139 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN .

    $default  reduce using rule 139 (event_param_l)


state 175

  140 event_param_l: event_param_l TOK_COMMA event_param .

    $default  reduce using rule 140 (event_param_l)


state 176

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT .

    $default  reduce using rule 32 (event_aparam_l)


state 177

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE .

    $default  reduce using rule 14 (compound_stmt2)


state 178

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon . TOK_RBRACE
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97
    TOK_RBRACE     shift, and go to state 230


state 179

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE .

    $default  reduce using rule 17 (compound_stmt1)


state 180

   66 func_name: TOK_IDENT .
   98 ref_expr: TOK_IDENT .
  116 obj_var: TOK_IDENT . TOK_DOT TOK_IDENT
  117 obj_func: TOK_IDENT . TOK_DOT class_func_invocation semi_colon

    TOK_DOT  shift, and go to state 222

    TOK_ASSIGN  reduce using rule 98 (ref_expr)
    $default    reduce using rule 66 (func_name)


state 181

   19 stmt_plus1: stmt_plus1 simple_stmt .

    $default  reduce using rule 19 (stmt_plus1)


state 182

   18 compound_stmt1: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 18 (compound_stmt1)


state 183

   76 expression: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 76 (expression)


state 184

   65 func_invocation: TOK_PRINT TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 65 (func_invocation)


state 185

   64 func_invocation: TOK_PRINT TOK_LPAREN caller_param_l . TOK_RPAREN
   67 caller_param_l: caller_param_l . TOK_COMMA expression

    TOK_COMMA   shift, and go to state 231
    TOK_RPAREN  shift, and go to state 232


state 186

   68 caller_param_l: expression .
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139
    TOK_AND     shift, and go to state 140
    TOK_OR      shift, and go to state 141

    $default  reduce using rule 68 (caller_param_l)


state 187

  116 obj_var: TOK_IDENT TOK_DOT TOK_IDENT .

    $default  reduce using rule 116 (obj_var)


state 188

   63 func_invocation: func_name TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 63 (func_invocation)


state 189

   62 func_invocation: func_name TOK_LPAREN caller_param_l . TOK_RPAREN
   67 caller_param_l: caller_param_l . TOK_COMMA expression

    TOK_COMMA   shift, and go to state 231
    TOK_RPAREN  shift, and go to state 233


state 190

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   93                 | expression TOK_PLUS expression .
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 126
    TOK_DIV   shift, and go to state 127
    TOK_MOD   shift, and go to state 128

    $default  reduce using rule 93 (binary_operation)


state 191

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   94                 | expression TOK_MINUS expression .
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 126
    TOK_DIV   shift, and go to state 127
    TOK_MOD   shift, and go to state 128

    $default  reduce using rule 94 (binary_operation)


state 192

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   95                 | expression TOK_MULT expression .
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    $default  reduce using rule 95 (binary_operation)


state 193

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   96                 | expression TOK_DIV expression .
   97                 | expression . TOK_MOD expression

    $default  reduce using rule 96 (binary_operation)


state 194

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression
   97                 | expression TOK_MOD expression .

    $default  reduce using rule 97 (binary_operation)


state 195

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   90                 | expression TOK_BITAND expression .
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 124
    TOK_MINUS  shift, and go to state 125
    TOK_MULT   shift, and go to state 126
    TOK_DIV    shift, and go to state 127
    TOK_MOD    shift, and go to state 128
    TOK_SHL    shift, and go to state 132
    TOK_SHR    shift, and go to state 133

    $default  reduce using rule 90 (binary_operation)


state 196

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   88                 | expression TOK_BITOR expression .
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133

    $default  reduce using rule 88 (binary_operation)


state 197

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   89                 | expression TOK_BITXOR expression .
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133

    $default  reduce using rule 89 (binary_operation)


state 198

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   91                 | expression TOK_SHL expression .
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 124
    TOK_MINUS  shift, and go to state 125
    TOK_MULT   shift, and go to state 126
    TOK_DIV    shift, and go to state 127
    TOK_MOD    shift, and go to state 128

    $default  reduce using rule 91 (binary_operation)


state 199

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   92                 | expression TOK_SHR expression .
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 124
    TOK_MINUS  shift, and go to state 125
    TOK_MULT   shift, and go to state 126
    TOK_DIV    shift, and go to state 127
    TOK_MOD    shift, and go to state 128

    $default  reduce using rule 92 (binary_operation)


state 200

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   84                 | expression TOK_GT expression .
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 84 (binary_operation)


state 201

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   85                 | expression TOK_LT expression .
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 85 (binary_operation)


state 202

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   86                 | expression TOK_GE expression .
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 86 (binary_operation)


state 203

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   87                 | expression TOK_LE expression .
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 87 (binary_operation)


state 204

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   82                 | expression TOK_EQ expression .
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 82 (binary_operation)


state 205

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   83                 | expression TOK_NE expression .
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 83 (binary_operation)


state 206

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   81                 | expression TOK_AND expression .
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139

    $default  reduce using rule 81 (binary_operation)


state 207

   80 binary_operation: expression . TOK_OR expression
   80                 | expression TOK_OR expression .
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139
    TOK_AND     shift, and go to state 140

    $default  reduce using rule 80 (binary_operation)


state 208

   69 assignment: ref_expr TOK_ASSIGN expression .
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139
    TOK_AND     shift, and go to state 140
    TOK_OR      shift, and go to state 141

    $default  reduce using rule 69 (assignment)


state 209

  115 class_var: TOK_IDENT .
  132 function_decl: type TOK_IDENT . func_param_l

    TOK_LPAREN    shift, and go to state 100
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_SHORT     shift, and go to state 16
    TOK_LONG      shift, and go to state 17
    TOK_BIT       shift, and go to state 18
    TOK_ENUM      shift, and go to state 19
    TOK_IDENT     shift, and go to state 61

    $default  reduce using rule 115 (class_var)

    func_param_l  go to state 101
    func_param    go to state 102
    type          go to state 103
    baseType      go to state 34
    intType       go to state 35


state 210

  112 class_var_decl: type class_var_l . semi_colon
  113 class_var_l: class_var_l . TOK_COMMA class_var

    TOK_COMMA      shift, and go to state 234
    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 235


state 211

  114 class_var_l: class_var .

    $default  reduce using rule 114 (class_var_l)


state 212

  122 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 122 (function_defn)


state 213

   61 condition: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 236
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 214

   36 if_then_else_stmt: TOK_IF condition . basic_block
   37                  | TOK_IF condition . basic_block TOK_ELSE basic_block

    TOK_SEMICOLON  shift, and go to state 49
    TOK_LBRACE     shift, and go to state 237
    TOK_IF         shift, and go to state 149
    TOK_RETURN     shift, and go to state 150
    TOK_PRINT      shift, and go to state 74
    TOK_WHILE      shift, and go to state 151
    TOK_BREAK      shift, and go to state 152
    TOK_CONTINUE   shift, and go to state 153
    TOK_IDENT      shift, and go to state 180

    while_stmt         go to state 155
    if_then_else_stmt  go to state 156
    basic_block        go to state 238
    simple_stmt        go to state 239
    return_stmt        go to state 158
    break_stmt         go to state 159
    continue_stmt      go to state 160
    empty_block        go to state 240
    func_invocation    go to state 161
    func_name          go to state 85
    assignment         go to state 162
    ref_expr           go to state 163
    obj_var            go to state 91
    obj_func           go to state 164
    semi_colon         go to state 241


state 215

   53 return_stmt: TOK_RETURN expression . semi_colon
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 124
    TOK_MINUS      shift, and go to state 125
    TOK_MULT       shift, and go to state 126
    TOK_DIV        shift, and go to state 127
    TOK_MOD        shift, and go to state 128
    TOK_BITAND     shift, and go to state 129
    TOK_BITOR      shift, and go to state 130
    TOK_BITXOR     shift, and go to state 131
    TOK_SHL        shift, and go to state 132
    TOK_SHR        shift, and go to state 133
    TOK_GT         shift, and go to state 134
    TOK_LT         shift, and go to state 135
    TOK_GE         shift, and go to state 136
    TOK_LE         shift, and go to state 137
    TOK_EQ         shift, and go to state 138
    TOK_NE         shift, and go to state 139
    TOK_AND        shift, and go to state 140
    TOK_OR         shift, and go to state 141
    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 242


state 216

   54 return_stmt: TOK_RETURN semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 54 (return_stmt)


state 217

   35 while_stmt: TOK_WHILE condition . basic_block

    TOK_SEMICOLON  shift, and go to state 49
    TOK_LBRACE     shift, and go to state 237
    TOK_IF         shift, and go to state 149
    TOK_RETURN     shift, and go to state 150
    TOK_PRINT      shift, and go to state 74
    TOK_WHILE      shift, and go to state 151
    TOK_BREAK      shift, and go to state 152
    TOK_CONTINUE   shift, and go to state 153
    TOK_IDENT      shift, and go to state 180

    while_stmt         go to state 155
    if_then_else_stmt  go to state 156
    basic_block        go to state 243
    simple_stmt        go to state 239
    return_stmt        go to state 158
    break_stmt         go to state 159
    continue_stmt      go to state 160
    empty_block        go to state 240
    func_invocation    go to state 161
    func_name          go to state 85
    assignment         go to state 162
    ref_expr           go to state 163
    obj_var            go to state 91
    obj_func           go to state 164
    semi_colon         go to state 241


state 218

   56 break_stmt: TOK_BREAK TOK_UINTNUM . semi_colon

    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 244


state 219

   55 break_stmt: TOK_BREAK semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 55 (break_stmt)


state 220

   58 continue_stmt: TOK_CONTINUE TOK_UINTNUM . semi_colon

    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 245


state 221

   57 continue_stmt: TOK_CONTINUE semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 57 (continue_stmt)


state 222

  116 obj_var: TOK_IDENT TOK_DOT . TOK_IDENT
  117 obj_func: TOK_IDENT TOK_DOT . class_func_invocation semi_colon

    TOK_IDENT  shift, and go to state 246

    func_name              go to state 247
    class_func_invocation  go to state 248


state 223

   45 simple_stmt: func_invocation semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 45 (simple_stmt)


state 224

   46 simple_stmt: assignment semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 46 (simple_stmt)


state 225

  130 local_var: TOK_IDENT .
  131          | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 249

    $default  reduce using rule 130 (local_var)


state 226

  127 local_decl: type local_l . semi_colon
  128 local_l: local_l . TOK_COMMA local_var

    TOK_COMMA      shift, and go to state 250
    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 251


state 227

  129 local_l: local_var .

    $default  reduce using rule 129 (local_l)


state 228

  133 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN .

    $default  reduce using rule 133 (func_param_l)


state 229

  134 func_param_l: func_param_l TOK_COMMA func_param .

    $default  reduce using rule 134 (func_param_l)


state 230

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE .

    $default  reduce using rule 15 (compound_stmt2)


state 231

   67 caller_param_l: caller_param_l TOK_COMMA . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 252
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 232

   64 func_invocation: TOK_PRINT TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 64 (func_invocation)


state 233

   62 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 62 (func_invocation)


state 234

  113 class_var_l: class_var_l TOK_COMMA . class_var

    TOK_IDENT  shift, and go to state 253

    class_var  go to state 254


state 235

  112 class_var_decl: type class_var_l semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 112 (class_var_decl)


state 236

   61 condition: TOK_LPAREN expression . TOK_RPAREN
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139
    TOK_AND     shift, and go to state 140
    TOK_OR      shift, and go to state 141
    TOK_RPAREN  shift, and go to state 255


state 237

   38 basic_block: TOK_LBRACE . stmt_plus2 TOK_RBRACE semi_colon
   39            | TOK_LBRACE . stmt_plus2 TOK_RBRACE
   59 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE semi_colon
   60            | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 49
    TOK_IF         shift, and go to state 149
    TOK_RETURN     shift, and go to state 150
    TOK_PRINT      shift, and go to state 74
    TOK_WHILE      shift, and go to state 151
    TOK_BREAK      shift, and go to state 152
    TOK_CONTINUE   shift, and go to state 153
    TOK_IDENT      shift, and go to state 180

    while_stmt         go to state 155
    if_then_else_stmt  go to state 156
    stmt_plus2         go to state 256
    simple_stmt        go to state 257
    return_stmt        go to state 158
    break_stmt         go to state 159
    continue_stmt      go to state 160
    func_invocation    go to state 161
    func_name          go to state 85
    assignment         go to state 162
    ref_expr           go to state 163
    obj_var            go to state 91
    obj_func           go to state 164
    semi_colon         go to state 258


state 238

   36 if_then_else_stmt: TOK_IF condition basic_block .
   37                  | TOK_IF condition basic_block . TOK_ELSE basic_block

    TOK_ELSE  shift, and go to state 259

    TOK_ELSE  [reduce using rule 36 (if_then_else_stmt)]
    $default  reduce using rule 36 (if_then_else_stmt)


state 239

   41 basic_block: simple_stmt .

    $default  reduce using rule 41 (basic_block)


state 240

   40 basic_block: empty_block .

    $default  reduce using rule 40 (basic_block)


state 241

   42 basic_block: semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 42 (basic_block)


state 242

   53 return_stmt: TOK_RETURN expression semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 53 (return_stmt)


state 243

   35 while_stmt: TOK_WHILE condition basic_block .

    $default  reduce using rule 35 (while_stmt)


state 244

   56 break_stmt: TOK_BREAK TOK_UINTNUM semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 56 (break_stmt)


state 245

   58 continue_stmt: TOK_CONTINUE TOK_UINTNUM semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 58 (continue_stmt)


state 246

   66 func_name: TOK_IDENT .
  116 obj_var: TOK_IDENT TOK_DOT TOK_IDENT .

    TOK_ASSIGN  reduce using rule 116 (obj_var)
    $default    reduce using rule 66 (func_name)


state 247

  118 class_func_invocation: func_name . TOK_LPAREN caller_param_l TOK_RPAREN
  119                      | func_name . TOK_LPAREN TOK_RPAREN

    TOK_LPAREN  shift, and go to state 260


state 248

  117 obj_func: TOK_IDENT TOK_DOT class_func_invocation . semi_colon

    TOK_SEMICOLON  shift, and go to state 49

    semi_colon  go to state 261


state 249

  131 local_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    assignment        go to state 86
    expression        go to state 262
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 250

  128 local_l: local_l TOK_COMMA . local_var

    TOK_IDENT  shift, and go to state 225

    local_var  go to state 263


state 251

  127 local_decl: type local_l semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 127 (local_decl)


state 252

   67 caller_param_l: caller_param_l TOK_COMMA expression .
   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139
    TOK_AND     shift, and go to state 140
    TOK_OR      shift, and go to state 141

    $default  reduce using rule 67 (caller_param_l)


state 253

  115 class_var: TOK_IDENT .

    $default  reduce using rule 115 (class_var)


state 254

  113 class_var_l: class_var_l TOK_COMMA class_var .

    $default  reduce using rule 113 (class_var_l)


state 255

   61 condition: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 61 (condition)


state 256

   38 basic_block: TOK_LBRACE stmt_plus2 . TOK_RBRACE semi_colon
   39            | TOK_LBRACE stmt_plus2 . TOK_RBRACE
   43 stmt_plus2: stmt_plus2 . simple_stmt

    TOK_RBRACE    shift, and go to state 264
    TOK_IF        shift, and go to state 149
    TOK_RETURN    shift, and go to state 150
    TOK_PRINT     shift, and go to state 74
    TOK_WHILE     shift, and go to state 151
    TOK_BREAK     shift, and go to state 152
    TOK_CONTINUE  shift, and go to state 153
    TOK_IDENT     shift, and go to state 180

    while_stmt         go to state 155
    if_then_else_stmt  go to state 156
    simple_stmt        go to state 265
    return_stmt        go to state 158
    break_stmt         go to state 159
    continue_stmt      go to state 160
    func_invocation    go to state 161
    func_name          go to state 85
    assignment         go to state 162
    ref_expr           go to state 163
    obj_var            go to state 91
    obj_func           go to state 164


state 257

   44 stmt_plus2: simple_stmt .

    $default  reduce using rule 44 (stmt_plus2)


state 258

   59 empty_block: TOK_LBRACE semi_colon . TOK_RBRACE semi_colon
   60            | TOK_LBRACE semi_colon . TOK_RBRACE
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97
    TOK_RBRACE     shift, and go to state 266


state 259

   37 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE . basic_block

    TOK_SEMICOLON  shift, and go to state 49
    TOK_LBRACE     shift, and go to state 237
    TOK_IF         shift, and go to state 149
    TOK_RETURN     shift, and go to state 150
    TOK_PRINT      shift, and go to state 74
    TOK_WHILE      shift, and go to state 151
    TOK_BREAK      shift, and go to state 152
    TOK_CONTINUE   shift, and go to state 153
    TOK_IDENT      shift, and go to state 180

    while_stmt         go to state 155
    if_then_else_stmt  go to state 156
    basic_block        go to state 267
    simple_stmt        go to state 239
    return_stmt        go to state 158
    break_stmt         go to state 159
    continue_stmt      go to state 160
    empty_block        go to state 240
    func_invocation    go to state 161
    func_name          go to state 85
    assignment         go to state 162
    ref_expr           go to state 163
    obj_var            go to state 91
    obj_func           go to state 164
    semi_colon         go to state 241


state 260

  118 class_func_invocation: func_name TOK_LPAREN . caller_param_l TOK_RPAREN
  119                      | func_name TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 69
    TOK_BITNOT     shift, and go to state 70
    TOK_NOT        shift, and go to state 71
    TOK_LPAREN     shift, and go to state 73
    TOK_RPAREN     shift, and go to state 268
    TOK_PRINT      shift, and go to state 74
    TOK_UINTNUM    shift, and go to state 75
    TOK_DOUBLENUM  shift, and go to state 76
    TOK_STRCONST   shift, and go to state 77
    TOK_TRUE       shift, and go to state 78
    TOK_FALSE      shift, and go to state 79
    TOK_IDENT      shift, and go to state 80

    func_invocation   go to state 84
    func_name         go to state 85
    caller_param_l    go to state 269
    assignment        go to state 86
    expression        go to state 186
    unary_operation   go to state 88
    binary_operation  go to state 89
    ref_expr          go to state 90
    obj_var           go to state 91
    literal           go to state 93


state 261

  117 obj_func: TOK_IDENT TOK_DOT class_func_invocation semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 117 (obj_func)


state 262

   80 binary_operation: expression . TOK_OR expression
   81                 | expression . TOK_AND expression
   82                 | expression . TOK_EQ expression
   83                 | expression . TOK_NE expression
   84                 | expression . TOK_GT expression
   85                 | expression . TOK_LT expression
   86                 | expression . TOK_GE expression
   87                 | expression . TOK_LE expression
   88                 | expression . TOK_BITOR expression
   89                 | expression . TOK_BITXOR expression
   90                 | expression . TOK_BITAND expression
   91                 | expression . TOK_SHL expression
   92                 | expression . TOK_SHR expression
   93                 | expression . TOK_PLUS expression
   94                 | expression . TOK_MINUS expression
   95                 | expression . TOK_MULT expression
   96                 | expression . TOK_DIV expression
   97                 | expression . TOK_MOD expression
  131 local_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 124
    TOK_MINUS   shift, and go to state 125
    TOK_MULT    shift, and go to state 126
    TOK_DIV     shift, and go to state 127
    TOK_MOD     shift, and go to state 128
    TOK_BITAND  shift, and go to state 129
    TOK_BITOR   shift, and go to state 130
    TOK_BITXOR  shift, and go to state 131
    TOK_SHL     shift, and go to state 132
    TOK_SHR     shift, and go to state 133
    TOK_GT      shift, and go to state 134
    TOK_LT      shift, and go to state 135
    TOK_GE      shift, and go to state 136
    TOK_LE      shift, and go to state 137
    TOK_EQ      shift, and go to state 138
    TOK_NE      shift, and go to state 139
    TOK_AND     shift, and go to state 140
    TOK_OR      shift, and go to state 141

    $default  reduce using rule 131 (local_var)


state 263

  128 local_l: local_l TOK_COMMA local_var .

    $default  reduce using rule 128 (local_l)


state 264

   38 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE . semi_colon
   39            | TOK_LBRACE stmt_plus2 TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 49

    $default  reduce using rule 39 (basic_block)

    semi_colon  go to state 270


state 265

   43 stmt_plus2: stmt_plus2 simple_stmt .

    $default  reduce using rule 43 (stmt_plus2)


state 266

   59 empty_block: TOK_LBRACE semi_colon TOK_RBRACE . semi_colon
   60            | TOK_LBRACE semi_colon TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 49

    $default  reduce using rule 60 (empty_block)

    semi_colon  go to state 271


state 267

   37 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE basic_block .

    $default  reduce using rule 37 (if_then_else_stmt)


state 268

  119 class_func_invocation: func_name TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 119 (class_func_invocation)


state 269

   67 caller_param_l: caller_param_l . TOK_COMMA expression
  118 class_func_invocation: func_name TOK_LPAREN caller_param_l . TOK_RPAREN

    TOK_COMMA   shift, and go to state 231
    TOK_RPAREN  shift, and go to state 272


state 270

   38 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 38 (basic_block)


state 271

   59 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon .
  144 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 97

    $default  reduce using rule 59 (empty_block)


state 272

  118 class_func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 118 (class_func_invocation)
