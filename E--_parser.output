Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_QMARK
   TOK_LBRACK
   TOK_RBRACK
   TOK_SHORT
   TOK_LONG
   TOK_BIT
   TOK_ENUM
   TOK_DOUBLE_COLON
   TOK_DOT


State 218 conflicts: 1 shift/reduce


Grammar

    0 $accept: s_specification $end

    1 s_specification: specification

    2 specification: specification declaration
    3              | specification rule
    4              | /* empty */

    5 declaration: event_decl
    6            | function_proto
    7            | class_proto
    8            | global_decl

    9 rule: primitive_all TOK_ARROW rule_stmts

   10 rule_stmts: compound_stmt2 semi_colon
   11           | compound_stmt2
   12           | expression semi_colon
   13           | semi_colon

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE
   16               | compound_stmt1

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE semi_colon TOK_RBRACE

   19 stmt_plus1: stmt_plus1 simple_stmt
   20           | /* empty */

   21 primitive_all: normal_event
   22              | any_event
   23              | normal_event TOK_BITOR expression
   24              | binary_event_oprs
   25              | TOK_LPAREN primitive_all TOK_RPAREN

   26 binary_event_oprs: primitive_all TOK_PAT_OR primitive_all
   27                  | primitive_all TOK_COLON primitive_all
   28                  | primitive_all TOK_PAT_STAR
   29                  | TOK_NOT primitive_all

   30 any_event: TOK_ANY

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT
   33               | TOK_IDENT
   34               | /* empty */

   35 while_stmt: TOK_WHILE condition basic_block

   36 if_then_else_stmt: TOK_IF condition basic_block
   37                  | TOK_IF condition basic_block TOK_ELSE basic_block

   38 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon
   39            | TOK_LBRACE stmt_plus2 TOK_RBRACE
   40            | empty_block
   41            | simple_stmt
   42            | semi_colon

   43 stmt_plus2: stmt_plus2 simple_stmt
   44           | simple_stmt

   45 simple_stmt: func_invocation semi_colon
   46            | assignment semi_colon
   47            | if_then_else_stmt
   48            | TOK_RETURN expression semi_colon
   49            | TOK_RETURN semi_colon
   50            | while_stmt
   51            | break_stmt

   52 break_stmt: TOK_BREAK semi_colon
   53           | TOK_BREAK expression semi_colon

   54 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon
   55            | TOK_LBRACE semi_colon TOK_RBRACE

   56 condition: TOK_LPAREN expression TOK_RPAREN

   57 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN
   58                | func_name TOK_LPAREN TOK_RPAREN

   59 func_name: TOK_IDENT
   60          | TOK_PRINT

   61 caller_param_l: caller_param_l TOK_COMMA expression
   62               | expression

   63 assignment: ref_expr TOK_ASSIGN expression

   64 expression: literal
   65           | ref_expr
   66           | func_invocation
   67           | assignment
   68           | unary_operation
   69           | binary_operation
   70           | TOK_LPAREN expression TOK_RPAREN

   71 unary_operation: TOK_NOT expression
   72                | TOK_BITNOT expression
   73                | TOK_MINUS expression

   74 binary_operation: expression TOK_OR expression
   75                 | expression TOK_AND expression
   76                 | expression TOK_EQ expression
   77                 | expression TOK_NE expression
   78                 | expression TOK_GT expression
   79                 | expression TOK_LT expression
   80                 | expression TOK_GE expression
   81                 | expression TOK_LE expression
   82                 | expression TOK_BITOR expression
   83                 | expression TOK_BITXOR expression
   84                 | expression TOK_BITAND expression
   85                 | expression TOK_SHL expression
   86                 | expression TOK_SHR expression
   87                 | expression TOK_PLUS expression
   88                 | expression TOK_MINUS expression
   89                 | expression TOK_MULT expression
   90                 | expression TOK_DIV expression
   91                 | expression TOK_MOD expression

   92 ref_expr: TOK_IDENT

   93 global_decl: type global_l semi_colon

   94 global_l: global_l TOK_COMMA global_var
   95         | global_var

   96 global_var: TOK_IDENT
   97           | TOK_IDENT TOK_ASSIGN expression

   98 class_proto: class_decl semi_colon
   99            | class_decl class_defn semi_colon

  100 class_decl: TOK_CLASS TOK_IDENT

  101 class_defn: TOK_LBRACE class_body TOK_RBRACE

  102 class_body: class_body class_var_decl
  103           | class_body function_proto
  104           | /* empty */

  105 class_var_decl: type class_var_l semi_colon

  106 class_var_l: class_var_l TOK_COMMA TOK_IDENT
  107            | TOK_IDENT

  108 function_proto: function_decl semi_colon
  109               | function_decl function_defn

  110 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon
  111              | TOK_LBRACE function_body TOK_RBRACE

  112 function_body: function_body local_decl
  113              | function_body simple_stmt
  114              | /* empty */

  115 local_decl: type local_l semi_colon

  116 local_l: local_l TOK_COMMA local_var
  117        | local_var

  118 local_var: TOK_IDENT
  119          | TOK_IDENT TOK_ASSIGN expression

  120 function_decl: type TOK_IDENT func_param_l

  121 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN
  122             | func_param_l TOK_COMMA func_param
  123             | func_param
  124             | TOK_LPAREN TOK_RPAREN

  125 func_param: type TOK_IDENT

  126 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon

  127 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN
  128              | event_param_l TOK_COMMA event_param
  129              | event_param
  130              | TOK_LPAREN TOK_RPAREN

  131 event_param: type TOK_IDENT

  132 semi_colon: semi_colon TOK_SEMICOLON
  133           | TOK_SEMICOLON

  134 literal: TOK_UINTNUM
  135        | TOK_DOUBLENUM
  136        | TOK_STRCONST
  137        | TOK_TRUE
  138        | TOK_FALSE

  139 type: baseType
  140     | intType
  141     | TOK_IDENT
  142     | TOK_UNSIGNED baseType

  143 baseType: TOK_VOID
  144         | TOK_BOOL
  145         | TOK_BYTE
  146         | TOK_STRING
  147         | TOK_DOUBLE

  148 intType: TOK_INT
  149        | TOK_UNSIGNED TOK_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 28
TOK_PAT_OR (260) 26
TOK_PAT_NOT (261)
TOK_PLUS (262) 87
TOK_MINUS (263) 73 88
TOK_UMINUS (264)
TOK_MULT (265) 89
TOK_DIV (266) 90
TOK_MOD (267) 91
TOK_BITAND (268) 84
TOK_BITOR (269) 23 82
TOK_BITNOT (270) 72
TOK_BITXOR (271) 83
TOK_SHL (272) 85
TOK_SHR (273) 86
TOK_GT (274) 78
TOK_LT (275) 79
TOK_GE (276) 80
TOK_LE (277) 81
TOK_EQ (278) 76
TOK_NE (279) 77
TOK_AND (280) 75
TOK_OR (281) 74
TOK_NOT (282) 29 71
TOK_COMMA (283) 32 61 94 106 116 122 128
TOK_ASSIGN (284) 63 97 119
TOK_SEMICOLON (285) 132 133
TOK_COLON (286) 27
TOK_ARROW (287) 9
TOK_QMARK (288)
TOK_LBRACE (289) 14 15 17 18 38 39 54 55 101 110 111
TOK_RBRACE (290) 14 15 17 18 38 39 54 55 101 110 111
TOK_LPAREN (291) 25 31 56 57 58 70 121 124 127 130
TOK_RPAREN (292) 25 31 56 57 58 70 121 124 127 130
TOK_LBRACK (293)
TOK_RBRACK (294)
TOK_IF (295) 36 37
TOK_ELSE (296) 37
TOK_CLASS (297) 100
TOK_RETURN (298) 48 49
TOK_EVENT (299) 126
TOK_ANY (300) 30
TOK_PRINT (301) 60
TOK_WHILE (302) 35
TOK_BREAK (303) 52 53
TOK_UINTNUM (304) 134
TOK_DOUBLENUM (305) 135
TOK_VOID (306) 143
TOK_STRING (307) 146
TOK_STRCONST (308) 136
TOK_INT (309) 148 149
TOK_UNSIGNED (310) 142 149
TOK_BOOL (311) 144
TOK_BYTE (312) 145
TOK_DOUBLE (313) 147
TOK_SHORT (314)
TOK_LONG (315)
TOK_BIT (316)
TOK_ENUM (317)
TOK_TRUE (318) 137
TOK_FALSE (319) 138
TOK_IDENT (320) 31 32 33 59 92 96 97 100 106 107 118 119 120 125 126
    131 141
TOK_DOUBLE_COLON (321)
TOK_DOT (322)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
s_specification (69)
    on left: 1, on right: 0
specification (70)
    on left: 2 3 4, on right: 1 2 3
declaration (71)
    on left: 5 6 7 8, on right: 2
rule (72)
    on left: 9, on right: 3
rule_stmts (73)
    on left: 10 11 12 13, on right: 9
compound_stmt2 (74)
    on left: 14 15 16, on right: 10 11 14 15
compound_stmt1 (75)
    on left: 17 18, on right: 16
stmt_plus1 (76)
    on left: 19 20, on right: 17 19
primitive_all (77)
    on left: 21 22 23 24 25, on right: 9 25 26 27 28 29
binary_event_oprs (78)
    on left: 26 27 28 29, on right: 24
any_event (79)
    on left: 30, on right: 22
normal_event (80)
    on left: 31, on right: 21 23
event_aparam_l (81)
    on left: 32 33 34, on right: 31 32
while_stmt (82)
    on left: 35, on right: 50
if_then_else_stmt (83)
    on left: 36 37, on right: 47
basic_block (84)
    on left: 38 39 40 41 42, on right: 35 36 37
stmt_plus2 (85)
    on left: 43 44, on right: 38 39 43
simple_stmt (86)
    on left: 45 46 47 48 49 50 51, on right: 19 41 43 44 113
break_stmt (87)
    on left: 52 53, on right: 51
empty_block (88)
    on left: 54 55, on right: 40
condition (89)
    on left: 56, on right: 35 36 37
func_invocation (90)
    on left: 57 58, on right: 45 66
func_name (91)
    on left: 59 60, on right: 57 58
caller_param_l (92)
    on left: 61 62, on right: 57 61
assignment (93)
    on left: 63, on right: 46 67
expression (94)
    on left: 64 65 66 67 68 69 70, on right: 12 23 48 53 56 61 62 63
    70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90
    91 97 119
unary_operation (95)
    on left: 71 72 73, on right: 68
binary_operation (96)
    on left: 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91,
    on right: 69
ref_expr (97)
    on left: 92, on right: 63 65
global_decl (98)
    on left: 93, on right: 8
global_l (99)
    on left: 94 95, on right: 93 94
global_var (100)
    on left: 96 97, on right: 94 95
class_proto (101)
    on left: 98 99, on right: 7
class_decl (102)
    on left: 100, on right: 98 99
class_defn (103)
    on left: 101, on right: 99
class_body (104)
    on left: 102 103 104, on right: 101 102 103
class_var_decl (105)
    on left: 105, on right: 102
class_var_l (106)
    on left: 106 107, on right: 105 106
function_proto (107)
    on left: 108 109, on right: 6 103
function_defn (108)
    on left: 110 111, on right: 109
function_body (109)
    on left: 112 113 114, on right: 110 111 112 113
local_decl (110)
    on left: 115, on right: 112
local_l (111)
    on left: 116 117, on right: 115 116
local_var (112)
    on left: 118 119, on right: 116 117
function_decl (113)
    on left: 120, on right: 108 109
func_param_l (114)
    on left: 121 122 123 124, on right: 120 121 122
func_param (115)
    on left: 125, on right: 122 123
event_decl (116)
    on left: 126, on right: 5
event_param_l (117)
    on left: 127 128 129 130, on right: 126 127 128
event_param (118)
    on left: 131, on right: 128 129
semi_colon (119)
    on left: 132 133, on right: 10 12 13 15 18 38 42 45 46 48 49 52
    53 54 55 93 98 99 105 108 110 115 126 132
literal (120)
    on left: 134 135 136 137 138, on right: 64
type (121)
    on left: 139 140 141 142, on right: 93 105 115 120 125 131
baseType (122)
    on left: 143 144 145 146 147, on right: 139 142
intType (123)
    on left: 148 149, on right: 140


state 0

    0 $accept: . s_specification $end

    $default  reduce using rule 4 (specification)

    s_specification  go to state 1
    specification    go to state 2


state 1

    0 $accept: s_specification . $end

    $end  shift, and go to state 3


state 2

    1 s_specification: specification .
    2 specification: specification . declaration
    3              | specification . rule

    TOK_NOT       shift, and go to state 4
    TOK_LPAREN    shift, and go to state 5
    TOK_CLASS     shift, and go to state 6
    TOK_EVENT     shift, and go to state 7
    TOK_ANY       shift, and go to state 8
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 16

    $default  reduce using rule 1 (s_specification)

    declaration        go to state 17
    rule               go to state 18
    primitive_all      go to state 19
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22
    global_decl        go to state 23
    class_proto        go to state 24
    class_decl         go to state 25
    function_proto     go to state 26
    function_decl      go to state 27
    event_decl         go to state 28
    type               go to state 29
    baseType           go to state 30
    intType            go to state 31


state 3

    0 $accept: s_specification $end .

    $default  accept


state 4

   29 binary_event_oprs: TOK_NOT . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 32

    primitive_all      go to state 33
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 5

   25 primitive_all: TOK_LPAREN . primitive_all TOK_RPAREN

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 32

    primitive_all      go to state 34
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 6

  100 class_decl: TOK_CLASS . TOK_IDENT

    TOK_IDENT  shift, and go to state 35


state 7

  126 event_decl: TOK_EVENT . TOK_IDENT event_param_l semi_colon

    TOK_IDENT  shift, and go to state 36


state 8

   30 any_event: TOK_ANY .

    $default  reduce using rule 30 (any_event)


state 9

  143 baseType: TOK_VOID .

    $default  reduce using rule 143 (baseType)


state 10

  146 baseType: TOK_STRING .

    $default  reduce using rule 146 (baseType)


state 11

  148 intType: TOK_INT .

    $default  reduce using rule 148 (intType)


state 12

  142 type: TOK_UNSIGNED . baseType
  149 intType: TOK_UNSIGNED . TOK_INT

    TOK_VOID    shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_INT     shift, and go to state 37
    TOK_BOOL    shift, and go to state 13
    TOK_BYTE    shift, and go to state 14
    TOK_DOUBLE  shift, and go to state 15

    baseType  go to state 38


state 13

  144 baseType: TOK_BOOL .

    $default  reduce using rule 144 (baseType)


state 14

  145 baseType: TOK_BYTE .

    $default  reduce using rule 145 (baseType)


state 15

  147 baseType: TOK_DOUBLE .

    $default  reduce using rule 147 (baseType)


state 16

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN
  141 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 39

    $default  reduce using rule 141 (type)


state 17

    2 specification: specification declaration .

    $default  reduce using rule 2 (specification)


state 18

    3 specification: specification rule .

    $default  reduce using rule 3 (specification)


state 19

    9 rule: primitive_all . TOK_ARROW rule_stmts
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 40
    TOK_PAT_OR    shift, and go to state 41
    TOK_COLON     shift, and go to state 42
    TOK_ARROW     shift, and go to state 43


state 20

   24 primitive_all: binary_event_oprs .

    $default  reduce using rule 24 (primitive_all)


state 21

   22 primitive_all: any_event .

    $default  reduce using rule 22 (primitive_all)


state 22

   21 primitive_all: normal_event .
   23              | normal_event . TOK_BITOR expression

    TOK_BITOR  shift, and go to state 44

    $default  reduce using rule 21 (primitive_all)


state 23

    8 declaration: global_decl .

    $default  reduce using rule 8 (declaration)


state 24

    7 declaration: class_proto .

    $default  reduce using rule 7 (declaration)


state 25

   98 class_proto: class_decl . semi_colon
   99            | class_decl . class_defn semi_colon

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 46

    class_defn  go to state 47
    semi_colon  go to state 48


state 26

    6 declaration: function_proto .

    $default  reduce using rule 6 (declaration)


state 27

  108 function_proto: function_decl . semi_colon
  109               | function_decl . function_defn

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 49

    function_defn  go to state 50
    semi_colon     go to state 51


state 28

    5 declaration: event_decl .

    $default  reduce using rule 5 (declaration)


state 29

   93 global_decl: type . global_l semi_colon
  120 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 52

    global_l    go to state 53
    global_var  go to state 54


state 30

  139 type: baseType .

    $default  reduce using rule 139 (type)


state 31

  140 type: intType .

    $default  reduce using rule 140 (type)


state 32

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN

    TOK_LPAREN  shift, and go to state 39


state 33

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR
   29                  | TOK_NOT primitive_all .

    $default  reduce using rule 29 (binary_event_oprs)


state 34

   25 primitive_all: TOK_LPAREN primitive_all . TOK_RPAREN
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 40
    TOK_PAT_OR    shift, and go to state 41
    TOK_COLON     shift, and go to state 42
    TOK_RPAREN    shift, and go to state 55


state 35

  100 class_decl: TOK_CLASS TOK_IDENT .

    $default  reduce using rule 100 (class_decl)


state 36

  126 event_decl: TOK_EVENT TOK_IDENT . event_param_l semi_colon

    TOK_LPAREN    shift, and go to state 56
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    event_param_l  go to state 58
    event_param    go to state 59
    type           go to state 60
    baseType       go to state 30
    intType        go to state 31


state 37

  149 intType: TOK_UNSIGNED TOK_INT .

    $default  reduce using rule 149 (intType)


state 38

  142 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 142 (type)


state 39

   31 normal_event: TOK_IDENT TOK_LPAREN . event_aparam_l TOK_RPAREN

    TOK_IDENT  shift, and go to state 61

    $default  reduce using rule 34 (event_aparam_l)

    event_aparam_l  go to state 62


state 40

   28 binary_event_oprs: primitive_all TOK_PAT_STAR .

    $default  reduce using rule 28 (binary_event_oprs)


state 41

   26 binary_event_oprs: primitive_all TOK_PAT_OR . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 32

    primitive_all      go to state 63
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 42

   27 binary_event_oprs: primitive_all TOK_COLON . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 32

    primitive_all      go to state 64
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


state 43

    9 rule: primitive_all TOK_ARROW . rule_stmts

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 68
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    rule_stmts        go to state 77
    compound_stmt2    go to state 78
    compound_stmt1    go to state 79
    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 83
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    semi_colon        go to state 87
    literal           go to state 88


state 44

   23 primitive_all: normal_event TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 89
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 45

  133 semi_colon: TOK_SEMICOLON .

    $default  reduce using rule 133 (semi_colon)


state 46

  101 class_defn: TOK_LBRACE . class_body TOK_RBRACE

    $default  reduce using rule 104 (class_body)

    class_body  go to state 90


state 47

   99 class_proto: class_decl class_defn . semi_colon

    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 91


state 48

   98 class_proto: class_decl semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 98 (class_proto)


state 49

  110 function_defn: TOK_LBRACE . function_body TOK_RBRACE semi_colon
  111              | TOK_LBRACE . function_body TOK_RBRACE

    $default  reduce using rule 114 (function_body)

    function_body  go to state 93


state 50

  109 function_proto: function_decl function_defn .

    $default  reduce using rule 109 (function_proto)


state 51

  108 function_proto: function_decl semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 108 (function_proto)


state 52

   96 global_var: TOK_IDENT .
   97           | TOK_IDENT . TOK_ASSIGN expression
  120 function_decl: type TOK_IDENT . func_param_l

    TOK_ASSIGN    shift, and go to state 94
    TOK_LPAREN    shift, and go to state 95
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    $default  reduce using rule 96 (global_var)

    func_param_l  go to state 96
    func_param    go to state 97
    type          go to state 98
    baseType      go to state 30
    intType       go to state 31


state 53

   93 global_decl: type global_l . semi_colon
   94 global_l: global_l . TOK_COMMA global_var

    TOK_COMMA      shift, and go to state 99
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 100


state 54

   95 global_l: global_var .

    $default  reduce using rule 95 (global_l)


state 55

   25 primitive_all: TOK_LPAREN primitive_all TOK_RPAREN .

    $default  reduce using rule 25 (primitive_all)


state 56

  127 event_param_l: TOK_LPAREN . event_param_l TOK_RPAREN
  130              | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 56
    TOK_RPAREN    shift, and go to state 101
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    event_param_l  go to state 102
    event_param    go to state 59
    type           go to state 60
    baseType       go to state 30
    intType        go to state 31


state 57

  141 type: TOK_IDENT .

    $default  reduce using rule 141 (type)


state 58

  126 event_decl: TOK_EVENT TOK_IDENT event_param_l . semi_colon
  128 event_param_l: event_param_l . TOK_COMMA event_param

    TOK_COMMA      shift, and go to state 103
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 104


state 59

  129 event_param_l: event_param .

    $default  reduce using rule 129 (event_param_l)


state 60

  131 event_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 105


state 61

   33 event_aparam_l: TOK_IDENT .

    $default  reduce using rule 33 (event_aparam_l)


state 62

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l . TOK_RPAREN
   32 event_aparam_l: event_aparam_l . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 106
    TOK_RPAREN  shift, and go to state 107


state 63

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all TOK_PAT_OR primitive_all .
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 40
    TOK_COLON     shift, and go to state 42

    $default  reduce using rule 26 (binary_event_oprs)


state 64

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all TOK_COLON primitive_all .
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 40

    $default  reduce using rule 27 (binary_event_oprs)


state 65

   73 unary_operation: TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 108
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 66

   72 unary_operation: TOK_BITNOT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 109
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 67

   71 unary_operation: TOK_NOT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 110
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 68

   14 compound_stmt2: TOK_LBRACE . compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE . compound_stmt2 semi_colon TOK_RBRACE
   17 compound_stmt1: TOK_LBRACE . stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 68

    $default  reduce using rule 20 (stmt_plus1)

    compound_stmt2  go to state 111
    compound_stmt1  go to state 79
    stmt_plus1      go to state 112
    semi_colon      go to state 113


state 69

   70 expression: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 114
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 70

   60 func_name: TOK_PRINT .

    $default  reduce using rule 60 (func_name)


state 71

  134 literal: TOK_UINTNUM .

    $default  reduce using rule 134 (literal)


state 72

  135 literal: TOK_DOUBLENUM .

    $default  reduce using rule 135 (literal)


state 73

  136 literal: TOK_STRCONST .

    $default  reduce using rule 136 (literal)


state 74

  137 literal: TOK_TRUE .

    $default  reduce using rule 137 (literal)


state 75

  138 literal: TOK_FALSE .

    $default  reduce using rule 138 (literal)


state 76

   59 func_name: TOK_IDENT .
   92 ref_expr: TOK_IDENT .

    TOK_LPAREN  reduce using rule 59 (func_name)
    $default    reduce using rule 92 (ref_expr)


state 77

    9 rule: primitive_all TOK_ARROW rule_stmts .

    $default  reduce using rule 9 (rule)


state 78

   10 rule_stmts: compound_stmt2 . semi_colon
   11           | compound_stmt2 .

    TOK_SEMICOLON  shift, and go to state 45

    $default  reduce using rule 11 (rule_stmts)

    semi_colon  go to state 115


state 79

   16 compound_stmt2: compound_stmt1 .

    $default  reduce using rule 16 (compound_stmt2)


state 80

   66 expression: func_invocation .

    $default  reduce using rule 66 (expression)


state 81

   57 func_invocation: func_name . TOK_LPAREN caller_param_l TOK_RPAREN
   58                | func_name . TOK_LPAREN TOK_RPAREN

    TOK_LPAREN  shift, and go to state 116


state 82

   67 expression: assignment .

    $default  reduce using rule 67 (expression)


state 83

   12 rule_stmts: expression . semi_colon
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 117
    TOK_MINUS      shift, and go to state 118
    TOK_MULT       shift, and go to state 119
    TOK_DIV        shift, and go to state 120
    TOK_MOD        shift, and go to state 121
    TOK_BITAND     shift, and go to state 122
    TOK_BITOR      shift, and go to state 123
    TOK_BITXOR     shift, and go to state 124
    TOK_SHL        shift, and go to state 125
    TOK_SHR        shift, and go to state 126
    TOK_GT         shift, and go to state 127
    TOK_LT         shift, and go to state 128
    TOK_GE         shift, and go to state 129
    TOK_LE         shift, and go to state 130
    TOK_EQ         shift, and go to state 131
    TOK_NE         shift, and go to state 132
    TOK_AND        shift, and go to state 133
    TOK_OR         shift, and go to state 134
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 135


state 84

   68 expression: unary_operation .

    $default  reduce using rule 68 (expression)


state 85

   69 expression: binary_operation .

    $default  reduce using rule 69 (expression)


state 86

   63 assignment: ref_expr . TOK_ASSIGN expression
   65 expression: ref_expr .

    TOK_ASSIGN  shift, and go to state 136

    $default  reduce using rule 65 (expression)


state 87

   13 rule_stmts: semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 13 (rule_stmts)


state 88

   64 expression: literal .

    $default  reduce using rule 64 (expression)


state 89

   23 primitive_all: normal_event TOK_BITOR expression .
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 23 (primitive_all)


state 90

  101 class_defn: TOK_LBRACE class_body . TOK_RBRACE
  102 class_body: class_body . class_var_decl
  103           | class_body . function_proto

    TOK_RBRACE    shift, and go to state 137
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    class_var_decl  go to state 138
    function_proto  go to state 139
    function_decl   go to state 27
    type            go to state 140
    baseType        go to state 30
    intType         go to state 31


state 91

   99 class_proto: class_decl class_defn semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 99 (class_proto)


state 92

  132 semi_colon: semi_colon TOK_SEMICOLON .

    $default  reduce using rule 132 (semi_colon)


state 93

  110 function_defn: TOK_LBRACE function_body . TOK_RBRACE semi_colon
  111              | TOK_LBRACE function_body . TOK_RBRACE
  112 function_body: function_body . local_decl
  113              | function_body . simple_stmt

    TOK_RBRACE    shift, and go to state 141
    TOK_IF        shift, and go to state 142
    TOK_RETURN    shift, and go to state 143
    TOK_PRINT     shift, and go to state 70
    TOK_WHILE     shift, and go to state 144
    TOK_BREAK     shift, and go to state 145
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 146

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    simple_stmt        go to state 149
    break_stmt         go to state 150
    func_invocation    go to state 151
    func_name          go to state 81
    assignment         go to state 152
    ref_expr           go to state 153
    local_decl         go to state 154
    type               go to state 155
    baseType           go to state 30
    intType            go to state 31


state 94

   97 global_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 156
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 95

  121 func_param_l: TOK_LPAREN . func_param_l TOK_RPAREN
  124             | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 95
    TOK_RPAREN    shift, and go to state 157
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    func_param_l  go to state 158
    func_param    go to state 97
    type          go to state 98
    baseType      go to state 30
    intType       go to state 31


state 96

  120 function_decl: type TOK_IDENT func_param_l .
  122 func_param_l: func_param_l . TOK_COMMA func_param

    TOK_COMMA  shift, and go to state 159

    $default  reduce using rule 120 (function_decl)


state 97

  123 func_param_l: func_param .

    $default  reduce using rule 123 (func_param_l)


state 98

  125 func_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 160


state 99

   94 global_l: global_l TOK_COMMA . global_var

    TOK_IDENT  shift, and go to state 161

    global_var  go to state 162


state 100

   93 global_decl: type global_l semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 93 (global_decl)


state 101

  130 event_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 130 (event_param_l)


state 102

  127 event_param_l: TOK_LPAREN event_param_l . TOK_RPAREN
  128              | event_param_l . TOK_COMMA event_param

    TOK_COMMA   shift, and go to state 103
    TOK_RPAREN  shift, and go to state 163


state 103

  128 event_param_l: event_param_l TOK_COMMA . event_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    event_param  go to state 164
    type         go to state 60
    baseType     go to state 30
    intType      go to state 31


state 104

  126 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 126 (event_decl)


state 105

  131 event_param: type TOK_IDENT .

    $default  reduce using rule 131 (event_param)


state 106

   32 event_aparam_l: event_aparam_l TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 165


state 107

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN .

    $default  reduce using rule 31 (normal_event)


state 108

   73 unary_operation: TOK_MINUS expression .
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    $default  reduce using rule 73 (unary_operation)


state 109

   72 unary_operation: TOK_BITNOT expression .
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 117
    TOK_MINUS  shift, and go to state 118
    TOK_MULT   shift, and go to state 119
    TOK_DIV    shift, and go to state 120
    TOK_MOD    shift, and go to state 121
    TOK_SHL    shift, and go to state 125
    TOK_SHR    shift, and go to state 126

    $default  reduce using rule 72 (unary_operation)


state 110

   71 unary_operation: TOK_NOT expression .
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132

    $default  reduce using rule 71 (unary_operation)


state 111

   14 compound_stmt2: TOK_LBRACE compound_stmt2 . TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 45
    TOK_RBRACE     shift, and go to state 166

    semi_colon  go to state 167


state 112

   17 compound_stmt1: TOK_LBRACE stmt_plus1 . TOK_RBRACE
   19 stmt_plus1: stmt_plus1 . simple_stmt

    TOK_RBRACE  shift, and go to state 168
    TOK_IF      shift, and go to state 142
    TOK_RETURN  shift, and go to state 143
    TOK_PRINT   shift, and go to state 70
    TOK_WHILE   shift, and go to state 144
    TOK_BREAK   shift, and go to state 145
    TOK_IDENT   shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    simple_stmt        go to state 169
    break_stmt         go to state 150
    func_invocation    go to state 151
    func_name          go to state 81
    assignment         go to state 152
    ref_expr           go to state 153


state 113

   18 compound_stmt1: TOK_LBRACE semi_colon . TOK_RBRACE
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92
    TOK_RBRACE     shift, and go to state 170


state 114

   70 expression: TOK_LPAREN expression . TOK_RPAREN
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134
    TOK_RPAREN  shift, and go to state 171


state 115

   10 rule_stmts: compound_stmt2 semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 10 (rule_stmts)


state 116

   57 func_invocation: func_name TOK_LPAREN . caller_param_l TOK_RPAREN
   58                | func_name TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_RPAREN     shift, and go to state 172
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    caller_param_l    go to state 173
    assignment        go to state 82
    expression        go to state 174
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 117

   87 binary_operation: expression TOK_PLUS . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 175
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 118

   88 binary_operation: expression TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 176
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 119

   89 binary_operation: expression TOK_MULT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 177
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 120

   90 binary_operation: expression TOK_DIV . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 178
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 121

   91 binary_operation: expression TOK_MOD . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 179
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 122

   84 binary_operation: expression TOK_BITAND . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 180
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 123

   82 binary_operation: expression TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 181
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 124

   83 binary_operation: expression TOK_BITXOR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 182
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 125

   85 binary_operation: expression TOK_SHL . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 183
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 126

   86 binary_operation: expression TOK_SHR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 184
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 127

   78 binary_operation: expression TOK_GT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 185
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 128

   79 binary_operation: expression TOK_LT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 186
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 129

   80 binary_operation: expression TOK_GE . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 187
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 130

   81 binary_operation: expression TOK_LE . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 188
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 131

   76 binary_operation: expression TOK_EQ . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 189
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 132

   77 binary_operation: expression TOK_NE . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 190
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 133

   75 binary_operation: expression TOK_AND . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 191
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 134

   74 binary_operation: expression TOK_OR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 192
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 135

   12 rule_stmts: expression semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 12 (rule_stmts)


state 136

   63 assignment: ref_expr TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 193
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 137

  101 class_defn: TOK_LBRACE class_body TOK_RBRACE .

    $default  reduce using rule 101 (class_defn)


state 138

  102 class_body: class_body class_var_decl .

    $default  reduce using rule 102 (class_body)


state 139

  103 class_body: class_body function_proto .

    $default  reduce using rule 103 (class_body)


state 140

  105 class_var_decl: type . class_var_l semi_colon
  120 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 194

    class_var_l  go to state 195


state 141

  110 function_defn: TOK_LBRACE function_body TOK_RBRACE . semi_colon
  111              | TOK_LBRACE function_body TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 45

    $default  reduce using rule 111 (function_defn)

    semi_colon  go to state 196


state 142

   36 if_then_else_stmt: TOK_IF . condition basic_block
   37                  | TOK_IF . condition basic_block TOK_ELSE basic_block

    TOK_LPAREN  shift, and go to state 197

    condition  go to state 198


state 143

   48 simple_stmt: TOK_RETURN . expression semi_colon
   49            | TOK_RETURN . semi_colon

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_SEMICOLON  shift, and go to state 45
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 199
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    semi_colon        go to state 200
    literal           go to state 88


state 144

   35 while_stmt: TOK_WHILE . condition basic_block

    TOK_LPAREN  shift, and go to state 197

    condition  go to state 201


state 145

   52 break_stmt: TOK_BREAK . semi_colon
   53           | TOK_BREAK . expression semi_colon

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_SEMICOLON  shift, and go to state 45
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 202
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    semi_colon        go to state 203
    literal           go to state 88


state 146

   59 func_name: TOK_IDENT .
   92 ref_expr: TOK_IDENT .
  141 type: TOK_IDENT .

    TOK_ASSIGN  reduce using rule 92 (ref_expr)
    TOK_IDENT   reduce using rule 141 (type)
    $default    reduce using rule 59 (func_name)


state 147

   50 simple_stmt: while_stmt .

    $default  reduce using rule 50 (simple_stmt)


state 148

   47 simple_stmt: if_then_else_stmt .

    $default  reduce using rule 47 (simple_stmt)


state 149

  113 function_body: function_body simple_stmt .

    $default  reduce using rule 113 (function_body)


state 150

   51 simple_stmt: break_stmt .

    $default  reduce using rule 51 (simple_stmt)


state 151

   45 simple_stmt: func_invocation . semi_colon

    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 204


state 152

   46 simple_stmt: assignment . semi_colon

    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 205


state 153

   63 assignment: ref_expr . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 136


state 154

  112 function_body: function_body local_decl .

    $default  reduce using rule 112 (function_body)


state 155

  115 local_decl: type . local_l semi_colon

    TOK_IDENT  shift, and go to state 206

    local_l    go to state 207
    local_var  go to state 208


state 156

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression
   97 global_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 97 (global_var)


state 157

  124 func_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 124 (func_param_l)


state 158

  121 func_param_l: TOK_LPAREN func_param_l . TOK_RPAREN
  122             | func_param_l . TOK_COMMA func_param

    TOK_COMMA   shift, and go to state 159
    TOK_RPAREN  shift, and go to state 209


state 159

  122 func_param_l: func_param_l TOK_COMMA . func_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    func_param  go to state 210
    type        go to state 98
    baseType    go to state 30
    intType     go to state 31


state 160

  125 func_param: type TOK_IDENT .

    $default  reduce using rule 125 (func_param)


state 161

   96 global_var: TOK_IDENT .
   97           | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 94

    $default  reduce using rule 96 (global_var)


state 162

   94 global_l: global_l TOK_COMMA global_var .

    $default  reduce using rule 94 (global_l)


state 163

  127 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN .

    $default  reduce using rule 127 (event_param_l)


state 164

  128 event_param_l: event_param_l TOK_COMMA event_param .

    $default  reduce using rule 128 (event_param_l)


state 165

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT .

    $default  reduce using rule 32 (event_aparam_l)


state 166

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE .

    $default  reduce using rule 14 (compound_stmt2)


state 167

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon . TOK_RBRACE
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92
    TOK_RBRACE     shift, and go to state 211


state 168

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE .

    $default  reduce using rule 17 (compound_stmt1)


state 169

   19 stmt_plus1: stmt_plus1 simple_stmt .

    $default  reduce using rule 19 (stmt_plus1)


state 170

   18 compound_stmt1: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 18 (compound_stmt1)


state 171

   70 expression: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 70 (expression)


state 172

   58 func_invocation: func_name TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 58 (func_invocation)


state 173

   57 func_invocation: func_name TOK_LPAREN caller_param_l . TOK_RPAREN
   61 caller_param_l: caller_param_l . TOK_COMMA expression

    TOK_COMMA   shift, and go to state 212
    TOK_RPAREN  shift, and go to state 213


state 174

   62 caller_param_l: expression .
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 62 (caller_param_l)


state 175

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   87                 | expression TOK_PLUS expression .
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 119
    TOK_DIV   shift, and go to state 120
    TOK_MOD   shift, and go to state 121

    $default  reduce using rule 87 (binary_operation)


state 176

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   88                 | expression TOK_MINUS expression .
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 119
    TOK_DIV   shift, and go to state 120
    TOK_MOD   shift, and go to state 121

    $default  reduce using rule 88 (binary_operation)


state 177

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   89                 | expression TOK_MULT expression .
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    $default  reduce using rule 89 (binary_operation)


state 178

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   90                 | expression TOK_DIV expression .
   91                 | expression . TOK_MOD expression

    $default  reduce using rule 90 (binary_operation)


state 179

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression
   91                 | expression TOK_MOD expression .

    $default  reduce using rule 91 (binary_operation)


state 180

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   84                 | expression TOK_BITAND expression .
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 117
    TOK_MINUS  shift, and go to state 118
    TOK_MULT   shift, and go to state 119
    TOK_DIV    shift, and go to state 120
    TOK_MOD    shift, and go to state 121
    TOK_SHL    shift, and go to state 125
    TOK_SHR    shift, and go to state 126

    $default  reduce using rule 84 (binary_operation)


state 181

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   82                 | expression TOK_BITOR expression .
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    $default  reduce using rule 82 (binary_operation)


state 182

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   83                 | expression TOK_BITXOR expression .
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    $default  reduce using rule 83 (binary_operation)


state 183

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   85                 | expression TOK_SHL expression .
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 117
    TOK_MINUS  shift, and go to state 118
    TOK_MULT   shift, and go to state 119
    TOK_DIV    shift, and go to state 120
    TOK_MOD    shift, and go to state 121

    $default  reduce using rule 85 (binary_operation)


state 184

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   86                 | expression TOK_SHR expression .
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 117
    TOK_MINUS  shift, and go to state 118
    TOK_MULT   shift, and go to state 119
    TOK_DIV    shift, and go to state 120
    TOK_MOD    shift, and go to state 121

    $default  reduce using rule 86 (binary_operation)


state 185

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   78                 | expression TOK_GT expression .
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 78 (binary_operation)


state 186

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   79                 | expression TOK_LT expression .
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 79 (binary_operation)


state 187

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   80                 | expression TOK_GE expression .
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 80 (binary_operation)


state 188

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   81                 | expression TOK_LE expression .
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 81 (binary_operation)


state 189

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   76                 | expression TOK_EQ expression .
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 76 (binary_operation)


state 190

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   77                 | expression TOK_NE expression .
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 77 (binary_operation)


state 191

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   75                 | expression TOK_AND expression .
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132

    $default  reduce using rule 75 (binary_operation)


state 192

   74 binary_operation: expression . TOK_OR expression
   74                 | expression TOK_OR expression .
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133

    $default  reduce using rule 74 (binary_operation)


state 193

   63 assignment: ref_expr TOK_ASSIGN expression .
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 63 (assignment)


state 194

  107 class_var_l: TOK_IDENT .
  120 function_decl: type TOK_IDENT . func_param_l

    TOK_LPAREN    shift, and go to state 95
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    $default  reduce using rule 107 (class_var_l)

    func_param_l  go to state 96
    func_param    go to state 97
    type          go to state 98
    baseType      go to state 30
    intType       go to state 31


state 195

  105 class_var_decl: type class_var_l . semi_colon
  106 class_var_l: class_var_l . TOK_COMMA TOK_IDENT

    TOK_COMMA      shift, and go to state 214
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 215


state 196

  110 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 110 (function_defn)


state 197

   56 condition: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 216
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 198

   36 if_then_else_stmt: TOK_IF condition . basic_block
   37                  | TOK_IF condition . basic_block TOK_ELSE basic_block

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 217
    TOK_IF         shift, and go to state 142
    TOK_RETURN     shift, and go to state 143
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 144
    TOK_BREAK      shift, and go to state 145
    TOK_IDENT      shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    basic_block        go to state 218
    simple_stmt        go to state 219
    break_stmt         go to state 150
    empty_block        go to state 220
    func_invocation    go to state 151
    func_name          go to state 81
    assignment         go to state 152
    ref_expr           go to state 153
    semi_colon         go to state 221


state 199

   48 simple_stmt: TOK_RETURN expression . semi_colon
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 117
    TOK_MINUS      shift, and go to state 118
    TOK_MULT       shift, and go to state 119
    TOK_DIV        shift, and go to state 120
    TOK_MOD        shift, and go to state 121
    TOK_BITAND     shift, and go to state 122
    TOK_BITOR      shift, and go to state 123
    TOK_BITXOR     shift, and go to state 124
    TOK_SHL        shift, and go to state 125
    TOK_SHR        shift, and go to state 126
    TOK_GT         shift, and go to state 127
    TOK_LT         shift, and go to state 128
    TOK_GE         shift, and go to state 129
    TOK_LE         shift, and go to state 130
    TOK_EQ         shift, and go to state 131
    TOK_NE         shift, and go to state 132
    TOK_AND        shift, and go to state 133
    TOK_OR         shift, and go to state 134
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 222


state 200

   49 simple_stmt: TOK_RETURN semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 49 (simple_stmt)


state 201

   35 while_stmt: TOK_WHILE condition . basic_block

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 217
    TOK_IF         shift, and go to state 142
    TOK_RETURN     shift, and go to state 143
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 144
    TOK_BREAK      shift, and go to state 145
    TOK_IDENT      shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    basic_block        go to state 223
    simple_stmt        go to state 219
    break_stmt         go to state 150
    empty_block        go to state 220
    func_invocation    go to state 151
    func_name          go to state 81
    assignment         go to state 152
    ref_expr           go to state 153
    semi_colon         go to state 221


state 202

   53 break_stmt: TOK_BREAK expression . semi_colon
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 117
    TOK_MINUS      shift, and go to state 118
    TOK_MULT       shift, and go to state 119
    TOK_DIV        shift, and go to state 120
    TOK_MOD        shift, and go to state 121
    TOK_BITAND     shift, and go to state 122
    TOK_BITOR      shift, and go to state 123
    TOK_BITXOR     shift, and go to state 124
    TOK_SHL        shift, and go to state 125
    TOK_SHR        shift, and go to state 126
    TOK_GT         shift, and go to state 127
    TOK_LT         shift, and go to state 128
    TOK_GE         shift, and go to state 129
    TOK_LE         shift, and go to state 130
    TOK_EQ         shift, and go to state 131
    TOK_NE         shift, and go to state 132
    TOK_AND        shift, and go to state 133
    TOK_OR         shift, and go to state 134
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 224


state 203

   52 break_stmt: TOK_BREAK semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 52 (break_stmt)


state 204

   45 simple_stmt: func_invocation semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 45 (simple_stmt)


state 205

   46 simple_stmt: assignment semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 46 (simple_stmt)


state 206

  118 local_var: TOK_IDENT .
  119          | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 225

    $default  reduce using rule 118 (local_var)


state 207

  115 local_decl: type local_l . semi_colon
  116 local_l: local_l . TOK_COMMA local_var

    TOK_COMMA      shift, and go to state 226
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 227


state 208

  117 local_l: local_var .

    $default  reduce using rule 117 (local_l)


state 209

  121 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN .

    $default  reduce using rule 121 (func_param_l)


state 210

  122 func_param_l: func_param_l TOK_COMMA func_param .

    $default  reduce using rule 122 (func_param_l)


state 211

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE .

    $default  reduce using rule 15 (compound_stmt2)


state 212

   61 caller_param_l: caller_param_l TOK_COMMA . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 228
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 213

   57 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 57 (func_invocation)


state 214

  106 class_var_l: class_var_l TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 229


state 215

  105 class_var_decl: type class_var_l semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 105 (class_var_decl)


state 216

   56 condition: TOK_LPAREN expression . TOK_RPAREN
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134
    TOK_RPAREN  shift, and go to state 230


state 217

   38 basic_block: TOK_LBRACE . stmt_plus2 TOK_RBRACE semi_colon
   39            | TOK_LBRACE . stmt_plus2 TOK_RBRACE
   54 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE semi_colon
   55            | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 45
    TOK_IF         shift, and go to state 142
    TOK_RETURN     shift, and go to state 143
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 144
    TOK_BREAK      shift, and go to state 145
    TOK_IDENT      shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    stmt_plus2         go to state 231
    simple_stmt        go to state 232
    break_stmt         go to state 150
    func_invocation    go to state 151
    func_name          go to state 81
    assignment         go to state 152
    ref_expr           go to state 153
    semi_colon         go to state 233


state 218

   36 if_then_else_stmt: TOK_IF condition basic_block .
   37                  | TOK_IF condition basic_block . TOK_ELSE basic_block

    TOK_ELSE  shift, and go to state 234

    TOK_ELSE  [reduce using rule 36 (if_then_else_stmt)]
    $default  reduce using rule 36 (if_then_else_stmt)


state 219

   41 basic_block: simple_stmt .

    $default  reduce using rule 41 (basic_block)


state 220

   40 basic_block: empty_block .

    $default  reduce using rule 40 (basic_block)


state 221

   42 basic_block: semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 42 (basic_block)


state 222

   48 simple_stmt: TOK_RETURN expression semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 48 (simple_stmt)


state 223

   35 while_stmt: TOK_WHILE condition basic_block .

    $default  reduce using rule 35 (while_stmt)


state 224

   53 break_stmt: TOK_BREAK expression semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 53 (break_stmt)


state 225

  119 local_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 235
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


state 226

  116 local_l: local_l TOK_COMMA . local_var

    TOK_IDENT  shift, and go to state 206

    local_var  go to state 236


state 227

  115 local_decl: type local_l semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 115 (local_decl)


state 228

   61 caller_param_l: caller_param_l TOK_COMMA expression .
   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 61 (caller_param_l)


state 229

  106 class_var_l: class_var_l TOK_COMMA TOK_IDENT .

    $default  reduce using rule 106 (class_var_l)


state 230

   56 condition: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 56 (condition)


state 231

   38 basic_block: TOK_LBRACE stmt_plus2 . TOK_RBRACE semi_colon
   39            | TOK_LBRACE stmt_plus2 . TOK_RBRACE
   43 stmt_plus2: stmt_plus2 . simple_stmt

    TOK_RBRACE  shift, and go to state 237
    TOK_IF      shift, and go to state 142
    TOK_RETURN  shift, and go to state 143
    TOK_PRINT   shift, and go to state 70
    TOK_WHILE   shift, and go to state 144
    TOK_BREAK   shift, and go to state 145
    TOK_IDENT   shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    simple_stmt        go to state 238
    break_stmt         go to state 150
    func_invocation    go to state 151
    func_name          go to state 81
    assignment         go to state 152
    ref_expr           go to state 153


state 232

   44 stmt_plus2: simple_stmt .

    $default  reduce using rule 44 (stmt_plus2)


state 233

   54 empty_block: TOK_LBRACE semi_colon . TOK_RBRACE semi_colon
   55            | TOK_LBRACE semi_colon . TOK_RBRACE
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92
    TOK_RBRACE     shift, and go to state 239


state 234

   37 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE . basic_block

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 217
    TOK_IF         shift, and go to state 142
    TOK_RETURN     shift, and go to state 143
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 144
    TOK_BREAK      shift, and go to state 145
    TOK_IDENT      shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    basic_block        go to state 240
    simple_stmt        go to state 219
    break_stmt         go to state 150
    empty_block        go to state 220
    func_invocation    go to state 151
    func_name          go to state 81
    assignment         go to state 152
    ref_expr           go to state 153
    semi_colon         go to state 221


state 235

   74 binary_operation: expression . TOK_OR expression
   75                 | expression . TOK_AND expression
   76                 | expression . TOK_EQ expression
   77                 | expression . TOK_NE expression
   78                 | expression . TOK_GT expression
   79                 | expression . TOK_LT expression
   80                 | expression . TOK_GE expression
   81                 | expression . TOK_LE expression
   82                 | expression . TOK_BITOR expression
   83                 | expression . TOK_BITXOR expression
   84                 | expression . TOK_BITAND expression
   85                 | expression . TOK_SHL expression
   86                 | expression . TOK_SHR expression
   87                 | expression . TOK_PLUS expression
   88                 | expression . TOK_MINUS expression
   89                 | expression . TOK_MULT expression
   90                 | expression . TOK_DIV expression
   91                 | expression . TOK_MOD expression
  119 local_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 119 (local_var)


state 236

  116 local_l: local_l TOK_COMMA local_var .

    $default  reduce using rule 116 (local_l)


state 237

   38 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE . semi_colon
   39            | TOK_LBRACE stmt_plus2 TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 45

    $default  reduce using rule 39 (basic_block)

    semi_colon  go to state 241


state 238

   43 stmt_plus2: stmt_plus2 simple_stmt .

    $default  reduce using rule 43 (stmt_plus2)


state 239

   54 empty_block: TOK_LBRACE semi_colon TOK_RBRACE . semi_colon
   55            | TOK_LBRACE semi_colon TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 45

    $default  reduce using rule 55 (empty_block)

    semi_colon  go to state 242


state 240

   37 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE basic_block .

    $default  reduce using rule 37 (if_then_else_stmt)


state 241

   38 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 38 (basic_block)


state 242

   54 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon .
  132 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 54 (empty_block)
