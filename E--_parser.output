Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_QMARK
   TOK_LBRACK
   TOK_RBRACK
   TOK_SHORT
   TOK_LONG
   TOK_BIT
   TOK_ENUM
   TOK_DOUBLE_COLON
   TOK_DOT


State 201 conflicts: 1 shift/reduce


Grammar

    0 $accept: s_specification $end

    1 s_specification: specification

    2 specification: specification declaration
    3              | specification rule
    4              | %empty

    5 declaration: event_decl
    6            | function_proto
    7            | class_decl
    8            | global_decl

    9 rule: primitive_all TOK_ARROW rule_stmts

   10 rule_stmts: compound_stmt2 semi_colon
   11           | compound_stmt2
   12           | expression semi_colon
   13           | semi_colon

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE
   16               | compound_stmt1

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE semi_colon TOK_RBRACE

   19 stmt_plus1: stmt_plus1 simple_stmt
   20           | %empty

   21 primitive_all: normal_event
   22              | any_event
   23              | normal_event TOK_BITOR expression
   24              | binary_event_oprs
   25              | TOK_LPAREN primitive_all TOK_RPAREN

   26 binary_event_oprs: primitive_all TOK_PAT_OR primitive_all
   27                  | primitive_all TOK_COLON primitive_all
   28                  | primitive_all TOK_PAT_STAR
   29                  | TOK_NOT primitive_all

   30 any_event: TOK_ANY

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT
   33               | TOK_IDENT
   34               | %empty

   35 while_stmt: TOK_WHILE condition while_body

   36 while_body: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon
   37           | TOK_LBRACE stmt_plus2 TOK_RBRACE
   38           | empty_block
   39           | simple_stmt
   40           | semi_colon
   41           | TOK_BREAK

   42 if_then_else_stmt: TOK_IF condition basic_block
   43                  | TOK_IF condition basic_block TOK_ELSE basic_block

   44 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon
   45            | TOK_LBRACE stmt_plus2 TOK_RBRACE
   46            | empty_block
   47            | simple_stmt
   48            | semi_colon

   49 stmt_plus2: stmt_plus2 simple_stmt
   50           | %empty

   51 simple_stmt: func_invocation semi_colon
   52            | assignment semi_colon
   53            | if_then_else_stmt
   54            | TOK_RETURN expression semi_colon
   55            | TOK_RETURN semi_colon
   56            | while_stmt

   57 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon
   58            | TOK_LBRACE semi_colon TOK_RBRACE

   59 condition: TOK_LPAREN expression TOK_RPAREN

   60 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN
   61                | func_name TOK_LPAREN TOK_RPAREN

   62 func_name: TOK_IDENT
   63          | TOK_PRINT

   64 caller_param_l: caller_param_l TOK_COMMA expression
   65               | expression

   66 assignment: ref_expr TOK_ASSIGN expression

   67 expression: literal
   68           | ref_expr
   69           | func_invocation
   70           | assignment
   71           | unary_operation
   72           | binary_operation
   73           | TOK_LPAREN expression TOK_RPAREN

   74 unary_operation: TOK_NOT expression
   75                | TOK_BITNOT expression
   76                | TOK_MINUS expression

   77 binary_operation: expression TOK_OR expression
   78                 | expression TOK_AND expression
   79                 | expression TOK_EQ expression
   80                 | expression TOK_NE expression
   81                 | expression TOK_GT expression
   82                 | expression TOK_LT expression
   83                 | expression TOK_GE expression
   84                 | expression TOK_LE expression
   85                 | expression TOK_BITOR expression
   86                 | expression TOK_BITXOR expression
   87                 | expression TOK_BITAND expression
   88                 | expression TOK_SHL expression
   89                 | expression TOK_SHR expression
   90                 | expression TOK_PLUS expression
   91                 | expression TOK_MINUS expression
   92                 | expression TOK_MULT expression
   93                 | expression TOK_DIV expression
   94                 | expression TOK_MOD expression

   95 ref_expr: TOK_IDENT

   96 global_decl: type global_l semi_colon

   97 global_l: global_l TOK_COMMA global_var
   98         | global_var

   99 global_var: TOK_IDENT
  100           | TOK_IDENT TOK_ASSIGN expression

  101 class_decl: TOK_CLASS TOK_IDENT semi_colon

  102 function_proto: function_decl semi_colon
  103               | function_decl function_defn

  104 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon
  105              | TOK_LBRACE function_body TOK_RBRACE

  106 function_body: function_body local_decl
  107              | function_body simple_stmt
  108              | %empty

  109 local_decl: type local_l semi_colon

  110 local_l: local_l TOK_COMMA local_var
  111        | local_var

  112 local_var: TOK_IDENT
  113          | TOK_IDENT TOK_ASSIGN expression

  114 function_decl: type TOK_IDENT func_param_l

  115 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN
  116             | func_param_l TOK_COMMA func_param
  117             | func_param
  118             | TOK_LPAREN TOK_RPAREN

  119 func_param: type TOK_IDENT

  120 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon

  121 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN
  122              | event_param_l TOK_COMMA event_param
  123              | event_param
  124              | TOK_LPAREN TOK_RPAREN

  125 event_param: type TOK_IDENT

  126 semi_colon: semi_colon TOK_SEMICOLON
  127           | TOK_SEMICOLON

  128 literal: TOK_UINTNUM
  129        | TOK_DOUBLENUM
  130        | TOK_STRCONST
  131        | TOK_TRUE
  132        | TOK_FALSE

  133 type: baseType
  134     | intType
  135     | TOK_IDENT
  136     | TOK_UNSIGNED baseType

  137 baseType: TOK_VOID
  138         | TOK_BOOL
  139         | TOK_BYTE
  140         | TOK_STRING
  141         | TOK_DOUBLE

  142 intType: TOK_INT
  143        | TOK_UNSIGNED TOK_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 28
TOK_PAT_OR (260) 26
TOK_PAT_NOT (261)
TOK_PLUS (262) 90
TOK_MINUS (263) 76 91
TOK_UMINUS (264)
TOK_MULT (265) 92
TOK_DIV (266) 93
TOK_MOD (267) 94
TOK_BITAND (268) 87
TOK_BITOR (269) 23 85
TOK_BITNOT (270) 75
TOK_BITXOR (271) 86
TOK_SHL (272) 88
TOK_SHR (273) 89
TOK_GT (274) 81
TOK_LT (275) 82
TOK_GE (276) 83
TOK_LE (277) 84
TOK_EQ (278) 79
TOK_NE (279) 80
TOK_AND (280) 78
TOK_OR (281) 77
TOK_NOT (282) 29 74
TOK_COMMA (283) 32 64 97 110 116 122
TOK_ASSIGN (284) 66 100 113
TOK_SEMICOLON (285) 126 127
TOK_COLON (286) 27
TOK_ARROW (287) 9
TOK_QMARK (288)
TOK_LBRACE (289) 14 15 17 18 36 37 44 45 57 58 104 105
TOK_RBRACE (290) 14 15 17 18 36 37 44 45 57 58 104 105
TOK_LPAREN (291) 25 31 59 60 61 73 115 118 121 124
TOK_RPAREN (292) 25 31 59 60 61 73 115 118 121 124
TOK_LBRACK (293)
TOK_RBRACK (294)
TOK_IF (295) 42 43
TOK_ELSE (296) 43
TOK_CLASS (297) 101
TOK_RETURN (298) 54 55
TOK_EVENT (299) 120
TOK_ANY (300) 30
TOK_PRINT (301) 63
TOK_WHILE (302) 35
TOK_BREAK (303) 41
TOK_UINTNUM (304) 128
TOK_DOUBLENUM (305) 129
TOK_VOID (306) 137
TOK_STRING (307) 140
TOK_STRCONST (308) 130
TOK_INT (309) 142 143
TOK_UNSIGNED (310) 136 143
TOK_BOOL (311) 138
TOK_BYTE (312) 139
TOK_DOUBLE (313) 141
TOK_SHORT (314)
TOK_LONG (315)
TOK_BIT (316)
TOK_ENUM (317)
TOK_TRUE (318) 131
TOK_FALSE (319) 132
TOK_IDENT (320) 31 32 33 62 95 99 100 101 112 113 114 119 120 125 135
TOK_DOUBLE_COLON (321)
TOK_DOT (322)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
s_specification (69)
    on left: 1, on right: 0
specification (70)
    on left: 2 3 4, on right: 1 2 3
declaration (71)
    on left: 5 6 7 8, on right: 2
rule (72)
    on left: 9, on right: 3
rule_stmts (73)
    on left: 10 11 12 13, on right: 9
compound_stmt2 (74)
    on left: 14 15 16, on right: 10 11 14 15
compound_stmt1 (75)
    on left: 17 18, on right: 16
stmt_plus1 (76)
    on left: 19 20, on right: 17 19
primitive_all (77)
    on left: 21 22 23 24 25, on right: 9 25 26 27 28 29
binary_event_oprs (78)
    on left: 26 27 28 29, on right: 24
any_event (79)
    on left: 30, on right: 22
normal_event (80)
    on left: 31, on right: 21 23
event_aparam_l (81)
    on left: 32 33 34, on right: 31 32
while_stmt (82)
    on left: 35, on right: 56
while_body (83)
    on left: 36 37 38 39 40 41, on right: 35
if_then_else_stmt (84)
    on left: 42 43, on right: 53
basic_block (85)
    on left: 44 45 46 47 48, on right: 42 43
stmt_plus2 (86)
    on left: 49 50, on right: 36 37 44 45 49
simple_stmt (87)
    on left: 51 52 53 54 55 56, on right: 19 39 47 49 107
empty_block (88)
    on left: 57 58, on right: 38 46
condition (89)
    on left: 59, on right: 35 42 43
func_invocation (90)
    on left: 60 61, on right: 51 69
func_name (91)
    on left: 62 63, on right: 60 61
caller_param_l (92)
    on left: 64 65, on right: 60 64
assignment (93)
    on left: 66, on right: 52 70
expression (94)
    on left: 67 68 69 70 71 72 73, on right: 12 23 54 59 64 65 66 73
    74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94
    100 113
unary_operation (95)
    on left: 74 75 76, on right: 71
binary_operation (96)
    on left: 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94,
    on right: 72
ref_expr (97)
    on left: 95, on right: 66 68
global_decl (98)
    on left: 96, on right: 8
global_l (99)
    on left: 97 98, on right: 96 97
global_var (100)
    on left: 99 100, on right: 97 98
class_decl (101)
    on left: 101, on right: 7
function_proto (102)
    on left: 102 103, on right: 6
function_defn (103)
    on left: 104 105, on right: 103
function_body (104)
    on left: 106 107 108, on right: 104 105 106 107
local_decl (105)
    on left: 109, on right: 106
local_l (106)
    on left: 110 111, on right: 109 110
local_var (107)
    on left: 112 113, on right: 110 111
function_decl (108)
    on left: 114, on right: 102 103
func_param_l (109)
    on left: 115 116 117 118, on right: 114 115 116
func_param (110)
    on left: 119, on right: 116 117
event_decl (111)
    on left: 120, on right: 5
event_param_l (112)
    on left: 121 122 123 124, on right: 120 121 122
event_param (113)
    on left: 125, on right: 122 123
semi_colon (114)
    on left: 126 127, on right: 10 12 13 15 18 36 40 44 48 51 52 54
    55 57 58 96 101 102 104 109 120 126
literal (115)
    on left: 128 129 130 131 132, on right: 67
type (116)
    on left: 133 134 135 136, on right: 96 109 114 119 125
baseType (117)
    on left: 137 138 139 140 141, on right: 133 136
intType (118)
    on left: 142 143, on right: 134


State 0

    0 $accept: . s_specification $end

    $default  reduce using rule 4 (specification)

    s_specification  go to state 1
    specification    go to state 2


State 1

    0 $accept: s_specification . $end

    $end  shift, and go to state 3


State 2

    1 s_specification: specification .
    2 specification: specification . declaration
    3              | specification . rule

    TOK_NOT       shift, and go to state 4
    TOK_LPAREN    shift, and go to state 5
    TOK_CLASS     shift, and go to state 6
    TOK_EVENT     shift, and go to state 7
    TOK_ANY       shift, and go to state 8
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 16

    $default  reduce using rule 1 (s_specification)

    declaration        go to state 17
    rule               go to state 18
    primitive_all      go to state 19
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22
    global_decl        go to state 23
    class_decl         go to state 24
    function_proto     go to state 25
    function_decl      go to state 26
    event_decl         go to state 27
    type               go to state 28
    baseType           go to state 29
    intType            go to state 30


State 3

    0 $accept: s_specification $end .

    $default  accept


State 4

   29 binary_event_oprs: TOK_NOT . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 32
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


State 5

   25 primitive_all: TOK_LPAREN . primitive_all TOK_RPAREN

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 33
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


State 6

  101 class_decl: TOK_CLASS . TOK_IDENT semi_colon

    TOK_IDENT  shift, and go to state 34


State 7

  120 event_decl: TOK_EVENT . TOK_IDENT event_param_l semi_colon

    TOK_IDENT  shift, and go to state 35


State 8

   30 any_event: TOK_ANY .

    $default  reduce using rule 30 (any_event)


State 9

  137 baseType: TOK_VOID .

    $default  reduce using rule 137 (baseType)


State 10

  140 baseType: TOK_STRING .

    $default  reduce using rule 140 (baseType)


State 11

  142 intType: TOK_INT .

    $default  reduce using rule 142 (intType)


State 12

  136 type: TOK_UNSIGNED . baseType
  143 intType: TOK_UNSIGNED . TOK_INT

    TOK_VOID    shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_INT     shift, and go to state 36
    TOK_BOOL    shift, and go to state 13
    TOK_BYTE    shift, and go to state 14
    TOK_DOUBLE  shift, and go to state 15

    baseType  go to state 37


State 13

  138 baseType: TOK_BOOL .

    $default  reduce using rule 138 (baseType)


State 14

  139 baseType: TOK_BYTE .

    $default  reduce using rule 139 (baseType)


State 15

  141 baseType: TOK_DOUBLE .

    $default  reduce using rule 141 (baseType)


State 16

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN
  135 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 38

    $default  reduce using rule 135 (type)


State 17

    2 specification: specification declaration .

    $default  reduce using rule 2 (specification)


State 18

    3 specification: specification rule .

    $default  reduce using rule 3 (specification)


State 19

    9 rule: primitive_all . TOK_ARROW rule_stmts
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39
    TOK_PAT_OR    shift, and go to state 40
    TOK_COLON     shift, and go to state 41
    TOK_ARROW     shift, and go to state 42


State 20

   24 primitive_all: binary_event_oprs .

    $default  reduce using rule 24 (primitive_all)


State 21

   22 primitive_all: any_event .

    $default  reduce using rule 22 (primitive_all)


State 22

   21 primitive_all: normal_event .
   23              | normal_event . TOK_BITOR expression

    TOK_BITOR  shift, and go to state 43

    $default  reduce using rule 21 (primitive_all)


State 23

    8 declaration: global_decl .

    $default  reduce using rule 8 (declaration)


State 24

    7 declaration: class_decl .

    $default  reduce using rule 7 (declaration)


State 25

    6 declaration: function_proto .

    $default  reduce using rule 6 (declaration)


State 26

  102 function_proto: function_decl . semi_colon
  103               | function_decl . function_defn

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 45

    function_defn  go to state 46
    semi_colon     go to state 47


State 27

    5 declaration: event_decl .

    $default  reduce using rule 5 (declaration)


State 28

   96 global_decl: type . global_l semi_colon
  114 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 48

    global_l    go to state 49
    global_var  go to state 50


State 29

  133 type: baseType .

    $default  reduce using rule 133 (type)


State 30

  134 type: intType .

    $default  reduce using rule 134 (type)


State 31

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN

    TOK_LPAREN  shift, and go to state 38


State 32

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR
   29                  | TOK_NOT primitive_all .

    $default  reduce using rule 29 (binary_event_oprs)


State 33

   25 primitive_all: TOK_LPAREN primitive_all . TOK_RPAREN
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39
    TOK_PAT_OR    shift, and go to state 40
    TOK_COLON     shift, and go to state 41
    TOK_RPAREN    shift, and go to state 51


State 34

  101 class_decl: TOK_CLASS TOK_IDENT . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 52


State 35

  120 event_decl: TOK_EVENT TOK_IDENT . event_param_l semi_colon

    TOK_LPAREN    shift, and go to state 53
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    event_param_l  go to state 55
    event_param    go to state 56
    type           go to state 57
    baseType       go to state 29
    intType        go to state 30


State 36

  143 intType: TOK_UNSIGNED TOK_INT .

    $default  reduce using rule 143 (intType)


State 37

  136 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 136 (type)


State 38

   31 normal_event: TOK_IDENT TOK_LPAREN . event_aparam_l TOK_RPAREN

    TOK_IDENT  shift, and go to state 58

    $default  reduce using rule 34 (event_aparam_l)

    event_aparam_l  go to state 59


State 39

   28 binary_event_oprs: primitive_all TOK_PAT_STAR .

    $default  reduce using rule 28 (binary_event_oprs)


State 40

   26 binary_event_oprs: primitive_all TOK_PAT_OR . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 60
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


State 41

   27 binary_event_oprs: primitive_all TOK_COLON . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 61
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


State 42

    9 rule: primitive_all TOK_ARROW . rule_stmts

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 65
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    rule_stmts        go to state 74
    compound_stmt2    go to state 75
    compound_stmt1    go to state 76
    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 80
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    semi_colon        go to state 84
    literal           go to state 85


State 43

   23 primitive_all: normal_event TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 86
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 44

  127 semi_colon: TOK_SEMICOLON .

    $default  reduce using rule 127 (semi_colon)


State 45

  104 function_defn: TOK_LBRACE . function_body TOK_RBRACE semi_colon
  105              | TOK_LBRACE . function_body TOK_RBRACE

    $default  reduce using rule 108 (function_body)

    function_body  go to state 87


State 46

  103 function_proto: function_decl function_defn .

    $default  reduce using rule 103 (function_proto)


State 47

  102 function_proto: function_decl semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 102 (function_proto)


State 48

   99 global_var: TOK_IDENT .
  100           | TOK_IDENT . TOK_ASSIGN expression
  114 function_decl: type TOK_IDENT . func_param_l

    TOK_ASSIGN    shift, and go to state 89
    TOK_LPAREN    shift, and go to state 90
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    $default  reduce using rule 99 (global_var)

    func_param_l  go to state 91
    func_param    go to state 92
    type          go to state 93
    baseType      go to state 29
    intType       go to state 30


State 49

   96 global_decl: type global_l . semi_colon
   97 global_l: global_l . TOK_COMMA global_var

    TOK_COMMA      shift, and go to state 94
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 95


State 50

   98 global_l: global_var .

    $default  reduce using rule 98 (global_l)


State 51

   25 primitive_all: TOK_LPAREN primitive_all TOK_RPAREN .

    $default  reduce using rule 25 (primitive_all)


State 52

  101 class_decl: TOK_CLASS TOK_IDENT semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 101 (class_decl)


State 53

  121 event_param_l: TOK_LPAREN . event_param_l TOK_RPAREN
  124              | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 53
    TOK_RPAREN    shift, and go to state 96
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    event_param_l  go to state 97
    event_param    go to state 56
    type           go to state 57
    baseType       go to state 29
    intType        go to state 30


State 54

  135 type: TOK_IDENT .

    $default  reduce using rule 135 (type)


State 55

  120 event_decl: TOK_EVENT TOK_IDENT event_param_l . semi_colon
  122 event_param_l: event_param_l . TOK_COMMA event_param

    TOK_COMMA      shift, and go to state 98
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 99


State 56

  123 event_param_l: event_param .

    $default  reduce using rule 123 (event_param_l)


State 57

  125 event_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 100


State 58

   33 event_aparam_l: TOK_IDENT .

    $default  reduce using rule 33 (event_aparam_l)


State 59

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l . TOK_RPAREN
   32 event_aparam_l: event_aparam_l . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 101
    TOK_RPAREN  shift, and go to state 102


State 60

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all TOK_PAT_OR primitive_all .
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39
    TOK_COLON     shift, and go to state 41

    $default  reduce using rule 26 (binary_event_oprs)


State 61

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all TOK_COLON primitive_all .
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 39

    $default  reduce using rule 27 (binary_event_oprs)


State 62

   76 unary_operation: TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 103
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 63

   75 unary_operation: TOK_BITNOT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 104
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 64

   74 unary_operation: TOK_NOT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 105
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 65

   14 compound_stmt2: TOK_LBRACE . compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE . compound_stmt2 semi_colon TOK_RBRACE
   17 compound_stmt1: TOK_LBRACE . stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 65

    $default  reduce using rule 20 (stmt_plus1)

    compound_stmt2  go to state 106
    compound_stmt1  go to state 76
    stmt_plus1      go to state 107
    semi_colon      go to state 108


State 66

   73 expression: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 109
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 67

   63 func_name: TOK_PRINT .

    $default  reduce using rule 63 (func_name)


State 68

  128 literal: TOK_UINTNUM .

    $default  reduce using rule 128 (literal)


State 69

  129 literal: TOK_DOUBLENUM .

    $default  reduce using rule 129 (literal)


State 70

  130 literal: TOK_STRCONST .

    $default  reduce using rule 130 (literal)


State 71

  131 literal: TOK_TRUE .

    $default  reduce using rule 131 (literal)


State 72

  132 literal: TOK_FALSE .

    $default  reduce using rule 132 (literal)


State 73

   62 func_name: TOK_IDENT .
   95 ref_expr: TOK_IDENT .

    TOK_LPAREN  reduce using rule 62 (func_name)
    $default    reduce using rule 95 (ref_expr)


State 74

    9 rule: primitive_all TOK_ARROW rule_stmts .

    $default  reduce using rule 9 (rule)


State 75

   10 rule_stmts: compound_stmt2 . semi_colon
   11           | compound_stmt2 .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 11 (rule_stmts)

    semi_colon  go to state 110


State 76

   16 compound_stmt2: compound_stmt1 .

    $default  reduce using rule 16 (compound_stmt2)


State 77

   69 expression: func_invocation .

    $default  reduce using rule 69 (expression)


State 78

   60 func_invocation: func_name . TOK_LPAREN caller_param_l TOK_RPAREN
   61                | func_name . TOK_LPAREN TOK_RPAREN

    TOK_LPAREN  shift, and go to state 111


State 79

   70 expression: assignment .

    $default  reduce using rule 70 (expression)


State 80

   12 rule_stmts: expression . semi_colon
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 112
    TOK_MINUS      shift, and go to state 113
    TOK_MULT       shift, and go to state 114
    TOK_DIV        shift, and go to state 115
    TOK_MOD        shift, and go to state 116
    TOK_BITAND     shift, and go to state 117
    TOK_BITOR      shift, and go to state 118
    TOK_BITXOR     shift, and go to state 119
    TOK_SHL        shift, and go to state 120
    TOK_SHR        shift, and go to state 121
    TOK_GT         shift, and go to state 122
    TOK_LT         shift, and go to state 123
    TOK_GE         shift, and go to state 124
    TOK_LE         shift, and go to state 125
    TOK_EQ         shift, and go to state 126
    TOK_NE         shift, and go to state 127
    TOK_AND        shift, and go to state 128
    TOK_OR         shift, and go to state 129
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 130


State 81

   71 expression: unary_operation .

    $default  reduce using rule 71 (expression)


State 82

   72 expression: binary_operation .

    $default  reduce using rule 72 (expression)


State 83

   66 assignment: ref_expr . TOK_ASSIGN expression
   68 expression: ref_expr .

    TOK_ASSIGN  shift, and go to state 131

    $default  reduce using rule 68 (expression)


State 84

   13 rule_stmts: semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 13 (rule_stmts)


State 85

   67 expression: literal .

    $default  reduce using rule 67 (expression)


State 86

   23 primitive_all: normal_event TOK_BITOR expression .
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 23 (primitive_all)


State 87

  104 function_defn: TOK_LBRACE function_body . TOK_RBRACE semi_colon
  105              | TOK_LBRACE function_body . TOK_RBRACE
  106 function_body: function_body . local_decl
  107              | function_body . simple_stmt

    TOK_RBRACE    shift, and go to state 132
    TOK_IF        shift, and go to state 133
    TOK_RETURN    shift, and go to state 134
    TOK_PRINT     shift, and go to state 67
    TOK_WHILE     shift, and go to state 135
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 136

    while_stmt         go to state 137
    if_then_else_stmt  go to state 138
    simple_stmt        go to state 139
    func_invocation    go to state 140
    func_name          go to state 78
    assignment         go to state 141
    ref_expr           go to state 142
    local_decl         go to state 143
    type               go to state 144
    baseType           go to state 29
    intType            go to state 30


State 88

  126 semi_colon: semi_colon TOK_SEMICOLON .

    $default  reduce using rule 126 (semi_colon)


State 89

  100 global_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 145
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 90

  115 func_param_l: TOK_LPAREN . func_param_l TOK_RPAREN
  118             | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 90
    TOK_RPAREN    shift, and go to state 146
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    func_param_l  go to state 147
    func_param    go to state 92
    type          go to state 93
    baseType      go to state 29
    intType       go to state 30


State 91

  114 function_decl: type TOK_IDENT func_param_l .
  116 func_param_l: func_param_l . TOK_COMMA func_param

    TOK_COMMA  shift, and go to state 148

    $default  reduce using rule 114 (function_decl)


State 92

  117 func_param_l: func_param .

    $default  reduce using rule 117 (func_param_l)


State 93

  119 func_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 149


State 94

   97 global_l: global_l TOK_COMMA . global_var

    TOK_IDENT  shift, and go to state 150

    global_var  go to state 151


State 95

   96 global_decl: type global_l semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 96 (global_decl)


State 96

  124 event_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 124 (event_param_l)


State 97

  121 event_param_l: TOK_LPAREN event_param_l . TOK_RPAREN
  122              | event_param_l . TOK_COMMA event_param

    TOK_COMMA   shift, and go to state 98
    TOK_RPAREN  shift, and go to state 152


State 98

  122 event_param_l: event_param_l TOK_COMMA . event_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    event_param  go to state 153
    type         go to state 57
    baseType     go to state 29
    intType      go to state 30


State 99

  120 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 120 (event_decl)


State 100

  125 event_param: type TOK_IDENT .

    $default  reduce using rule 125 (event_param)


State 101

   32 event_aparam_l: event_aparam_l TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 154


State 102

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN .

    $default  reduce using rule 31 (normal_event)


State 103

   76 unary_operation: TOK_MINUS expression .
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    $default  reduce using rule 76 (unary_operation)


State 104

   75 unary_operation: TOK_BITNOT expression .
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116
    TOK_SHL    shift, and go to state 120
    TOK_SHR    shift, and go to state 121

    $default  reduce using rule 75 (unary_operation)


State 105

   74 unary_operation: TOK_NOT expression .
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127

    $default  reduce using rule 74 (unary_operation)


State 106

   14 compound_stmt2: TOK_LBRACE compound_stmt2 . TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44
    TOK_RBRACE     shift, and go to state 155

    semi_colon  go to state 156


State 107

   17 compound_stmt1: TOK_LBRACE stmt_plus1 . TOK_RBRACE
   19 stmt_plus1: stmt_plus1 . simple_stmt

    TOK_RBRACE  shift, and go to state 157
    TOK_IF      shift, and go to state 133
    TOK_RETURN  shift, and go to state 134
    TOK_PRINT   shift, and go to state 67
    TOK_WHILE   shift, and go to state 135
    TOK_IDENT   shift, and go to state 73

    while_stmt         go to state 137
    if_then_else_stmt  go to state 138
    simple_stmt        go to state 158
    func_invocation    go to state 140
    func_name          go to state 78
    assignment         go to state 141
    ref_expr           go to state 142


State 108

   18 compound_stmt1: TOK_LBRACE semi_colon . TOK_RBRACE
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88
    TOK_RBRACE     shift, and go to state 159


State 109

   73 expression: TOK_LPAREN expression . TOK_RPAREN
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129
    TOK_RPAREN  shift, and go to state 160


State 110

   10 rule_stmts: compound_stmt2 semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 10 (rule_stmts)


State 111

   60 func_invocation: func_name TOK_LPAREN . caller_param_l TOK_RPAREN
   61                | func_name TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_RPAREN     shift, and go to state 161
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    caller_param_l    go to state 162
    assignment        go to state 79
    expression        go to state 163
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 112

   90 binary_operation: expression TOK_PLUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 164
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 113

   91 binary_operation: expression TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 165
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 114

   92 binary_operation: expression TOK_MULT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 166
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 115

   93 binary_operation: expression TOK_DIV . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 167
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 116

   94 binary_operation: expression TOK_MOD . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 168
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 117

   87 binary_operation: expression TOK_BITAND . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 169
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 118

   85 binary_operation: expression TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 170
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 119

   86 binary_operation: expression TOK_BITXOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 171
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 120

   88 binary_operation: expression TOK_SHL . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 172
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 121

   89 binary_operation: expression TOK_SHR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 173
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 122

   81 binary_operation: expression TOK_GT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 174
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 123

   82 binary_operation: expression TOK_LT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 175
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 124

   83 binary_operation: expression TOK_GE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 176
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 125

   84 binary_operation: expression TOK_LE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 177
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 126

   79 binary_operation: expression TOK_EQ . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 178
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 127

   80 binary_operation: expression TOK_NE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 179
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 128

   78 binary_operation: expression TOK_AND . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 180
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 129

   77 binary_operation: expression TOK_OR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 181
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 130

   12 rule_stmts: expression semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 12 (rule_stmts)


State 131

   66 assignment: ref_expr TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 182
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 132

  104 function_defn: TOK_LBRACE function_body TOK_RBRACE . semi_colon
  105              | TOK_LBRACE function_body TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 105 (function_defn)

    semi_colon  go to state 183


State 133

   42 if_then_else_stmt: TOK_IF . condition basic_block
   43                  | TOK_IF . condition basic_block TOK_ELSE basic_block

    TOK_LPAREN  shift, and go to state 184

    condition  go to state 185


State 134

   54 simple_stmt: TOK_RETURN . expression semi_colon
   55            | TOK_RETURN . semi_colon

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_SEMICOLON  shift, and go to state 44
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 186
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    semi_colon        go to state 187
    literal           go to state 85


State 135

   35 while_stmt: TOK_WHILE . condition while_body

    TOK_LPAREN  shift, and go to state 184

    condition  go to state 188


State 136

   62 func_name: TOK_IDENT .
   95 ref_expr: TOK_IDENT .
  135 type: TOK_IDENT .

    TOK_ASSIGN  reduce using rule 95 (ref_expr)
    TOK_IDENT   reduce using rule 135 (type)
    $default    reduce using rule 62 (func_name)


State 137

   56 simple_stmt: while_stmt .

    $default  reduce using rule 56 (simple_stmt)


State 138

   53 simple_stmt: if_then_else_stmt .

    $default  reduce using rule 53 (simple_stmt)


State 139

  107 function_body: function_body simple_stmt .

    $default  reduce using rule 107 (function_body)


State 140

   51 simple_stmt: func_invocation . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 189


State 141

   52 simple_stmt: assignment . semi_colon

    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 190


State 142

   66 assignment: ref_expr . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 131


State 143

  106 function_body: function_body local_decl .

    $default  reduce using rule 106 (function_body)


State 144

  109 local_decl: type . local_l semi_colon

    TOK_IDENT  shift, and go to state 191

    local_l    go to state 192
    local_var  go to state 193


State 145

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression
  100 global_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 100 (global_var)


State 146

  118 func_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 118 (func_param_l)


State 147

  115 func_param_l: TOK_LPAREN func_param_l . TOK_RPAREN
  116             | func_param_l . TOK_COMMA func_param

    TOK_COMMA   shift, and go to state 148
    TOK_RPAREN  shift, and go to state 194


State 148

  116 func_param_l: func_param_l TOK_COMMA . func_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 54

    func_param  go to state 195
    type        go to state 93
    baseType    go to state 29
    intType     go to state 30


State 149

  119 func_param: type TOK_IDENT .

    $default  reduce using rule 119 (func_param)


State 150

   99 global_var: TOK_IDENT .
  100           | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 89

    $default  reduce using rule 99 (global_var)


State 151

   97 global_l: global_l TOK_COMMA global_var .

    $default  reduce using rule 97 (global_l)


State 152

  121 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN .

    $default  reduce using rule 121 (event_param_l)


State 153

  122 event_param_l: event_param_l TOK_COMMA event_param .

    $default  reduce using rule 122 (event_param_l)


State 154

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT .

    $default  reduce using rule 32 (event_aparam_l)


State 155

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE .

    $default  reduce using rule 14 (compound_stmt2)


State 156

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon . TOK_RBRACE
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88
    TOK_RBRACE     shift, and go to state 196


State 157

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE .

    $default  reduce using rule 17 (compound_stmt1)


State 158

   19 stmt_plus1: stmt_plus1 simple_stmt .

    $default  reduce using rule 19 (stmt_plus1)


State 159

   18 compound_stmt1: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 18 (compound_stmt1)


State 160

   73 expression: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 73 (expression)


State 161

   61 func_invocation: func_name TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 61 (func_invocation)


State 162

   60 func_invocation: func_name TOK_LPAREN caller_param_l . TOK_RPAREN
   64 caller_param_l: caller_param_l . TOK_COMMA expression

    TOK_COMMA   shift, and go to state 197
    TOK_RPAREN  shift, and go to state 198


State 163

   65 caller_param_l: expression .
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 65 (caller_param_l)


State 164

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   90                 | expression TOK_PLUS expression .
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 114
    TOK_DIV   shift, and go to state 115
    TOK_MOD   shift, and go to state 116

    $default  reduce using rule 90 (binary_operation)


State 165

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   91                 | expression TOK_MINUS expression .
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 114
    TOK_DIV   shift, and go to state 115
    TOK_MOD   shift, and go to state 116

    $default  reduce using rule 91 (binary_operation)


State 166

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   92                 | expression TOK_MULT expression .
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    $default  reduce using rule 92 (binary_operation)


State 167

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   93                 | expression TOK_DIV expression .
   94                 | expression . TOK_MOD expression

    $default  reduce using rule 93 (binary_operation)


State 168

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression
   94                 | expression TOK_MOD expression .

    $default  reduce using rule 94 (binary_operation)


State 169

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   87                 | expression TOK_BITAND expression .
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116
    TOK_SHL    shift, and go to state 120
    TOK_SHR    shift, and go to state 121

    $default  reduce using rule 87 (binary_operation)


State 170

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   85                 | expression TOK_BITOR expression .
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    $default  reduce using rule 85 (binary_operation)


State 171

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   86                 | expression TOK_BITXOR expression .
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    $default  reduce using rule 86 (binary_operation)


State 172

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   88                 | expression TOK_SHL expression .
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116

    $default  reduce using rule 88 (binary_operation)


State 173

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   89                 | expression TOK_SHR expression .
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116

    $default  reduce using rule 89 (binary_operation)


State 174

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   81                 | expression TOK_GT expression .
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 81 (binary_operation)


State 175

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   82                 | expression TOK_LT expression .
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 82 (binary_operation)


State 176

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   83                 | expression TOK_GE expression .
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 83 (binary_operation)


State 177

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   84                 | expression TOK_LE expression .
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 84 (binary_operation)


State 178

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   79                 | expression TOK_EQ expression .
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 79 (binary_operation)


State 179

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   80                 | expression TOK_NE expression .
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 80 (binary_operation)


State 180

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   78                 | expression TOK_AND expression .
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127

    $default  reduce using rule 78 (binary_operation)


State 181

   77 binary_operation: expression . TOK_OR expression
   77                 | expression TOK_OR expression .
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128

    $default  reduce using rule 77 (binary_operation)


State 182

   66 assignment: ref_expr TOK_ASSIGN expression .
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 66 (assignment)


State 183

  104 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 104 (function_defn)


State 184

   59 condition: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 199
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 185

   42 if_then_else_stmt: TOK_IF condition . basic_block
   43                  | TOK_IF condition . basic_block TOK_ELSE basic_block

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 200
    TOK_IF         shift, and go to state 133
    TOK_RETURN     shift, and go to state 134
    TOK_PRINT      shift, and go to state 67
    TOK_WHILE      shift, and go to state 135
    TOK_IDENT      shift, and go to state 73

    while_stmt         go to state 137
    if_then_else_stmt  go to state 138
    basic_block        go to state 201
    simple_stmt        go to state 202
    empty_block        go to state 203
    func_invocation    go to state 140
    func_name          go to state 78
    assignment         go to state 141
    ref_expr           go to state 142
    semi_colon         go to state 204


State 186

   54 simple_stmt: TOK_RETURN expression . semi_colon
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 112
    TOK_MINUS      shift, and go to state 113
    TOK_MULT       shift, and go to state 114
    TOK_DIV        shift, and go to state 115
    TOK_MOD        shift, and go to state 116
    TOK_BITAND     shift, and go to state 117
    TOK_BITOR      shift, and go to state 118
    TOK_BITXOR     shift, and go to state 119
    TOK_SHL        shift, and go to state 120
    TOK_SHR        shift, and go to state 121
    TOK_GT         shift, and go to state 122
    TOK_LT         shift, and go to state 123
    TOK_GE         shift, and go to state 124
    TOK_LE         shift, and go to state 125
    TOK_EQ         shift, and go to state 126
    TOK_NE         shift, and go to state 127
    TOK_AND        shift, and go to state 128
    TOK_OR         shift, and go to state 129
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 205


State 187

   55 simple_stmt: TOK_RETURN semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 55 (simple_stmt)


State 188

   35 while_stmt: TOK_WHILE condition . while_body

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 206
    TOK_IF         shift, and go to state 133
    TOK_RETURN     shift, and go to state 134
    TOK_PRINT      shift, and go to state 67
    TOK_WHILE      shift, and go to state 135
    TOK_BREAK      shift, and go to state 207
    TOK_IDENT      shift, and go to state 73

    while_stmt         go to state 137
    while_body         go to state 208
    if_then_else_stmt  go to state 138
    simple_stmt        go to state 209
    empty_block        go to state 210
    func_invocation    go to state 140
    func_name          go to state 78
    assignment         go to state 141
    ref_expr           go to state 142
    semi_colon         go to state 211


State 189

   51 simple_stmt: func_invocation semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 51 (simple_stmt)


State 190

   52 simple_stmt: assignment semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 52 (simple_stmt)


State 191

  112 local_var: TOK_IDENT .
  113          | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 212

    $default  reduce using rule 112 (local_var)


State 192

  109 local_decl: type local_l . semi_colon
  110 local_l: local_l . TOK_COMMA local_var

    TOK_COMMA      shift, and go to state 213
    TOK_SEMICOLON  shift, and go to state 44

    semi_colon  go to state 214


State 193

  111 local_l: local_var .

    $default  reduce using rule 111 (local_l)


State 194

  115 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN .

    $default  reduce using rule 115 (func_param_l)


State 195

  116 func_param_l: func_param_l TOK_COMMA func_param .

    $default  reduce using rule 116 (func_param_l)


State 196

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE .

    $default  reduce using rule 15 (compound_stmt2)


State 197

   64 caller_param_l: caller_param_l TOK_COMMA . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 215
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 198

   60 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 60 (func_invocation)


State 199

   59 condition: TOK_LPAREN expression . TOK_RPAREN
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129
    TOK_RPAREN  shift, and go to state 216


State 200

   44 basic_block: TOK_LBRACE . stmt_plus2 TOK_RBRACE semi_colon
   45            | TOK_LBRACE . stmt_plus2 TOK_RBRACE
   57 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE semi_colon
   58            | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 50 (stmt_plus2)

    stmt_plus2  go to state 217
    semi_colon  go to state 218


State 201

   42 if_then_else_stmt: TOK_IF condition basic_block .
   43                  | TOK_IF condition basic_block . TOK_ELSE basic_block

    TOK_ELSE  shift, and go to state 219

    TOK_ELSE  [reduce using rule 42 (if_then_else_stmt)]
    $default  reduce using rule 42 (if_then_else_stmt)


State 202

   47 basic_block: simple_stmt .

    $default  reduce using rule 47 (basic_block)


State 203

   46 basic_block: empty_block .

    $default  reduce using rule 46 (basic_block)


State 204

   48 basic_block: semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 48 (basic_block)


State 205

   54 simple_stmt: TOK_RETURN expression semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 54 (simple_stmt)


State 206

   36 while_body: TOK_LBRACE . stmt_plus2 TOK_RBRACE semi_colon
   37           | TOK_LBRACE . stmt_plus2 TOK_RBRACE
   57 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE semi_colon
   58            | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 50 (stmt_plus2)

    stmt_plus2  go to state 220
    semi_colon  go to state 218


State 207

   41 while_body: TOK_BREAK .

    $default  reduce using rule 41 (while_body)


State 208

   35 while_stmt: TOK_WHILE condition while_body .

    $default  reduce using rule 35 (while_stmt)


State 209

   39 while_body: simple_stmt .

    $default  reduce using rule 39 (while_body)


State 210

   38 while_body: empty_block .

    $default  reduce using rule 38 (while_body)


State 211

   40 while_body: semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 40 (while_body)


State 212

  113 local_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_PRINT      shift, and go to state 67
    TOK_UINTNUM    shift, and go to state 68
    TOK_DOUBLENUM  shift, and go to state 69
    TOK_STRCONST   shift, and go to state 70
    TOK_TRUE       shift, and go to state 71
    TOK_FALSE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    func_invocation   go to state 77
    func_name         go to state 78
    assignment        go to state 79
    expression        go to state 221
    unary_operation   go to state 81
    binary_operation  go to state 82
    ref_expr          go to state 83
    literal           go to state 85


State 213

  110 local_l: local_l TOK_COMMA . local_var

    TOK_IDENT  shift, and go to state 191

    local_var  go to state 222


State 214

  109 local_decl: type local_l semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 109 (local_decl)


State 215

   64 caller_param_l: caller_param_l TOK_COMMA expression .
   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 64 (caller_param_l)


State 216

   59 condition: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 59 (condition)


State 217

   44 basic_block: TOK_LBRACE stmt_plus2 . TOK_RBRACE semi_colon
   45            | TOK_LBRACE stmt_plus2 . TOK_RBRACE
   49 stmt_plus2: stmt_plus2 . simple_stmt

    TOK_RBRACE  shift, and go to state 223
    TOK_IF      shift, and go to state 133
    TOK_RETURN  shift, and go to state 134
    TOK_PRINT   shift, and go to state 67
    TOK_WHILE   shift, and go to state 135
    TOK_IDENT   shift, and go to state 73

    while_stmt         go to state 137
    if_then_else_stmt  go to state 138
    simple_stmt        go to state 224
    func_invocation    go to state 140
    func_name          go to state 78
    assignment         go to state 141
    ref_expr           go to state 142


State 218

   57 empty_block: TOK_LBRACE semi_colon . TOK_RBRACE semi_colon
   58            | TOK_LBRACE semi_colon . TOK_RBRACE
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88
    TOK_RBRACE     shift, and go to state 225


State 219

   43 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE . basic_block

    TOK_SEMICOLON  shift, and go to state 44
    TOK_LBRACE     shift, and go to state 200
    TOK_IF         shift, and go to state 133
    TOK_RETURN     shift, and go to state 134
    TOK_PRINT      shift, and go to state 67
    TOK_WHILE      shift, and go to state 135
    TOK_IDENT      shift, and go to state 73

    while_stmt         go to state 137
    if_then_else_stmt  go to state 138
    basic_block        go to state 226
    simple_stmt        go to state 202
    empty_block        go to state 203
    func_invocation    go to state 140
    func_name          go to state 78
    assignment         go to state 141
    ref_expr           go to state 142
    semi_colon         go to state 204


State 220

   36 while_body: TOK_LBRACE stmt_plus2 . TOK_RBRACE semi_colon
   37           | TOK_LBRACE stmt_plus2 . TOK_RBRACE
   49 stmt_plus2: stmt_plus2 . simple_stmt

    TOK_RBRACE  shift, and go to state 227
    TOK_IF      shift, and go to state 133
    TOK_RETURN  shift, and go to state 134
    TOK_PRINT   shift, and go to state 67
    TOK_WHILE   shift, and go to state 135
    TOK_IDENT   shift, and go to state 73

    while_stmt         go to state 137
    if_then_else_stmt  go to state 138
    simple_stmt        go to state 224
    func_invocation    go to state 140
    func_name          go to state 78
    assignment         go to state 141
    ref_expr           go to state 142


State 221

   77 binary_operation: expression . TOK_OR expression
   78                 | expression . TOK_AND expression
   79                 | expression . TOK_EQ expression
   80                 | expression . TOK_NE expression
   81                 | expression . TOK_GT expression
   82                 | expression . TOK_LT expression
   83                 | expression . TOK_GE expression
   84                 | expression . TOK_LE expression
   85                 | expression . TOK_BITOR expression
   86                 | expression . TOK_BITXOR expression
   87                 | expression . TOK_BITAND expression
   88                 | expression . TOK_SHL expression
   89                 | expression . TOK_SHR expression
   90                 | expression . TOK_PLUS expression
   91                 | expression . TOK_MINUS expression
   92                 | expression . TOK_MULT expression
   93                 | expression . TOK_DIV expression
   94                 | expression . TOK_MOD expression
  113 local_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 113 (local_var)


State 222

  110 local_l: local_l TOK_COMMA local_var .

    $default  reduce using rule 110 (local_l)


State 223

   44 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE . semi_colon
   45            | TOK_LBRACE stmt_plus2 TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 45 (basic_block)

    semi_colon  go to state 228


State 224

   49 stmt_plus2: stmt_plus2 simple_stmt .

    $default  reduce using rule 49 (stmt_plus2)


State 225

   57 empty_block: TOK_LBRACE semi_colon TOK_RBRACE . semi_colon
   58            | TOK_LBRACE semi_colon TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 58 (empty_block)

    semi_colon  go to state 229


State 226

   43 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE basic_block .

    $default  reduce using rule 43 (if_then_else_stmt)


State 227

   36 while_body: TOK_LBRACE stmt_plus2 TOK_RBRACE . semi_colon
   37           | TOK_LBRACE stmt_plus2 TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 44

    $default  reduce using rule 37 (while_body)

    semi_colon  go to state 230


State 228

   44 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 44 (basic_block)


State 229

   57 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 57 (empty_block)


State 230

   36 while_body: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon .
  126 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 88

    $default  reduce using rule 36 (while_body)
