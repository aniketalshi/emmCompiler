Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_QMARK
   TOK_LBRACK
   TOK_RBRACK
   TOK_SHORT
   TOK_LONG
   TOK_BIT
   TOK_ENUM
   TOK_DOUBLE_COLON
   TOK_DOT


State 220 conflicts: 1 shift/reduce


Grammar

    0 $accept: s_specification $end

    1 s_specification: specification

    2 specification: specification declaration
    3              | specification rule
    4              | %empty

    5 declaration: event_decl
    6            | function_proto
    7            | class_proto
    8            | global_decl

    9 rule: primitive_all TOK_ARROW rule_stmts

   10 rule_stmts: compound_stmt2 semi_colon
   11           | compound_stmt2
   12           | expression semi_colon
   13           | semi_colon

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE
   16               | compound_stmt1

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE semi_colon TOK_RBRACE

   19 stmt_plus1: stmt_plus1 simple_stmt
   20           | %empty

   21 primitive_all: normal_event
   22              | any_event
   23              | normal_event TOK_BITOR expression
   24              | binary_event_oprs
   25              | TOK_LPAREN primitive_all TOK_RPAREN

   26 binary_event_oprs: primitive_all TOK_PAT_OR primitive_all
   27                  | primitive_all TOK_COLON primitive_all
   28                  | primitive_all TOK_PAT_STAR
   29                  | TOK_NOT primitive_all

   30 any_event: TOK_ANY

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT
   33               | TOK_IDENT
   34               | %empty

   35 while_stmt: TOK_WHILE condition basic_block

   36 if_then_else_stmt: TOK_IF condition basic_block
   37                  | TOK_IF condition basic_block TOK_ELSE basic_block

   38 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon
   39            | TOK_LBRACE stmt_plus2 TOK_RBRACE
   40            | empty_block
   41            | simple_stmt
   42            | semi_colon

   43 stmt_plus2: stmt_plus2 simple_stmt
   44           | simple_stmt

   45 simple_stmt: func_invocation semi_colon
   46            | assignment semi_colon
   47            | if_then_else_stmt
   48            | return_stmt
   49            | while_stmt
   50            | break_stmt

   51 return_stmt: TOK_RETURN expression semi_colon
   52            | TOK_RETURN semi_colon

   53 break_stmt: TOK_BREAK semi_colon
   54           | TOK_BREAK TOK_UINTNUM semi_colon

   55 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon
   56            | TOK_LBRACE semi_colon TOK_RBRACE

   57 condition: TOK_LPAREN expression TOK_RPAREN

   58 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN
   59                | func_name TOK_LPAREN TOK_RPAREN

   60 func_name: TOK_IDENT
   61          | TOK_PRINT

   62 caller_param_l: caller_param_l TOK_COMMA expression
   63               | expression

   64 assignment: ref_expr TOK_ASSIGN expression

   65 expression: literal
   66           | ref_expr
   67           | func_invocation
   68           | assignment
   69           | unary_operation
   70           | binary_operation
   71           | TOK_LPAREN expression TOK_RPAREN

   72 unary_operation: TOK_NOT expression
   73                | TOK_BITNOT expression
   74                | TOK_MINUS expression

   75 binary_operation: expression TOK_OR expression
   76                 | expression TOK_AND expression
   77                 | expression TOK_EQ expression
   78                 | expression TOK_NE expression
   79                 | expression TOK_GT expression
   80                 | expression TOK_LT expression
   81                 | expression TOK_GE expression
   82                 | expression TOK_LE expression
   83                 | expression TOK_BITOR expression
   84                 | expression TOK_BITXOR expression
   85                 | expression TOK_BITAND expression
   86                 | expression TOK_SHL expression
   87                 | expression TOK_SHR expression
   88                 | expression TOK_PLUS expression
   89                 | expression TOK_MINUS expression
   90                 | expression TOK_MULT expression
   91                 | expression TOK_DIV expression
   92                 | expression TOK_MOD expression

   93 ref_expr: TOK_IDENT

   94 global_decl: type global_l semi_colon

   95 global_l: global_l TOK_COMMA global_var
   96         | global_var

   97 global_var: TOK_IDENT
   98           | TOK_IDENT TOK_ASSIGN expression

   99 class_proto: class_decl semi_colon
  100            | class_decl class_defn semi_colon

  101 class_decl: TOK_CLASS TOK_IDENT

  102 class_defn: TOK_LBRACE class_body TOK_RBRACE

  103 class_body: class_body class_var_decl
  104           | class_body function_proto
  105           | %empty

  106 class_var_decl: type class_var_l semi_colon

  107 class_var_l: class_var_l TOK_COMMA class_var
  108            | class_var

  109 class_var: TOK_IDENT

  110 function_proto: function_decl semi_colon
  111               | function_decl function_defn

  112 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon
  113              | TOK_LBRACE function_body TOK_RBRACE

  114 function_body: function_body local_decl
  115              | function_body simple_stmt
  116              | %empty

  117 local_decl: type local_l semi_colon

  118 local_l: local_l TOK_COMMA local_var
  119        | local_var

  120 local_var: TOK_IDENT
  121          | TOK_IDENT TOK_ASSIGN expression

  122 function_decl: type TOK_IDENT func_param_l

  123 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN
  124             | func_param_l TOK_COMMA func_param
  125             | func_param
  126             | TOK_LPAREN TOK_RPAREN

  127 func_param: type TOK_IDENT

  128 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon

  129 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN
  130              | event_param_l TOK_COMMA event_param
  131              | event_param
  132              | TOK_LPAREN TOK_RPAREN

  133 event_param: type TOK_IDENT

  134 semi_colon: semi_colon TOK_SEMICOLON
  135           | TOK_SEMICOLON

  136 literal: TOK_UINTNUM
  137        | TOK_DOUBLENUM
  138        | TOK_STRCONST
  139        | TOK_TRUE
  140        | TOK_FALSE

  141 type: baseType
  142     | intType
  143     | TOK_IDENT
  144     | TOK_UNSIGNED baseType

  145 baseType: TOK_VOID
  146         | TOK_BOOL
  147         | TOK_BYTE
  148         | TOK_STRING
  149         | TOK_DOUBLE

  150 intType: TOK_INT
  151        | TOK_UNSIGNED TOK_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 28
TOK_PAT_OR (260) 26
TOK_PAT_NOT (261)
TOK_PLUS (262) 88
TOK_MINUS (263) 74 89
TOK_UMINUS (264)
TOK_MULT (265) 90
TOK_DIV (266) 91
TOK_MOD (267) 92
TOK_BITAND (268) 85
TOK_BITOR (269) 23 83
TOK_BITNOT (270) 73
TOK_BITXOR (271) 84
TOK_SHL (272) 86
TOK_SHR (273) 87
TOK_GT (274) 79
TOK_LT (275) 80
TOK_GE (276) 81
TOK_LE (277) 82
TOK_EQ (278) 77
TOK_NE (279) 78
TOK_AND (280) 76
TOK_OR (281) 75
TOK_NOT (282) 29 72
TOK_COMMA (283) 32 62 95 107 118 124 130
TOK_ASSIGN (284) 64 98 121
TOK_SEMICOLON (285) 134 135
TOK_COLON (286) 27
TOK_ARROW (287) 9
TOK_QMARK (288)
TOK_LBRACE (289) 14 15 17 18 38 39 55 56 102 112 113
TOK_RBRACE (290) 14 15 17 18 38 39 55 56 102 112 113
TOK_LPAREN (291) 25 31 57 58 59 71 123 126 129 132
TOK_RPAREN (292) 25 31 57 58 59 71 123 126 129 132
TOK_LBRACK (293)
TOK_RBRACK (294)
TOK_IF (295) 36 37
TOK_ELSE (296) 37
TOK_CLASS (297) 101
TOK_RETURN (298) 51 52
TOK_EVENT (299) 128
TOK_ANY (300) 30
TOK_PRINT (301) 61
TOK_WHILE (302) 35
TOK_BREAK (303) 53 54
TOK_UINTNUM (304) 54 136
TOK_DOUBLENUM (305) 137
TOK_VOID (306) 145
TOK_STRING (307) 148
TOK_STRCONST (308) 138
TOK_INT (309) 150 151
TOK_UNSIGNED (310) 144 151
TOK_BOOL (311) 146
TOK_BYTE (312) 147
TOK_DOUBLE (313) 149
TOK_SHORT (314)
TOK_LONG (315)
TOK_BIT (316)
TOK_ENUM (317)
TOK_TRUE (318) 139
TOK_FALSE (319) 140
TOK_IDENT (320) 31 32 33 60 93 97 98 101 109 120 121 122 127 128 133
    143
TOK_DOUBLE_COLON (321)
TOK_DOT (322)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
s_specification (69)
    on left: 1, on right: 0
specification (70)
    on left: 2 3 4, on right: 1 2 3
declaration (71)
    on left: 5 6 7 8, on right: 2
rule (72)
    on left: 9, on right: 3
rule_stmts (73)
    on left: 10 11 12 13, on right: 9
compound_stmt2 (74)
    on left: 14 15 16, on right: 10 11 14 15
compound_stmt1 (75)
    on left: 17 18, on right: 16
stmt_plus1 (76)
    on left: 19 20, on right: 17 19
primitive_all (77)
    on left: 21 22 23 24 25, on right: 9 25 26 27 28 29
binary_event_oprs (78)
    on left: 26 27 28 29, on right: 24
any_event (79)
    on left: 30, on right: 22
normal_event (80)
    on left: 31, on right: 21 23
event_aparam_l (81)
    on left: 32 33 34, on right: 31 32
while_stmt (82)
    on left: 35, on right: 49
if_then_else_stmt (83)
    on left: 36 37, on right: 47
basic_block (84)
    on left: 38 39 40 41 42, on right: 35 36 37
stmt_plus2 (85)
    on left: 43 44, on right: 38 39 43
simple_stmt (86)
    on left: 45 46 47 48 49 50, on right: 19 41 43 44 115
return_stmt (87)
    on left: 51 52, on right: 48
break_stmt (88)
    on left: 53 54, on right: 50
empty_block (89)
    on left: 55 56, on right: 40
condition (90)
    on left: 57, on right: 35 36 37
func_invocation (91)
    on left: 58 59, on right: 45 67
func_name (92)
    on left: 60 61, on right: 58 59
caller_param_l (93)
    on left: 62 63, on right: 58 62
assignment (94)
    on left: 64, on right: 46 68
expression (95)
    on left: 65 66 67 68 69 70 71, on right: 12 23 51 57 62 63 64 71
    72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92
    98 121
unary_operation (96)
    on left: 72 73 74, on right: 69
binary_operation (97)
    on left: 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92,
    on right: 70
ref_expr (98)
    on left: 93, on right: 64 66
global_decl (99)
    on left: 94, on right: 8
global_l (100)
    on left: 95 96, on right: 94 95
global_var (101)
    on left: 97 98, on right: 95 96
class_proto (102)
    on left: 99 100, on right: 7
class_decl (103)
    on left: 101, on right: 99 100
class_defn (104)
    on left: 102, on right: 100
class_body (105)
    on left: 103 104 105, on right: 102 103 104
class_var_decl (106)
    on left: 106, on right: 103
class_var_l (107)
    on left: 107 108, on right: 106 107
class_var (108)
    on left: 109, on right: 107 108
function_proto (109)
    on left: 110 111, on right: 6 104
function_defn (110)
    on left: 112 113, on right: 111
function_body (111)
    on left: 114 115 116, on right: 112 113 114 115
local_decl (112)
    on left: 117, on right: 114
local_l (113)
    on left: 118 119, on right: 117 118
local_var (114)
    on left: 120 121, on right: 118 119
function_decl (115)
    on left: 122, on right: 110 111
func_param_l (116)
    on left: 123 124 125 126, on right: 122 123 124
func_param (117)
    on left: 127, on right: 124 125
event_decl (118)
    on left: 128, on right: 5
event_param_l (119)
    on left: 129 130 131 132, on right: 128 129 130
event_param (120)
    on left: 133, on right: 130 131
semi_colon (121)
    on left: 134 135, on right: 10 12 13 15 18 38 42 45 46 51 52 53
    54 55 56 94 99 100 106 110 112 117 128 134
literal (122)
    on left: 136 137 138 139 140, on right: 65
type (123)
    on left: 141 142 143 144, on right: 94 106 117 122 127 133
baseType (124)
    on left: 145 146 147 148 149, on right: 141 144
intType (125)
    on left: 150 151, on right: 142


State 0

    0 $accept: . s_specification $end

    $default  reduce using rule 4 (specification)

    s_specification  go to state 1
    specification    go to state 2


State 1

    0 $accept: s_specification . $end

    $end  shift, and go to state 3


State 2

    1 s_specification: specification .
    2 specification: specification . declaration
    3              | specification . rule

    TOK_NOT       shift, and go to state 4
    TOK_LPAREN    shift, and go to state 5
    TOK_CLASS     shift, and go to state 6
    TOK_EVENT     shift, and go to state 7
    TOK_ANY       shift, and go to state 8
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 16

    $default  reduce using rule 1 (s_specification)

    declaration        go to state 17
    rule               go to state 18
    primitive_all      go to state 19
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22
    global_decl        go to state 23
    class_proto        go to state 24
    class_decl         go to state 25
    function_proto     go to state 26
    function_decl      go to state 27
    event_decl         go to state 28
    type               go to state 29
    baseType           go to state 30
    intType            go to state 31


State 3

    0 $accept: s_specification $end .

    $default  accept


State 4

   29 binary_event_oprs: TOK_NOT . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 32

    primitive_all      go to state 33
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


State 5

   25 primitive_all: TOK_LPAREN . primitive_all TOK_RPAREN

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 32

    primitive_all      go to state 34
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


State 6

  101 class_decl: TOK_CLASS . TOK_IDENT

    TOK_IDENT  shift, and go to state 35


State 7

  128 event_decl: TOK_EVENT . TOK_IDENT event_param_l semi_colon

    TOK_IDENT  shift, and go to state 36


State 8

   30 any_event: TOK_ANY .

    $default  reduce using rule 30 (any_event)


State 9

  145 baseType: TOK_VOID .

    $default  reduce using rule 145 (baseType)


State 10

  148 baseType: TOK_STRING .

    $default  reduce using rule 148 (baseType)


State 11

  150 intType: TOK_INT .

    $default  reduce using rule 150 (intType)


State 12

  144 type: TOK_UNSIGNED . baseType
  151 intType: TOK_UNSIGNED . TOK_INT

    TOK_VOID    shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_INT     shift, and go to state 37
    TOK_BOOL    shift, and go to state 13
    TOK_BYTE    shift, and go to state 14
    TOK_DOUBLE  shift, and go to state 15

    baseType  go to state 38


State 13

  146 baseType: TOK_BOOL .

    $default  reduce using rule 146 (baseType)


State 14

  147 baseType: TOK_BYTE .

    $default  reduce using rule 147 (baseType)


State 15

  149 baseType: TOK_DOUBLE .

    $default  reduce using rule 149 (baseType)


State 16

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN
  143 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 39

    $default  reduce using rule 143 (type)


State 17

    2 specification: specification declaration .

    $default  reduce using rule 2 (specification)


State 18

    3 specification: specification rule .

    $default  reduce using rule 3 (specification)


State 19

    9 rule: primitive_all . TOK_ARROW rule_stmts
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 40
    TOK_PAT_OR    shift, and go to state 41
    TOK_COLON     shift, and go to state 42
    TOK_ARROW     shift, and go to state 43


State 20

   24 primitive_all: binary_event_oprs .

    $default  reduce using rule 24 (primitive_all)


State 21

   22 primitive_all: any_event .

    $default  reduce using rule 22 (primitive_all)


State 22

   21 primitive_all: normal_event .
   23              | normal_event . TOK_BITOR expression

    TOK_BITOR  shift, and go to state 44

    $default  reduce using rule 21 (primitive_all)


State 23

    8 declaration: global_decl .

    $default  reduce using rule 8 (declaration)


State 24

    7 declaration: class_proto .

    $default  reduce using rule 7 (declaration)


State 25

   99 class_proto: class_decl . semi_colon
  100            | class_decl . class_defn semi_colon

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 46

    class_defn  go to state 47
    semi_colon  go to state 48


State 26

    6 declaration: function_proto .

    $default  reduce using rule 6 (declaration)


State 27

  110 function_proto: function_decl . semi_colon
  111               | function_decl . function_defn

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 49

    function_defn  go to state 50
    semi_colon     go to state 51


State 28

    5 declaration: event_decl .

    $default  reduce using rule 5 (declaration)


State 29

   94 global_decl: type . global_l semi_colon
  122 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 52

    global_l    go to state 53
    global_var  go to state 54


State 30

  141 type: baseType .

    $default  reduce using rule 141 (type)


State 31

  142 type: intType .

    $default  reduce using rule 142 (type)


State 32

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN

    TOK_LPAREN  shift, and go to state 39


State 33

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR
   29                  | TOK_NOT primitive_all .

    $default  reduce using rule 29 (binary_event_oprs)


State 34

   25 primitive_all: TOK_LPAREN primitive_all . TOK_RPAREN
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 40
    TOK_PAT_OR    shift, and go to state 41
    TOK_COLON     shift, and go to state 42
    TOK_RPAREN    shift, and go to state 55


State 35

  101 class_decl: TOK_CLASS TOK_IDENT .

    $default  reduce using rule 101 (class_decl)


State 36

  128 event_decl: TOK_EVENT TOK_IDENT . event_param_l semi_colon

    TOK_LPAREN    shift, and go to state 56
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    event_param_l  go to state 58
    event_param    go to state 59
    type           go to state 60
    baseType       go to state 30
    intType        go to state 31


State 37

  151 intType: TOK_UNSIGNED TOK_INT .

    $default  reduce using rule 151 (intType)


State 38

  144 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 144 (type)


State 39

   31 normal_event: TOK_IDENT TOK_LPAREN . event_aparam_l TOK_RPAREN

    TOK_IDENT  shift, and go to state 61

    $default  reduce using rule 34 (event_aparam_l)

    event_aparam_l  go to state 62


State 40

   28 binary_event_oprs: primitive_all TOK_PAT_STAR .

    $default  reduce using rule 28 (binary_event_oprs)


State 41

   26 binary_event_oprs: primitive_all TOK_PAT_OR . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 32

    primitive_all      go to state 63
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


State 42

   27 binary_event_oprs: primitive_all TOK_COLON . primitive_all

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 32

    primitive_all      go to state 64
    binary_event_oprs  go to state 20
    any_event          go to state 21
    normal_event       go to state 22


State 43

    9 rule: primitive_all TOK_ARROW . rule_stmts

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 68
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    rule_stmts        go to state 77
    compound_stmt2    go to state 78
    compound_stmt1    go to state 79
    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 83
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    semi_colon        go to state 87
    literal           go to state 88


State 44

   23 primitive_all: normal_event TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 89
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 45

  135 semi_colon: TOK_SEMICOLON .

    $default  reduce using rule 135 (semi_colon)


State 46

  102 class_defn: TOK_LBRACE . class_body TOK_RBRACE

    $default  reduce using rule 105 (class_body)

    class_body  go to state 90


State 47

  100 class_proto: class_decl class_defn . semi_colon

    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 91


State 48

   99 class_proto: class_decl semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 99 (class_proto)


State 49

  112 function_defn: TOK_LBRACE . function_body TOK_RBRACE semi_colon
  113              | TOK_LBRACE . function_body TOK_RBRACE

    $default  reduce using rule 116 (function_body)

    function_body  go to state 93


State 50

  111 function_proto: function_decl function_defn .

    $default  reduce using rule 111 (function_proto)


State 51

  110 function_proto: function_decl semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 110 (function_proto)


State 52

   97 global_var: TOK_IDENT .
   98           | TOK_IDENT . TOK_ASSIGN expression
  122 function_decl: type TOK_IDENT . func_param_l

    TOK_ASSIGN    shift, and go to state 94
    TOK_LPAREN    shift, and go to state 95
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    $default  reduce using rule 97 (global_var)

    func_param_l  go to state 96
    func_param    go to state 97
    type          go to state 98
    baseType      go to state 30
    intType       go to state 31


State 53

   94 global_decl: type global_l . semi_colon
   95 global_l: global_l . TOK_COMMA global_var

    TOK_COMMA      shift, and go to state 99
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 100


State 54

   96 global_l: global_var .

    $default  reduce using rule 96 (global_l)


State 55

   25 primitive_all: TOK_LPAREN primitive_all TOK_RPAREN .

    $default  reduce using rule 25 (primitive_all)


State 56

  129 event_param_l: TOK_LPAREN . event_param_l TOK_RPAREN
  132              | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 56
    TOK_RPAREN    shift, and go to state 101
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    event_param_l  go to state 102
    event_param    go to state 59
    type           go to state 60
    baseType       go to state 30
    intType        go to state 31


State 57

  143 type: TOK_IDENT .

    $default  reduce using rule 143 (type)


State 58

  128 event_decl: TOK_EVENT TOK_IDENT event_param_l . semi_colon
  130 event_param_l: event_param_l . TOK_COMMA event_param

    TOK_COMMA      shift, and go to state 103
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 104


State 59

  131 event_param_l: event_param .

    $default  reduce using rule 131 (event_param_l)


State 60

  133 event_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 105


State 61

   33 event_aparam_l: TOK_IDENT .

    $default  reduce using rule 33 (event_aparam_l)


State 62

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l . TOK_RPAREN
   32 event_aparam_l: event_aparam_l . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 106
    TOK_RPAREN  shift, and go to state 107


State 63

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all TOK_PAT_OR primitive_all .
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 40
    TOK_COLON     shift, and go to state 42

    $default  reduce using rule 26 (binary_event_oprs)


State 64

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all TOK_COLON primitive_all .
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 40

    $default  reduce using rule 27 (binary_event_oprs)


State 65

   74 unary_operation: TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 108
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 66

   73 unary_operation: TOK_BITNOT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 109
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 67

   72 unary_operation: TOK_NOT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 110
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 68

   14 compound_stmt2: TOK_LBRACE . compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE . compound_stmt2 semi_colon TOK_RBRACE
   17 compound_stmt1: TOK_LBRACE . stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 68

    $default  reduce using rule 20 (stmt_plus1)

    compound_stmt2  go to state 111
    compound_stmt1  go to state 79
    stmt_plus1      go to state 112
    semi_colon      go to state 113


State 69

   71 expression: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 114
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 70

   61 func_name: TOK_PRINT .

    $default  reduce using rule 61 (func_name)


State 71

  136 literal: TOK_UINTNUM .

    $default  reduce using rule 136 (literal)


State 72

  137 literal: TOK_DOUBLENUM .

    $default  reduce using rule 137 (literal)


State 73

  138 literal: TOK_STRCONST .

    $default  reduce using rule 138 (literal)


State 74

  139 literal: TOK_TRUE .

    $default  reduce using rule 139 (literal)


State 75

  140 literal: TOK_FALSE .

    $default  reduce using rule 140 (literal)


State 76

   60 func_name: TOK_IDENT .
   93 ref_expr: TOK_IDENT .

    TOK_LPAREN  reduce using rule 60 (func_name)
    $default    reduce using rule 93 (ref_expr)


State 77

    9 rule: primitive_all TOK_ARROW rule_stmts .

    $default  reduce using rule 9 (rule)


State 78

   10 rule_stmts: compound_stmt2 . semi_colon
   11           | compound_stmt2 .

    TOK_SEMICOLON  shift, and go to state 45

    $default  reduce using rule 11 (rule_stmts)

    semi_colon  go to state 115


State 79

   16 compound_stmt2: compound_stmt1 .

    $default  reduce using rule 16 (compound_stmt2)


State 80

   67 expression: func_invocation .

    $default  reduce using rule 67 (expression)


State 81

   58 func_invocation: func_name . TOK_LPAREN caller_param_l TOK_RPAREN
   59                | func_name . TOK_LPAREN TOK_RPAREN

    TOK_LPAREN  shift, and go to state 116


State 82

   68 expression: assignment .

    $default  reduce using rule 68 (expression)


State 83

   12 rule_stmts: expression . semi_colon
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 117
    TOK_MINUS      shift, and go to state 118
    TOK_MULT       shift, and go to state 119
    TOK_DIV        shift, and go to state 120
    TOK_MOD        shift, and go to state 121
    TOK_BITAND     shift, and go to state 122
    TOK_BITOR      shift, and go to state 123
    TOK_BITXOR     shift, and go to state 124
    TOK_SHL        shift, and go to state 125
    TOK_SHR        shift, and go to state 126
    TOK_GT         shift, and go to state 127
    TOK_LT         shift, and go to state 128
    TOK_GE         shift, and go to state 129
    TOK_LE         shift, and go to state 130
    TOK_EQ         shift, and go to state 131
    TOK_NE         shift, and go to state 132
    TOK_AND        shift, and go to state 133
    TOK_OR         shift, and go to state 134
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 135


State 84

   69 expression: unary_operation .

    $default  reduce using rule 69 (expression)


State 85

   70 expression: binary_operation .

    $default  reduce using rule 70 (expression)


State 86

   64 assignment: ref_expr . TOK_ASSIGN expression
   66 expression: ref_expr .

    TOK_ASSIGN  shift, and go to state 136

    $default  reduce using rule 66 (expression)


State 87

   13 rule_stmts: semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 13 (rule_stmts)


State 88

   65 expression: literal .

    $default  reduce using rule 65 (expression)


State 89

   23 primitive_all: normal_event TOK_BITOR expression .
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 23 (primitive_all)


State 90

  102 class_defn: TOK_LBRACE class_body . TOK_RBRACE
  103 class_body: class_body . class_var_decl
  104           | class_body . function_proto

    TOK_RBRACE    shift, and go to state 137
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    class_var_decl  go to state 138
    function_proto  go to state 139
    function_decl   go to state 27
    type            go to state 140
    baseType        go to state 30
    intType         go to state 31


State 91

  100 class_proto: class_decl class_defn semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 100 (class_proto)


State 92

  134 semi_colon: semi_colon TOK_SEMICOLON .

    $default  reduce using rule 134 (semi_colon)


State 93

  112 function_defn: TOK_LBRACE function_body . TOK_RBRACE semi_colon
  113              | TOK_LBRACE function_body . TOK_RBRACE
  114 function_body: function_body . local_decl
  115              | function_body . simple_stmt

    TOK_RBRACE    shift, and go to state 141
    TOK_IF        shift, and go to state 142
    TOK_RETURN    shift, and go to state 143
    TOK_PRINT     shift, and go to state 70
    TOK_WHILE     shift, and go to state 144
    TOK_BREAK     shift, and go to state 145
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 146

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    simple_stmt        go to state 149
    return_stmt        go to state 150
    break_stmt         go to state 151
    func_invocation    go to state 152
    func_name          go to state 81
    assignment         go to state 153
    ref_expr           go to state 154
    local_decl         go to state 155
    type               go to state 156
    baseType           go to state 30
    intType            go to state 31


State 94

   98 global_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 157
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 95

  123 func_param_l: TOK_LPAREN . func_param_l TOK_RPAREN
  126             | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 95
    TOK_RPAREN    shift, and go to state 158
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    func_param_l  go to state 159
    func_param    go to state 97
    type          go to state 98
    baseType      go to state 30
    intType       go to state 31


State 96

  122 function_decl: type TOK_IDENT func_param_l .
  124 func_param_l: func_param_l . TOK_COMMA func_param

    TOK_COMMA  shift, and go to state 160

    $default  reduce using rule 122 (function_decl)


State 97

  125 func_param_l: func_param .

    $default  reduce using rule 125 (func_param_l)


State 98

  127 func_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 161


State 99

   95 global_l: global_l TOK_COMMA . global_var

    TOK_IDENT  shift, and go to state 162

    global_var  go to state 163


State 100

   94 global_decl: type global_l semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 94 (global_decl)


State 101

  132 event_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 132 (event_param_l)


State 102

  129 event_param_l: TOK_LPAREN event_param_l . TOK_RPAREN
  130              | event_param_l . TOK_COMMA event_param

    TOK_COMMA   shift, and go to state 103
    TOK_RPAREN  shift, and go to state 164


State 103

  130 event_param_l: event_param_l TOK_COMMA . event_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    event_param  go to state 165
    type         go to state 60
    baseType     go to state 30
    intType      go to state 31


State 104

  128 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 128 (event_decl)


State 105

  133 event_param: type TOK_IDENT .

    $default  reduce using rule 133 (event_param)


State 106

   32 event_aparam_l: event_aparam_l TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 166


State 107

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN .

    $default  reduce using rule 31 (normal_event)


State 108

   74 unary_operation: TOK_MINUS expression .
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    $default  reduce using rule 74 (unary_operation)


State 109

   73 unary_operation: TOK_BITNOT expression .
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 117
    TOK_MINUS  shift, and go to state 118
    TOK_MULT   shift, and go to state 119
    TOK_DIV    shift, and go to state 120
    TOK_MOD    shift, and go to state 121
    TOK_SHL    shift, and go to state 125
    TOK_SHR    shift, and go to state 126

    $default  reduce using rule 73 (unary_operation)


State 110

   72 unary_operation: TOK_NOT expression .
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132

    $default  reduce using rule 72 (unary_operation)


State 111

   14 compound_stmt2: TOK_LBRACE compound_stmt2 . TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 45
    TOK_RBRACE     shift, and go to state 167

    semi_colon  go to state 168


State 112

   17 compound_stmt1: TOK_LBRACE stmt_plus1 . TOK_RBRACE
   19 stmt_plus1: stmt_plus1 . simple_stmt

    TOK_RBRACE  shift, and go to state 169
    TOK_IF      shift, and go to state 142
    TOK_RETURN  shift, and go to state 143
    TOK_PRINT   shift, and go to state 70
    TOK_WHILE   shift, and go to state 144
    TOK_BREAK   shift, and go to state 145
    TOK_IDENT   shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    simple_stmt        go to state 170
    return_stmt        go to state 150
    break_stmt         go to state 151
    func_invocation    go to state 152
    func_name          go to state 81
    assignment         go to state 153
    ref_expr           go to state 154


State 113

   18 compound_stmt1: TOK_LBRACE semi_colon . TOK_RBRACE
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92
    TOK_RBRACE     shift, and go to state 171


State 114

   71 expression: TOK_LPAREN expression . TOK_RPAREN
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134
    TOK_RPAREN  shift, and go to state 172


State 115

   10 rule_stmts: compound_stmt2 semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 10 (rule_stmts)


State 116

   58 func_invocation: func_name TOK_LPAREN . caller_param_l TOK_RPAREN
   59                | func_name TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_RPAREN     shift, and go to state 173
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    caller_param_l    go to state 174
    assignment        go to state 82
    expression        go to state 175
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 117

   88 binary_operation: expression TOK_PLUS . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 176
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 118

   89 binary_operation: expression TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 177
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 119

   90 binary_operation: expression TOK_MULT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 178
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 120

   91 binary_operation: expression TOK_DIV . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 179
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 121

   92 binary_operation: expression TOK_MOD . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 180
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 122

   85 binary_operation: expression TOK_BITAND . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 181
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 123

   83 binary_operation: expression TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 182
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 124

   84 binary_operation: expression TOK_BITXOR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 183
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 125

   86 binary_operation: expression TOK_SHL . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 184
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 126

   87 binary_operation: expression TOK_SHR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 185
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 127

   79 binary_operation: expression TOK_GT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 186
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 128

   80 binary_operation: expression TOK_LT . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 187
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 129

   81 binary_operation: expression TOK_GE . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 188
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 130

   82 binary_operation: expression TOK_LE . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 189
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 131

   77 binary_operation: expression TOK_EQ . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 190
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 132

   78 binary_operation: expression TOK_NE . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 191
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 133

   76 binary_operation: expression TOK_AND . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 192
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 134

   75 binary_operation: expression TOK_OR . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 193
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 135

   12 rule_stmts: expression semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 12 (rule_stmts)


State 136

   64 assignment: ref_expr TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 194
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 137

  102 class_defn: TOK_LBRACE class_body TOK_RBRACE .

    $default  reduce using rule 102 (class_defn)


State 138

  103 class_body: class_body class_var_decl .

    $default  reduce using rule 103 (class_body)


State 139

  104 class_body: class_body function_proto .

    $default  reduce using rule 104 (class_body)


State 140

  106 class_var_decl: type . class_var_l semi_colon
  122 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 195

    class_var_l  go to state 196
    class_var    go to state 197


State 141

  112 function_defn: TOK_LBRACE function_body TOK_RBRACE . semi_colon
  113              | TOK_LBRACE function_body TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 45

    $default  reduce using rule 113 (function_defn)

    semi_colon  go to state 198


State 142

   36 if_then_else_stmt: TOK_IF . condition basic_block
   37                  | TOK_IF . condition basic_block TOK_ELSE basic_block

    TOK_LPAREN  shift, and go to state 199

    condition  go to state 200


State 143

   51 return_stmt: TOK_RETURN . expression semi_colon
   52            | TOK_RETURN . semi_colon

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_SEMICOLON  shift, and go to state 45
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 201
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    semi_colon        go to state 202
    literal           go to state 88


State 144

   35 while_stmt: TOK_WHILE . condition basic_block

    TOK_LPAREN  shift, and go to state 199

    condition  go to state 203


State 145

   53 break_stmt: TOK_BREAK . semi_colon
   54           | TOK_BREAK . TOK_UINTNUM semi_colon

    TOK_SEMICOLON  shift, and go to state 45
    TOK_UINTNUM    shift, and go to state 204

    semi_colon  go to state 205


State 146

   60 func_name: TOK_IDENT .
   93 ref_expr: TOK_IDENT .
  143 type: TOK_IDENT .

    TOK_ASSIGN  reduce using rule 93 (ref_expr)
    TOK_IDENT   reduce using rule 143 (type)
    $default    reduce using rule 60 (func_name)


State 147

   49 simple_stmt: while_stmt .

    $default  reduce using rule 49 (simple_stmt)


State 148

   47 simple_stmt: if_then_else_stmt .

    $default  reduce using rule 47 (simple_stmt)


State 149

  115 function_body: function_body simple_stmt .

    $default  reduce using rule 115 (function_body)


State 150

   48 simple_stmt: return_stmt .

    $default  reduce using rule 48 (simple_stmt)


State 151

   50 simple_stmt: break_stmt .

    $default  reduce using rule 50 (simple_stmt)


State 152

   45 simple_stmt: func_invocation . semi_colon

    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 206


State 153

   46 simple_stmt: assignment . semi_colon

    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 207


State 154

   64 assignment: ref_expr . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 136


State 155

  114 function_body: function_body local_decl .

    $default  reduce using rule 114 (function_body)


State 156

  117 local_decl: type . local_l semi_colon

    TOK_IDENT  shift, and go to state 208

    local_l    go to state 209
    local_var  go to state 210


State 157

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression
   98 global_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 98 (global_var)


State 158

  126 func_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 126 (func_param_l)


State 159

  123 func_param_l: TOK_LPAREN func_param_l . TOK_RPAREN
  124             | func_param_l . TOK_COMMA func_param

    TOK_COMMA   shift, and go to state 160
    TOK_RPAREN  shift, and go to state 211


State 160

  124 func_param_l: func_param_l TOK_COMMA . func_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    func_param  go to state 212
    type        go to state 98
    baseType    go to state 30
    intType     go to state 31


State 161

  127 func_param: type TOK_IDENT .

    $default  reduce using rule 127 (func_param)


State 162

   97 global_var: TOK_IDENT .
   98           | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 94

    $default  reduce using rule 97 (global_var)


State 163

   95 global_l: global_l TOK_COMMA global_var .

    $default  reduce using rule 95 (global_l)


State 164

  129 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN .

    $default  reduce using rule 129 (event_param_l)


State 165

  130 event_param_l: event_param_l TOK_COMMA event_param .

    $default  reduce using rule 130 (event_param_l)


State 166

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT .

    $default  reduce using rule 32 (event_aparam_l)


State 167

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE .

    $default  reduce using rule 14 (compound_stmt2)


State 168

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon . TOK_RBRACE
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92
    TOK_RBRACE     shift, and go to state 213


State 169

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE .

    $default  reduce using rule 17 (compound_stmt1)


State 170

   19 stmt_plus1: stmt_plus1 simple_stmt .

    $default  reduce using rule 19 (stmt_plus1)


State 171

   18 compound_stmt1: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 18 (compound_stmt1)


State 172

   71 expression: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 71 (expression)


State 173

   59 func_invocation: func_name TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 59 (func_invocation)


State 174

   58 func_invocation: func_name TOK_LPAREN caller_param_l . TOK_RPAREN
   62 caller_param_l: caller_param_l . TOK_COMMA expression

    TOK_COMMA   shift, and go to state 214
    TOK_RPAREN  shift, and go to state 215


State 175

   63 caller_param_l: expression .
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 63 (caller_param_l)


State 176

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   88                 | expression TOK_PLUS expression .
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 119
    TOK_DIV   shift, and go to state 120
    TOK_MOD   shift, and go to state 121

    $default  reduce using rule 88 (binary_operation)


State 177

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   89                 | expression TOK_MINUS expression .
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 119
    TOK_DIV   shift, and go to state 120
    TOK_MOD   shift, and go to state 121

    $default  reduce using rule 89 (binary_operation)


State 178

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   90                 | expression TOK_MULT expression .
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    $default  reduce using rule 90 (binary_operation)


State 179

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   91                 | expression TOK_DIV expression .
   92                 | expression . TOK_MOD expression

    $default  reduce using rule 91 (binary_operation)


State 180

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression
   92                 | expression TOK_MOD expression .

    $default  reduce using rule 92 (binary_operation)


State 181

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   85                 | expression TOK_BITAND expression .
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 117
    TOK_MINUS  shift, and go to state 118
    TOK_MULT   shift, and go to state 119
    TOK_DIV    shift, and go to state 120
    TOK_MOD    shift, and go to state 121
    TOK_SHL    shift, and go to state 125
    TOK_SHR    shift, and go to state 126

    $default  reduce using rule 85 (binary_operation)


State 182

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   83                 | expression TOK_BITOR expression .
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    $default  reduce using rule 83 (binary_operation)


State 183

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   84                 | expression TOK_BITXOR expression .
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    $default  reduce using rule 84 (binary_operation)


State 184

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   86                 | expression TOK_SHL expression .
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 117
    TOK_MINUS  shift, and go to state 118
    TOK_MULT   shift, and go to state 119
    TOK_DIV    shift, and go to state 120
    TOK_MOD    shift, and go to state 121

    $default  reduce using rule 86 (binary_operation)


State 185

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   87                 | expression TOK_SHR expression .
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 117
    TOK_MINUS  shift, and go to state 118
    TOK_MULT   shift, and go to state 119
    TOK_DIV    shift, and go to state 120
    TOK_MOD    shift, and go to state 121

    $default  reduce using rule 87 (binary_operation)


State 186

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   79                 | expression TOK_GT expression .
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 79 (binary_operation)


State 187

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   80                 | expression TOK_LT expression .
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 80 (binary_operation)


State 188

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   81                 | expression TOK_GE expression .
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 81 (binary_operation)


State 189

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   82                 | expression TOK_LE expression .
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 82 (binary_operation)


State 190

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   77                 | expression TOK_EQ expression .
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 77 (binary_operation)


State 191

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   78                 | expression TOK_NE expression .
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 78 (binary_operation)


State 192

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   76                 | expression TOK_AND expression .
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132

    $default  reduce using rule 76 (binary_operation)


State 193

   75 binary_operation: expression . TOK_OR expression
   75                 | expression TOK_OR expression .
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133

    $default  reduce using rule 75 (binary_operation)


State 194

   64 assignment: ref_expr TOK_ASSIGN expression .
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 64 (assignment)


State 195

  109 class_var: TOK_IDENT .
  122 function_decl: type TOK_IDENT . func_param_l

    TOK_LPAREN    shift, and go to state 95
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 57

    $default  reduce using rule 109 (class_var)

    func_param_l  go to state 96
    func_param    go to state 97
    type          go to state 98
    baseType      go to state 30
    intType       go to state 31


State 196

  106 class_var_decl: type class_var_l . semi_colon
  107 class_var_l: class_var_l . TOK_COMMA class_var

    TOK_COMMA      shift, and go to state 216
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 217


State 197

  108 class_var_l: class_var .

    $default  reduce using rule 108 (class_var_l)


State 198

  112 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 112 (function_defn)


State 199

   57 condition: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 218
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 200

   36 if_then_else_stmt: TOK_IF condition . basic_block
   37                  | TOK_IF condition . basic_block TOK_ELSE basic_block

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 219
    TOK_IF         shift, and go to state 142
    TOK_RETURN     shift, and go to state 143
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 144
    TOK_BREAK      shift, and go to state 145
    TOK_IDENT      shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    basic_block        go to state 220
    simple_stmt        go to state 221
    return_stmt        go to state 150
    break_stmt         go to state 151
    empty_block        go to state 222
    func_invocation    go to state 152
    func_name          go to state 81
    assignment         go to state 153
    ref_expr           go to state 154
    semi_colon         go to state 223


State 201

   51 return_stmt: TOK_RETURN expression . semi_colon
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 117
    TOK_MINUS      shift, and go to state 118
    TOK_MULT       shift, and go to state 119
    TOK_DIV        shift, and go to state 120
    TOK_MOD        shift, and go to state 121
    TOK_BITAND     shift, and go to state 122
    TOK_BITOR      shift, and go to state 123
    TOK_BITXOR     shift, and go to state 124
    TOK_SHL        shift, and go to state 125
    TOK_SHR        shift, and go to state 126
    TOK_GT         shift, and go to state 127
    TOK_LT         shift, and go to state 128
    TOK_GE         shift, and go to state 129
    TOK_LE         shift, and go to state 130
    TOK_EQ         shift, and go to state 131
    TOK_NE         shift, and go to state 132
    TOK_AND        shift, and go to state 133
    TOK_OR         shift, and go to state 134
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 224


State 202

   52 return_stmt: TOK_RETURN semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 52 (return_stmt)


State 203

   35 while_stmt: TOK_WHILE condition . basic_block

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 219
    TOK_IF         shift, and go to state 142
    TOK_RETURN     shift, and go to state 143
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 144
    TOK_BREAK      shift, and go to state 145
    TOK_IDENT      shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    basic_block        go to state 225
    simple_stmt        go to state 221
    return_stmt        go to state 150
    break_stmt         go to state 151
    empty_block        go to state 222
    func_invocation    go to state 152
    func_name          go to state 81
    assignment         go to state 153
    ref_expr           go to state 154
    semi_colon         go to state 223


State 204

   54 break_stmt: TOK_BREAK TOK_UINTNUM . semi_colon

    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 226


State 205

   53 break_stmt: TOK_BREAK semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 53 (break_stmt)


State 206

   45 simple_stmt: func_invocation semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 45 (simple_stmt)


State 207

   46 simple_stmt: assignment semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 46 (simple_stmt)


State 208

  120 local_var: TOK_IDENT .
  121          | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 227

    $default  reduce using rule 120 (local_var)


State 209

  117 local_decl: type local_l . semi_colon
  118 local_l: local_l . TOK_COMMA local_var

    TOK_COMMA      shift, and go to state 228
    TOK_SEMICOLON  shift, and go to state 45

    semi_colon  go to state 229


State 210

  119 local_l: local_var .

    $default  reduce using rule 119 (local_l)


State 211

  123 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN .

    $default  reduce using rule 123 (func_param_l)


State 212

  124 func_param_l: func_param_l TOK_COMMA func_param .

    $default  reduce using rule 124 (func_param_l)


State 213

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE .

    $default  reduce using rule 15 (compound_stmt2)


State 214

   62 caller_param_l: caller_param_l TOK_COMMA . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 230
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 215

   58 func_invocation: func_name TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 58 (func_invocation)


State 216

  107 class_var_l: class_var_l TOK_COMMA . class_var

    TOK_IDENT  shift, and go to state 231

    class_var  go to state 232


State 217

  106 class_var_decl: type class_var_l semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 106 (class_var_decl)


State 218

   57 condition: TOK_LPAREN expression . TOK_RPAREN
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134
    TOK_RPAREN  shift, and go to state 233


State 219

   38 basic_block: TOK_LBRACE . stmt_plus2 TOK_RBRACE semi_colon
   39            | TOK_LBRACE . stmt_plus2 TOK_RBRACE
   55 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE semi_colon
   56            | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 45
    TOK_IF         shift, and go to state 142
    TOK_RETURN     shift, and go to state 143
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 144
    TOK_BREAK      shift, and go to state 145
    TOK_IDENT      shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    stmt_plus2         go to state 234
    simple_stmt        go to state 235
    return_stmt        go to state 150
    break_stmt         go to state 151
    func_invocation    go to state 152
    func_name          go to state 81
    assignment         go to state 153
    ref_expr           go to state 154
    semi_colon         go to state 236


State 220

   36 if_then_else_stmt: TOK_IF condition basic_block .
   37                  | TOK_IF condition basic_block . TOK_ELSE basic_block

    TOK_ELSE  shift, and go to state 237

    TOK_ELSE  [reduce using rule 36 (if_then_else_stmt)]
    $default  reduce using rule 36 (if_then_else_stmt)


State 221

   41 basic_block: simple_stmt .

    $default  reduce using rule 41 (basic_block)


State 222

   40 basic_block: empty_block .

    $default  reduce using rule 40 (basic_block)


State 223

   42 basic_block: semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 42 (basic_block)


State 224

   51 return_stmt: TOK_RETURN expression semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 51 (return_stmt)


State 225

   35 while_stmt: TOK_WHILE condition basic_block .

    $default  reduce using rule 35 (while_stmt)


State 226

   54 break_stmt: TOK_BREAK TOK_UINTNUM semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 54 (break_stmt)


State 227

  121 local_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 65
    TOK_BITNOT     shift, and go to state 66
    TOK_NOT        shift, and go to state 67
    TOK_LPAREN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 71
    TOK_DOUBLENUM  shift, and go to state 72
    TOK_STRCONST   shift, and go to state 73
    TOK_TRUE       shift, and go to state 74
    TOK_FALSE      shift, and go to state 75
    TOK_IDENT      shift, and go to state 76

    func_invocation   go to state 80
    func_name         go to state 81
    assignment        go to state 82
    expression        go to state 238
    unary_operation   go to state 84
    binary_operation  go to state 85
    ref_expr          go to state 86
    literal           go to state 88


State 228

  118 local_l: local_l TOK_COMMA . local_var

    TOK_IDENT  shift, and go to state 208

    local_var  go to state 239


State 229

  117 local_decl: type local_l semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 117 (local_decl)


State 230

   62 caller_param_l: caller_param_l TOK_COMMA expression .
   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 62 (caller_param_l)


State 231

  109 class_var: TOK_IDENT .

    $default  reduce using rule 109 (class_var)


State 232

  107 class_var_l: class_var_l TOK_COMMA class_var .

    $default  reduce using rule 107 (class_var_l)


State 233

   57 condition: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 57 (condition)


State 234

   38 basic_block: TOK_LBRACE stmt_plus2 . TOK_RBRACE semi_colon
   39            | TOK_LBRACE stmt_plus2 . TOK_RBRACE
   43 stmt_plus2: stmt_plus2 . simple_stmt

    TOK_RBRACE  shift, and go to state 240
    TOK_IF      shift, and go to state 142
    TOK_RETURN  shift, and go to state 143
    TOK_PRINT   shift, and go to state 70
    TOK_WHILE   shift, and go to state 144
    TOK_BREAK   shift, and go to state 145
    TOK_IDENT   shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    simple_stmt        go to state 241
    return_stmt        go to state 150
    break_stmt         go to state 151
    func_invocation    go to state 152
    func_name          go to state 81
    assignment         go to state 153
    ref_expr           go to state 154


State 235

   44 stmt_plus2: simple_stmt .

    $default  reduce using rule 44 (stmt_plus2)


State 236

   55 empty_block: TOK_LBRACE semi_colon . TOK_RBRACE semi_colon
   56            | TOK_LBRACE semi_colon . TOK_RBRACE
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92
    TOK_RBRACE     shift, and go to state 242


State 237

   37 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE . basic_block

    TOK_SEMICOLON  shift, and go to state 45
    TOK_LBRACE     shift, and go to state 219
    TOK_IF         shift, and go to state 142
    TOK_RETURN     shift, and go to state 143
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 144
    TOK_BREAK      shift, and go to state 145
    TOK_IDENT      shift, and go to state 76

    while_stmt         go to state 147
    if_then_else_stmt  go to state 148
    basic_block        go to state 243
    simple_stmt        go to state 221
    return_stmt        go to state 150
    break_stmt         go to state 151
    empty_block        go to state 222
    func_invocation    go to state 152
    func_name          go to state 81
    assignment         go to state 153
    ref_expr           go to state 154
    semi_colon         go to state 223


State 238

   75 binary_operation: expression . TOK_OR expression
   76                 | expression . TOK_AND expression
   77                 | expression . TOK_EQ expression
   78                 | expression . TOK_NE expression
   79                 | expression . TOK_GT expression
   80                 | expression . TOK_LT expression
   81                 | expression . TOK_GE expression
   82                 | expression . TOK_LE expression
   83                 | expression . TOK_BITOR expression
   84                 | expression . TOK_BITXOR expression
   85                 | expression . TOK_BITAND expression
   86                 | expression . TOK_SHL expression
   87                 | expression . TOK_SHR expression
   88                 | expression . TOK_PLUS expression
   89                 | expression . TOK_MINUS expression
   90                 | expression . TOK_MULT expression
   91                 | expression . TOK_DIV expression
   92                 | expression . TOK_MOD expression
  121 local_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 117
    TOK_MINUS   shift, and go to state 118
    TOK_MULT    shift, and go to state 119
    TOK_DIV     shift, and go to state 120
    TOK_MOD     shift, and go to state 121
    TOK_BITAND  shift, and go to state 122
    TOK_BITOR   shift, and go to state 123
    TOK_BITXOR  shift, and go to state 124
    TOK_SHL     shift, and go to state 125
    TOK_SHR     shift, and go to state 126
    TOK_GT      shift, and go to state 127
    TOK_LT      shift, and go to state 128
    TOK_GE      shift, and go to state 129
    TOK_LE      shift, and go to state 130
    TOK_EQ      shift, and go to state 131
    TOK_NE      shift, and go to state 132
    TOK_AND     shift, and go to state 133
    TOK_OR      shift, and go to state 134

    $default  reduce using rule 121 (local_var)


State 239

  118 local_l: local_l TOK_COMMA local_var .

    $default  reduce using rule 118 (local_l)


State 240

   38 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE . semi_colon
   39            | TOK_LBRACE stmt_plus2 TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 45

    $default  reduce using rule 39 (basic_block)

    semi_colon  go to state 244


State 241

   43 stmt_plus2: stmt_plus2 simple_stmt .

    $default  reduce using rule 43 (stmt_plus2)


State 242

   55 empty_block: TOK_LBRACE semi_colon TOK_RBRACE . semi_colon
   56            | TOK_LBRACE semi_colon TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 45

    $default  reduce using rule 56 (empty_block)

    semi_colon  go to state 245


State 243

   37 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE basic_block .

    $default  reduce using rule 37 (if_then_else_stmt)


State 244

   38 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 38 (basic_block)


State 245

   55 empty_block: TOK_LBRACE semi_colon TOK_RBRACE semi_colon .
  134 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 92

    $default  reduce using rule 55 (empty_block)
