Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_RETURN
   TOK_PRINT
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_LBRACK
   TOK_DOT


State 193 conflicts: 1 shift/reduce


Grammar

    0 $accept: s_specification $end

    1 s_specification: program

    2 program: specification

    3 specification: specification declaration
    4              | specification rule
    5              | /* empty */

    6 declaration: event_decl
    7            | function_proto
    8            | class_decl
    9            | global_decl

   10 rule: primitive_all TOK_ARROW rule_stmts

   11 rule_stmts: TOK_LBRACE compoundStmt TOK_RBRACE semi_colon
   12           | TOK_LBRACE compoundStmt TOK_RBRACE
   13           | empty_block semi_colon
   14           | empty_block
   15           | expression semi_colon

   16 primitive_all: normal_event
   17              | any_event
   18              | normal_event TOK_BITOR expression
   19              | binary_event_oprs
   20              | TOK_LPAREN primitive_all TOK_RPAREN

   21 binary_event_oprs: primitive_all TOK_PAT_OR primitive_all
   22                  | primitive_all TOK_COLON primitive_all
   23                  | primitive_all TOK_PAT_STAR primitive_all
   24                  | TOK_NOT primitive_all
   25                  | /* empty */

   26 any_event: TOK_ANY

   27 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN

   28 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT
   29               | TOK_IDENT
   30               | /* empty */

   31 compoundStmt: TOK_LBRACE compoundStmt TOK_RBRACE
   32             | empty_block
   33             | compoundStmt simple_stmt
   34             | /* empty */

   35 simple_stmt: func_invocation semi_colon
   36            | assignment semi_colon
   37            | if_then_else_stmt

   38 if_then_else_stmt: TOK_IF condition basic_block
   39                  | TOK_IF condition basic_block TOK_ELSE basic_block

   40 basic_block: TOK_LBRACE compoundStmt TOK_RBRACE
   41            | empty_block
   42            | simple_stmt
   43            | semi_colon

   44 empty_block: TOK_LBRACE semi_colon TOK_RBRACE

   45 condition: TOK_LPAREN expression TOK_RPAREN

   46 func_invocation: TOK_IDENT TOK_LPAREN caller_param_l TOK_RPAREN
   47                | TOK_IDENT TOK_LPAREN TOK_RPAREN

   48 caller_param_l: caller_param_l TOK_COMMA expression
   49               | expression

   50 assignment: ref_expr TOK_ASSIGN expression

   51 expression: literal
   52           | ref_expr
   53           | func_invocation
   54           | assignment
   55           | unary_operation
   56           | binary_operation
   57           | TOK_LPAREN expression TOK_RPAREN

   58 unary_operation: TOK_NOT expression
   59                | TOK_BITNOT expression
   60                | TOK_MINUS expression

   61 binary_operation: expression TOK_OR expression
   62                 | expression TOK_AND expression
   63                 | expression TOK_EQ expression
   64                 | expression TOK_NE expression
   65                 | expression TOK_GT expression
   66                 | expression TOK_LT expression
   67                 | expression TOK_GE expression
   68                 | expression TOK_LE expression
   69                 | expression TOK_BITOR expression
   70                 | expression TOK_BITXOR expression
   71                 | expression TOK_BITAND expression
   72                 | expression TOK_SHL expression
   73                 | expression TOK_SHR expression
   74                 | expression TOK_PLUS expression
   75                 | expression TOK_MINUS expression
   76                 | expression TOK_MULT expression
   77                 | expression TOK_DIV expression
   78                 | expression TOK_MOD expression

   79 ref_expr: TOK_IDENT

   80 global_decl: type global_l semi_colon

   81 global_l: global_l TOK_COMMA global_var
   82         | global_var

   83 global_var: TOK_IDENT
   84           | TOK_IDENT TOK_ASSIGN expression

   85 class_decl: TOK_CLASS TOK_IDENT semi_colon

   86 function_body: function_body local_decl
   87              | function_body simple_stmt
   88              | /* empty */

   89 local_decl: type local_l semi_colon

   90 local_l: local_l TOK_COMMA local_var
   91        | local_var

   92 local_var: TOK_IDENT
   93          | TOK_IDENT TOK_ASSIGN expression

   94 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon

   95 function_decl: type TOK_IDENT func_param_l

   96 function_proto: function_decl semi_colon
   97               | function_decl function_defn

   98 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN
   99             | func_param_l TOK_COMMA func_param
  100             | func_param
  101             | TOK_LPAREN TOK_RPAREN

  102 func_param: type TOK_IDENT

  103 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon

  104 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN
  105              | event_param_l TOK_COMMA event_param
  106              | event_param
  107              | TOK_LPAREN TOK_RPAREN

  108 event_param: type TOK_IDENT

  109 semi_colon: semi_colon TOK_SEMICOLON
  110           | TOK_SEMICOLON

  111 literal: TOK_UINTNUM
  112        | TOK_DOUBLENUM
  113        | TOK_STRCONST
  114        | TOK_TRUE
  115        | TOK_FALSE

  116 type: baseType
  117     | TOK_IDENT

  118 baseType: TOK_VOID
  119         | TOK_BOOL
  120         | TOK_BYTE
  121         | TOK_STRING
  122         | TOK_INT
  123         | TOK_DOUBLE
  124         | TOK_UNSIGNED TOK_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 23
TOK_PAT_OR (260) 21
TOK_PAT_NOT (261)
TOK_PLUS (262) 74
TOK_MINUS (263) 60 75
TOK_UMINUS (264)
TOK_MULT (265) 76
TOK_DIV (266) 77
TOK_MOD (267) 78
TOK_BITAND (268) 71
TOK_BITOR (269) 18 69
TOK_BITNOT (270) 59
TOK_BITXOR (271) 70
TOK_SHL (272) 72
TOK_SHR (273) 73
TOK_GT (274) 65
TOK_LT (275) 66
TOK_GE (276) 67
TOK_LE (277) 68
TOK_EQ (278) 63
TOK_NE (279) 64
TOK_AND (280) 62
TOK_OR (281) 61
TOK_NOT (282) 24 58
TOK_COMMA (283) 28 48 81 90 99 105
TOK_ASSIGN (284) 50 84 93
TOK_SEMICOLON (285) 109 110
TOK_COLON (286) 22
TOK_ARROW (287) 10
TOK_LBRACE (288) 11 12 31 40 44 94
TOK_RBRACE (289) 11 12 31 40 44 94
TOK_LPAREN (290) 20 27 45 46 47 57 98 101 104 107
TOK_RPAREN (291) 20 27 45 46 47 57 98 101 104 107
TOK_IF (292) 38 39
TOK_ELSE (293) 39
TOK_CLASS (294) 85
TOK_RETURN (295)
TOK_EVENT (296) 103
TOK_ANY (297) 26
TOK_PRINT (298)
TOK_UINTNUM (299) 111
TOK_DOUBLENUM (300) 112
TOK_VOID (301) 118
TOK_STRING (302) 121
TOK_STRCONST (303) 113
TOK_INT (304) 122 124
TOK_UNSIGNED (305) 124
TOK_BOOL (306) 119
TOK_BYTE (307) 120
TOK_DOUBLE (308) 123
TOK_SHORT (309)
TOK_TRUE (310) 114
TOK_FALSE (311) 115
TOK_IDENT (312) 27 28 29 46 47 79 83 84 85 92 93 95 102 103 108 117
TOK_DOUBLE_COLON (313)
TOK_LBRACK (314)
TOK_DOT (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
s_specification (62)
    on left: 1, on right: 0
program (63)
    on left: 2, on right: 1
specification (64)
    on left: 3 4 5, on right: 2 3 4
declaration (65)
    on left: 6 7 8 9, on right: 3
rule (66)
    on left: 10, on right: 4
rule_stmts (67)
    on left: 11 12 13 14 15, on right: 10
primitive_all (68)
    on left: 16 17 18 19 20, on right: 10 20 21 22 23 24
binary_event_oprs (69)
    on left: 21 22 23 24 25, on right: 19
any_event (70)
    on left: 26, on right: 17
normal_event (71)
    on left: 27, on right: 16 18
event_aparam_l (72)
    on left: 28 29 30, on right: 27 28
compoundStmt (73)
    on left: 31 32 33 34, on right: 11 12 31 33 40
simple_stmt (74)
    on left: 35 36 37, on right: 33 42 87
if_then_else_stmt (75)
    on left: 38 39, on right: 37
basic_block (76)
    on left: 40 41 42 43, on right: 38 39
empty_block (77)
    on left: 44, on right: 13 14 32 41
condition (78)
    on left: 45, on right: 38 39
func_invocation (79)
    on left: 46 47, on right: 35 53
caller_param_l (80)
    on left: 48 49, on right: 46 48
assignment (81)
    on left: 50, on right: 36 54
expression (82)
    on left: 51 52 53 54 55 56 57, on right: 15 18 45 48 49 50 57 58
    59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 84
    93
unary_operation (83)
    on left: 58 59 60, on right: 55
binary_operation (84)
    on left: 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78,
    on right: 56
ref_expr (85)
    on left: 79, on right: 50 52
global_decl (86)
    on left: 80, on right: 9
global_l (87)
    on left: 81 82, on right: 80 81
global_var (88)
    on left: 83 84, on right: 81 82
class_decl (89)
    on left: 85, on right: 8
function_body (90)
    on left: 86 87 88, on right: 86 87 94
local_decl (91)
    on left: 89, on right: 86
local_l (92)
    on left: 90 91, on right: 89 90
local_var (93)
    on left: 92 93, on right: 90 91
function_defn (94)
    on left: 94, on right: 97
function_decl (95)
    on left: 95, on right: 96 97
function_proto (96)
    on left: 96 97, on right: 7
func_param_l (97)
    on left: 98 99 100 101, on right: 95 98 99
func_param (98)
    on left: 102, on right: 99 100
event_decl (99)
    on left: 103, on right: 6
event_param_l (100)
    on left: 104 105 106 107, on right: 103 104 105
event_param (101)
    on left: 108, on right: 105 106
semi_colon (102)
    on left: 109 110, on right: 11 13 15 35 36 43 44 80 85 89 94 96
    103 109
literal (103)
    on left: 111 112 113 114 115, on right: 51
type (104)
    on left: 116 117, on right: 80 89 95 102 108
baseType (105)
    on left: 118 119 120 121 122 123 124, on right: 116


state 0

    0 $accept: . s_specification $end

    $default  reduce using rule 5 (specification)

    s_specification  go to state 1
    program          go to state 2
    specification    go to state 3


state 1

    0 $accept: s_specification . $end

    $end  shift, and go to state 4


state 2

    1 s_specification: program .

    $default  reduce using rule 1 (s_specification)


state 3

    2 program: specification .
    3 specification: specification . declaration
    4              | specification . rule

    TOK_NOT       shift, and go to state 5
    TOK_LPAREN    shift, and go to state 6
    TOK_CLASS     shift, and go to state 7
    TOK_EVENT     shift, and go to state 8
    TOK_ANY       shift, and go to state 9
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 17

    $end      reduce using rule 2 (program)
    $default  reduce using rule 25 (binary_event_oprs)

    declaration        go to state 18
    rule               go to state 19
    primitive_all      go to state 20
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23
    global_decl        go to state 24
    class_decl         go to state 25
    function_decl      go to state 26
    function_proto     go to state 27
    event_decl         go to state 28
    type               go to state 29
    baseType           go to state 30


state 4

    0 $accept: s_specification $end .

    $default  accept


state 5

   24 binary_event_oprs: TOK_NOT . primitive_all

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 6
    TOK_ANY     shift, and go to state 9
    TOK_IDENT   shift, and go to state 31

    $default  reduce using rule 25 (binary_event_oprs)

    primitive_all      go to state 32
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23


state 6

   20 primitive_all: TOK_LPAREN . primitive_all TOK_RPAREN

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 6
    TOK_ANY     shift, and go to state 9
    TOK_IDENT   shift, and go to state 31

    $default  reduce using rule 25 (binary_event_oprs)

    primitive_all      go to state 33
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23


state 7

   85 class_decl: TOK_CLASS . TOK_IDENT semi_colon

    TOK_IDENT  shift, and go to state 34


state 8

  103 event_decl: TOK_EVENT . TOK_IDENT event_param_l semi_colon

    TOK_IDENT  shift, and go to state 35


state 9

   26 any_event: TOK_ANY .

    $default  reduce using rule 26 (any_event)


state 10

  118 baseType: TOK_VOID .

    $default  reduce using rule 118 (baseType)


state 11

  121 baseType: TOK_STRING .

    $default  reduce using rule 121 (baseType)


state 12

  122 baseType: TOK_INT .

    $default  reduce using rule 122 (baseType)


state 13

  124 baseType: TOK_UNSIGNED . TOK_INT

    TOK_INT  shift, and go to state 36


state 14

  119 baseType: TOK_BOOL .

    $default  reduce using rule 119 (baseType)


state 15

  120 baseType: TOK_BYTE .

    $default  reduce using rule 120 (baseType)


state 16

  123 baseType: TOK_DOUBLE .

    $default  reduce using rule 123 (baseType)


state 17

   27 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN
  117 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 37

    $default  reduce using rule 117 (type)


state 18

    3 specification: specification declaration .

    $default  reduce using rule 3 (specification)


state 19

    4 specification: specification rule .

    $default  reduce using rule 4 (specification)


state 20

   10 rule: primitive_all . TOK_ARROW rule_stmts
   21 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   22                  | primitive_all . TOK_COLON primitive_all
   23                  | primitive_all . TOK_PAT_STAR primitive_all

    TOK_PAT_STAR  shift, and go to state 38
    TOK_PAT_OR    shift, and go to state 39
    TOK_COLON     shift, and go to state 40
    TOK_ARROW     shift, and go to state 41


state 21

   19 primitive_all: binary_event_oprs .

    $default  reduce using rule 19 (primitive_all)


state 22

   17 primitive_all: any_event .

    $default  reduce using rule 17 (primitive_all)


state 23

   16 primitive_all: normal_event .
   18              | normal_event . TOK_BITOR expression

    TOK_BITOR  shift, and go to state 42

    $default  reduce using rule 16 (primitive_all)


state 24

    9 declaration: global_decl .

    $default  reduce using rule 9 (declaration)


state 25

    8 declaration: class_decl .

    $default  reduce using rule 8 (declaration)


state 26

   96 function_proto: function_decl . semi_colon
   97               | function_decl . function_defn

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 44

    function_defn  go to state 45
    semi_colon     go to state 46


state 27

    7 declaration: function_proto .

    $default  reduce using rule 7 (declaration)


state 28

    6 declaration: event_decl .

    $default  reduce using rule 6 (declaration)


state 29

   80 global_decl: type . global_l semi_colon
   95 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 47

    global_l    go to state 48
    global_var  go to state 49


state 30

  116 type: baseType .

    $default  reduce using rule 116 (type)


state 31

   27 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN

    TOK_LPAREN  shift, and go to state 37


state 32

   21 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   22                  | primitive_all . TOK_COLON primitive_all
   23                  | primitive_all . TOK_PAT_STAR primitive_all
   24                  | TOK_NOT primitive_all .

    $default  reduce using rule 24 (binary_event_oprs)


state 33

   20 primitive_all: TOK_LPAREN primitive_all . TOK_RPAREN
   21 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   22                  | primitive_all . TOK_COLON primitive_all
   23                  | primitive_all . TOK_PAT_STAR primitive_all

    TOK_PAT_STAR  shift, and go to state 38
    TOK_PAT_OR    shift, and go to state 39
    TOK_COLON     shift, and go to state 40
    TOK_RPAREN    shift, and go to state 50


state 34

   85 class_decl: TOK_CLASS TOK_IDENT . semi_colon

    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 51


state 35

  103 event_decl: TOK_EVENT TOK_IDENT . event_param_l semi_colon

    TOK_LPAREN    shift, and go to state 52
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    event_param_l  go to state 54
    event_param    go to state 55
    type           go to state 56
    baseType       go to state 30


state 36

  124 baseType: TOK_UNSIGNED TOK_INT .

    $default  reduce using rule 124 (baseType)


state 37

   27 normal_event: TOK_IDENT TOK_LPAREN . event_aparam_l TOK_RPAREN

    TOK_IDENT  shift, and go to state 57

    $default  reduce using rule 30 (event_aparam_l)

    event_aparam_l  go to state 58


state 38

   23 binary_event_oprs: primitive_all TOK_PAT_STAR . primitive_all

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 6
    TOK_ANY     shift, and go to state 9
    TOK_IDENT   shift, and go to state 31

    $default  reduce using rule 25 (binary_event_oprs)

    primitive_all      go to state 59
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23


state 39

   21 binary_event_oprs: primitive_all TOK_PAT_OR . primitive_all

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 6
    TOK_ANY     shift, and go to state 9
    TOK_IDENT   shift, and go to state 31

    $default  reduce using rule 25 (binary_event_oprs)

    primitive_all      go to state 60
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23


state 40

   22 binary_event_oprs: primitive_all TOK_COLON . primitive_all

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 6
    TOK_ANY     shift, and go to state 9
    TOK_IDENT   shift, and go to state 31

    $default  reduce using rule 25 (binary_event_oprs)

    primitive_all      go to state 61
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23


state 41

   10 rule: primitive_all TOK_ARROW . rule_stmts

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LBRACE     shift, and go to state 65
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    rule_stmts        go to state 73
    empty_block       go to state 74
    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 77
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 42

   18 primitive_all: normal_event TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 82
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 43

  110 semi_colon: TOK_SEMICOLON .

    $default  reduce using rule 110 (semi_colon)


state 44

   94 function_defn: TOK_LBRACE . function_body TOK_RBRACE semi_colon

    $default  reduce using rule 88 (function_body)

    function_body  go to state 83


state 45

   97 function_proto: function_decl function_defn .

    $default  reduce using rule 97 (function_proto)


state 46

   96 function_proto: function_decl semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 96 (function_proto)


state 47

   83 global_var: TOK_IDENT .
   84           | TOK_IDENT . TOK_ASSIGN expression
   95 function_decl: type TOK_IDENT . func_param_l

    TOK_ASSIGN    shift, and go to state 85
    TOK_LPAREN    shift, and go to state 86
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    $default  reduce using rule 83 (global_var)

    func_param_l  go to state 87
    func_param    go to state 88
    type          go to state 89
    baseType      go to state 30


state 48

   80 global_decl: type global_l . semi_colon
   81 global_l: global_l . TOK_COMMA global_var

    TOK_COMMA      shift, and go to state 90
    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 91


state 49

   82 global_l: global_var .

    $default  reduce using rule 82 (global_l)


state 50

   20 primitive_all: TOK_LPAREN primitive_all TOK_RPAREN .

    $default  reduce using rule 20 (primitive_all)


state 51

   85 class_decl: TOK_CLASS TOK_IDENT semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 85 (class_decl)


state 52

  104 event_param_l: TOK_LPAREN . event_param_l TOK_RPAREN
  107              | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 52
    TOK_RPAREN    shift, and go to state 92
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    event_param_l  go to state 93
    event_param    go to state 55
    type           go to state 56
    baseType       go to state 30


state 53

  117 type: TOK_IDENT .

    $default  reduce using rule 117 (type)


state 54

  103 event_decl: TOK_EVENT TOK_IDENT event_param_l . semi_colon
  105 event_param_l: event_param_l . TOK_COMMA event_param

    TOK_COMMA      shift, and go to state 94
    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 95


state 55

  106 event_param_l: event_param .

    $default  reduce using rule 106 (event_param_l)


state 56

  108 event_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 96


state 57

   29 event_aparam_l: TOK_IDENT .

    $default  reduce using rule 29 (event_aparam_l)


state 58

   27 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l . TOK_RPAREN
   28 event_aparam_l: event_aparam_l . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 97
    TOK_RPAREN  shift, and go to state 98


state 59

   21 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   22                  | primitive_all . TOK_COLON primitive_all
   23                  | primitive_all . TOK_PAT_STAR primitive_all
   23                  | primitive_all TOK_PAT_STAR primitive_all .

    $default  reduce using rule 23 (binary_event_oprs)


state 60

   21 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   21                  | primitive_all TOK_PAT_OR primitive_all .
   22                  | primitive_all . TOK_COLON primitive_all
   23                  | primitive_all . TOK_PAT_STAR primitive_all

    TOK_PAT_STAR  shift, and go to state 38
    TOK_COLON     shift, and go to state 40

    $default  reduce using rule 21 (binary_event_oprs)


state 61

   21 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   22                  | primitive_all . TOK_COLON primitive_all
   22                  | primitive_all TOK_COLON primitive_all .
   23                  | primitive_all . TOK_PAT_STAR primitive_all

    TOK_PAT_STAR  shift, and go to state 38

    $default  reduce using rule 22 (binary_event_oprs)


state 62

   60 unary_operation: TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 99
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 63

   59 unary_operation: TOK_BITNOT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 100
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 64

   58 unary_operation: TOK_NOT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 101
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 65

   11 rule_stmts: TOK_LBRACE . compoundStmt TOK_RBRACE semi_colon
   12           | TOK_LBRACE . compoundStmt TOK_RBRACE
   44 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 102

    $default  reduce using rule 34 (compoundStmt)

    compoundStmt  go to state 103
    empty_block   go to state 104
    semi_colon    go to state 105


state 66

   57 expression: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 106
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 67

  111 literal: TOK_UINTNUM .

    $default  reduce using rule 111 (literal)


state 68

  112 literal: TOK_DOUBLENUM .

    $default  reduce using rule 112 (literal)


state 69

  113 literal: TOK_STRCONST .

    $default  reduce using rule 113 (literal)


state 70

  114 literal: TOK_TRUE .

    $default  reduce using rule 114 (literal)


state 71

  115 literal: TOK_FALSE .

    $default  reduce using rule 115 (literal)


state 72

   46 func_invocation: TOK_IDENT . TOK_LPAREN caller_param_l TOK_RPAREN
   47                | TOK_IDENT . TOK_LPAREN TOK_RPAREN
   79 ref_expr: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 107

    $default  reduce using rule 79 (ref_expr)


state 73

   10 rule: primitive_all TOK_ARROW rule_stmts .

    $default  reduce using rule 10 (rule)


state 74

   13 rule_stmts: empty_block . semi_colon
   14           | empty_block .

    TOK_SEMICOLON  shift, and go to state 43

    $default  reduce using rule 14 (rule_stmts)

    semi_colon  go to state 108


state 75

   53 expression: func_invocation .

    $default  reduce using rule 53 (expression)


state 76

   54 expression: assignment .

    $default  reduce using rule 54 (expression)


state 77

   15 rule_stmts: expression . semi_colon
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 109
    TOK_MINUS      shift, and go to state 110
    TOK_MULT       shift, and go to state 111
    TOK_DIV        shift, and go to state 112
    TOK_MOD        shift, and go to state 113
    TOK_BITAND     shift, and go to state 114
    TOK_BITOR      shift, and go to state 115
    TOK_BITXOR     shift, and go to state 116
    TOK_SHL        shift, and go to state 117
    TOK_SHR        shift, and go to state 118
    TOK_GT         shift, and go to state 119
    TOK_LT         shift, and go to state 120
    TOK_GE         shift, and go to state 121
    TOK_LE         shift, and go to state 122
    TOK_EQ         shift, and go to state 123
    TOK_NE         shift, and go to state 124
    TOK_AND        shift, and go to state 125
    TOK_OR         shift, and go to state 126
    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 127


state 78

   55 expression: unary_operation .

    $default  reduce using rule 55 (expression)


state 79

   56 expression: binary_operation .

    $default  reduce using rule 56 (expression)


state 80

   50 assignment: ref_expr . TOK_ASSIGN expression
   52 expression: ref_expr .

    TOK_ASSIGN  shift, and go to state 128

    $default  reduce using rule 52 (expression)


state 81

   51 expression: literal .

    $default  reduce using rule 51 (expression)


state 82

   18 primitive_all: normal_event TOK_BITOR expression .
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124
    TOK_AND     shift, and go to state 125
    TOK_OR      shift, and go to state 126

    $default  reduce using rule 18 (primitive_all)


state 83

   86 function_body: function_body . local_decl
   87              | function_body . simple_stmt
   94 function_defn: TOK_LBRACE function_body . TOK_RBRACE semi_colon

    TOK_RBRACE    shift, and go to state 129
    TOK_IF        shift, and go to state 130
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 131

    simple_stmt        go to state 132
    if_then_else_stmt  go to state 133
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136
    local_decl         go to state 137
    type               go to state 138
    baseType           go to state 30


state 84

  109 semi_colon: semi_colon TOK_SEMICOLON .

    $default  reduce using rule 109 (semi_colon)


state 85

   84 global_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 139
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 86

   98 func_param_l: TOK_LPAREN . func_param_l TOK_RPAREN
  101             | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 86
    TOK_RPAREN    shift, and go to state 140
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    func_param_l  go to state 141
    func_param    go to state 88
    type          go to state 89
    baseType      go to state 30


state 87

   95 function_decl: type TOK_IDENT func_param_l .
   99 func_param_l: func_param_l . TOK_COMMA func_param

    TOK_COMMA  shift, and go to state 142

    $default  reduce using rule 95 (function_decl)


state 88

  100 func_param_l: func_param .

    $default  reduce using rule 100 (func_param_l)


state 89

  102 func_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 143


state 90

   81 global_l: global_l TOK_COMMA . global_var

    TOK_IDENT  shift, and go to state 144

    global_var  go to state 145


state 91

   80 global_decl: type global_l semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 80 (global_decl)


state 92

  107 event_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 107 (event_param_l)


state 93

  104 event_param_l: TOK_LPAREN event_param_l . TOK_RPAREN
  105              | event_param_l . TOK_COMMA event_param

    TOK_COMMA   shift, and go to state 94
    TOK_RPAREN  shift, and go to state 146


state 94

  105 event_param_l: event_param_l TOK_COMMA . event_param

    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    event_param  go to state 147
    type         go to state 56
    baseType     go to state 30


state 95

  103 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 103 (event_decl)


state 96

  108 event_param: type TOK_IDENT .

    $default  reduce using rule 108 (event_param)


state 97

   28 event_aparam_l: event_aparam_l TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 148


state 98

   27 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN .

    $default  reduce using rule 27 (normal_event)


state 99

   60 unary_operation: TOK_MINUS expression .
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    $default  reduce using rule 60 (unary_operation)


state 100

   59 unary_operation: TOK_BITNOT expression .
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 109
    TOK_MINUS  shift, and go to state 110
    TOK_MULT   shift, and go to state 111
    TOK_DIV    shift, and go to state 112
    TOK_MOD    shift, and go to state 113
    TOK_SHL    shift, and go to state 117
    TOK_SHR    shift, and go to state 118

    $default  reduce using rule 59 (unary_operation)


state 101

   58 unary_operation: TOK_NOT expression .
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124

    $default  reduce using rule 58 (unary_operation)


state 102

   31 compoundStmt: TOK_LBRACE . compoundStmt TOK_RBRACE
   44 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 102

    $default  reduce using rule 34 (compoundStmt)

    compoundStmt  go to state 149
    empty_block   go to state 104
    semi_colon    go to state 105


state 103

   11 rule_stmts: TOK_LBRACE compoundStmt . TOK_RBRACE semi_colon
   12           | TOK_LBRACE compoundStmt . TOK_RBRACE
   33 compoundStmt: compoundStmt . simple_stmt

    TOK_RBRACE  shift, and go to state 150
    TOK_IF      shift, and go to state 130
    TOK_IDENT   shift, and go to state 72

    simple_stmt        go to state 151
    if_then_else_stmt  go to state 133
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136


state 104

   32 compoundStmt: empty_block .

    $default  reduce using rule 32 (compoundStmt)


state 105

   44 empty_block: TOK_LBRACE semi_colon . TOK_RBRACE
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84
    TOK_RBRACE     shift, and go to state 152


state 106

   57 expression: TOK_LPAREN expression . TOK_RPAREN
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124
    TOK_AND     shift, and go to state 125
    TOK_OR      shift, and go to state 126
    TOK_RPAREN  shift, and go to state 153


state 107

   46 func_invocation: TOK_IDENT TOK_LPAREN . caller_param_l TOK_RPAREN
   47                | TOK_IDENT TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_RPAREN     shift, and go to state 154
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    caller_param_l    go to state 155
    assignment        go to state 76
    expression        go to state 156
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 108

   13 rule_stmts: empty_block semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 13 (rule_stmts)


state 109

   74 binary_operation: expression TOK_PLUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 157
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 110

   75 binary_operation: expression TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 158
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 111

   76 binary_operation: expression TOK_MULT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 159
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 112

   77 binary_operation: expression TOK_DIV . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 160
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 113

   78 binary_operation: expression TOK_MOD . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 161
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 114

   71 binary_operation: expression TOK_BITAND . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 162
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 115

   69 binary_operation: expression TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 163
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 116

   70 binary_operation: expression TOK_BITXOR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 164
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 117

   72 binary_operation: expression TOK_SHL . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 165
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 118

   73 binary_operation: expression TOK_SHR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 166
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 119

   65 binary_operation: expression TOK_GT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 167
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 120

   66 binary_operation: expression TOK_LT . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 168
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 121

   67 binary_operation: expression TOK_GE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 169
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 122

   68 binary_operation: expression TOK_LE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 170
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 123

   63 binary_operation: expression TOK_EQ . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 171
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 124

   64 binary_operation: expression TOK_NE . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 172
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 125

   62 binary_operation: expression TOK_AND . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 173
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 126

   61 binary_operation: expression TOK_OR . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 174
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 127

   15 rule_stmts: expression semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 15 (rule_stmts)


state 128

   50 assignment: ref_expr TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 175
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 129

   94 function_defn: TOK_LBRACE function_body TOK_RBRACE . semi_colon

    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 176


state 130

   38 if_then_else_stmt: TOK_IF . condition basic_block
   39                  | TOK_IF . condition basic_block TOK_ELSE basic_block

    TOK_LPAREN  shift, and go to state 177

    condition  go to state 178


state 131

   46 func_invocation: TOK_IDENT . TOK_LPAREN caller_param_l TOK_RPAREN
   47                | TOK_IDENT . TOK_LPAREN TOK_RPAREN
   79 ref_expr: TOK_IDENT .
  117 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 107

    TOK_IDENT  reduce using rule 117 (type)
    $default   reduce using rule 79 (ref_expr)


state 132

   87 function_body: function_body simple_stmt .

    $default  reduce using rule 87 (function_body)


state 133

   37 simple_stmt: if_then_else_stmt .

    $default  reduce using rule 37 (simple_stmt)


state 134

   35 simple_stmt: func_invocation . semi_colon

    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 179


state 135

   36 simple_stmt: assignment . semi_colon

    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 180


state 136

   50 assignment: ref_expr . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 128


state 137

   86 function_body: function_body local_decl .

    $default  reduce using rule 86 (function_body)


state 138

   89 local_decl: type . local_l semi_colon

    TOK_IDENT  shift, and go to state 181

    local_l    go to state 182
    local_var  go to state 183


state 139

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression
   84 global_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124
    TOK_AND     shift, and go to state 125
    TOK_OR      shift, and go to state 126

    $default  reduce using rule 84 (global_var)


state 140

  101 func_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 101 (func_param_l)


state 141

   98 func_param_l: TOK_LPAREN func_param_l . TOK_RPAREN
   99             | func_param_l . TOK_COMMA func_param

    TOK_COMMA   shift, and go to state 142
    TOK_RPAREN  shift, and go to state 184


state 142

   99 func_param_l: func_param_l TOK_COMMA . func_param

    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    func_param  go to state 185
    type        go to state 89
    baseType    go to state 30


state 143

  102 func_param: type TOK_IDENT .

    $default  reduce using rule 102 (func_param)


state 144

   83 global_var: TOK_IDENT .
   84           | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 85

    $default  reduce using rule 83 (global_var)


state 145

   81 global_l: global_l TOK_COMMA global_var .

    $default  reduce using rule 81 (global_l)


state 146

  104 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN .

    $default  reduce using rule 104 (event_param_l)


state 147

  105 event_param_l: event_param_l TOK_COMMA event_param .

    $default  reduce using rule 105 (event_param_l)


state 148

   28 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT .

    $default  reduce using rule 28 (event_aparam_l)


state 149

   31 compoundStmt: TOK_LBRACE compoundStmt . TOK_RBRACE
   33             | compoundStmt . simple_stmt

    TOK_RBRACE  shift, and go to state 186
    TOK_IF      shift, and go to state 130
    TOK_IDENT   shift, and go to state 72

    simple_stmt        go to state 151
    if_then_else_stmt  go to state 133
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136


state 150

   11 rule_stmts: TOK_LBRACE compoundStmt TOK_RBRACE . semi_colon
   12           | TOK_LBRACE compoundStmt TOK_RBRACE .

    TOK_SEMICOLON  shift, and go to state 43

    $default  reduce using rule 12 (rule_stmts)

    semi_colon  go to state 187


state 151

   33 compoundStmt: compoundStmt simple_stmt .

    $default  reduce using rule 33 (compoundStmt)


state 152

   44 empty_block: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 44 (empty_block)


state 153

   57 expression: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 57 (expression)


state 154

   47 func_invocation: TOK_IDENT TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 47 (func_invocation)


state 155

   46 func_invocation: TOK_IDENT TOK_LPAREN caller_param_l . TOK_RPAREN
   48 caller_param_l: caller_param_l . TOK_COMMA expression

    TOK_COMMA   shift, and go to state 188
    TOK_RPAREN  shift, and go to state 189


state 156

   49 caller_param_l: expression .
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124
    TOK_AND     shift, and go to state 125
    TOK_OR      shift, and go to state 126

    $default  reduce using rule 49 (caller_param_l)


state 157

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   74                 | expression TOK_PLUS expression .
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 111
    TOK_DIV   shift, and go to state 112
    TOK_MOD   shift, and go to state 113

    $default  reduce using rule 74 (binary_operation)


state 158

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   75                 | expression TOK_MINUS expression .
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 111
    TOK_DIV   shift, and go to state 112
    TOK_MOD   shift, and go to state 113

    $default  reduce using rule 75 (binary_operation)


state 159

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   76                 | expression TOK_MULT expression .
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    $default  reduce using rule 76 (binary_operation)


state 160

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   77                 | expression TOK_DIV expression .
   78                 | expression . TOK_MOD expression

    $default  reduce using rule 77 (binary_operation)


state 161

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression
   78                 | expression TOK_MOD expression .

    $default  reduce using rule 78 (binary_operation)


state 162

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   71                 | expression TOK_BITAND expression .
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 109
    TOK_MINUS  shift, and go to state 110
    TOK_MULT   shift, and go to state 111
    TOK_DIV    shift, and go to state 112
    TOK_MOD    shift, and go to state 113
    TOK_SHL    shift, and go to state 117
    TOK_SHR    shift, and go to state 118

    $default  reduce using rule 71 (binary_operation)


state 163

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   69                 | expression TOK_BITOR expression .
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118

    $default  reduce using rule 69 (binary_operation)


state 164

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   70                 | expression TOK_BITXOR expression .
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118

    $default  reduce using rule 70 (binary_operation)


state 165

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   72                 | expression TOK_SHL expression .
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 109
    TOK_MINUS  shift, and go to state 110
    TOK_MULT   shift, and go to state 111
    TOK_DIV    shift, and go to state 112
    TOK_MOD    shift, and go to state 113

    $default  reduce using rule 72 (binary_operation)


state 166

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   73                 | expression TOK_SHR expression .
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 109
    TOK_MINUS  shift, and go to state 110
    TOK_MULT   shift, and go to state 111
    TOK_DIV    shift, and go to state 112
    TOK_MOD    shift, and go to state 113

    $default  reduce using rule 73 (binary_operation)


state 167

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   65                 | expression TOK_GT expression .
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 65 (binary_operation)


state 168

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   66                 | expression TOK_LT expression .
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 66 (binary_operation)


state 169

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   67                 | expression TOK_GE expression .
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 67 (binary_operation)


state 170

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   68                 | expression TOK_LE expression .
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 68 (binary_operation)


state 171

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   63                 | expression TOK_EQ expression .
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 63 (binary_operation)


state 172

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   64                 | expression TOK_NE expression .
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 64 (binary_operation)


state 173

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   62                 | expression TOK_AND expression .
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124

    $default  reduce using rule 62 (binary_operation)


state 174

   61 binary_operation: expression . TOK_OR expression
   61                 | expression TOK_OR expression .
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124
    TOK_AND     shift, and go to state 125

    $default  reduce using rule 61 (binary_operation)


state 175

   50 assignment: ref_expr TOK_ASSIGN expression .
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124
    TOK_AND     shift, and go to state 125
    TOK_OR      shift, and go to state 126

    $default  reduce using rule 50 (assignment)


state 176

   94 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 94 (function_defn)


state 177

   45 condition: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 190
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 178

   38 if_then_else_stmt: TOK_IF condition . basic_block
   39                  | TOK_IF condition . basic_block TOK_ELSE basic_block

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 191
    TOK_IF         shift, and go to state 130
    TOK_IDENT      shift, and go to state 72

    simple_stmt        go to state 192
    if_then_else_stmt  go to state 133
    basic_block        go to state 193
    empty_block        go to state 194
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136
    semi_colon         go to state 195


state 179

   35 simple_stmt: func_invocation semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 35 (simple_stmt)


state 180

   36 simple_stmt: assignment semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 36 (simple_stmt)


state 181

   92 local_var: TOK_IDENT .
   93          | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 196

    $default  reduce using rule 92 (local_var)


state 182

   89 local_decl: type local_l . semi_colon
   90 local_l: local_l . TOK_COMMA local_var

    TOK_COMMA      shift, and go to state 197
    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 198


state 183

   91 local_l: local_var .

    $default  reduce using rule 91 (local_l)


state 184

   98 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN .

    $default  reduce using rule 98 (func_param_l)


state 185

   99 func_param_l: func_param_l TOK_COMMA func_param .

    $default  reduce using rule 99 (func_param_l)


state 186

   31 compoundStmt: TOK_LBRACE compoundStmt TOK_RBRACE .

    $default  reduce using rule 31 (compoundStmt)


state 187

   11 rule_stmts: TOK_LBRACE compoundStmt TOK_RBRACE semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 11 (rule_stmts)


state 188

   48 caller_param_l: caller_param_l TOK_COMMA . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 199
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 189

   46 func_invocation: TOK_IDENT TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 46 (func_invocation)


state 190

   45 condition: TOK_LPAREN expression . TOK_RPAREN
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124
    TOK_AND     shift, and go to state 125
    TOK_OR      shift, and go to state 126
    TOK_RPAREN  shift, and go to state 200


state 191

   40 basic_block: TOK_LBRACE . compoundStmt TOK_RBRACE
   44 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 102

    $default  reduce using rule 34 (compoundStmt)

    compoundStmt  go to state 201
    empty_block   go to state 104
    semi_colon    go to state 105


state 192

   42 basic_block: simple_stmt .

    $default  reduce using rule 42 (basic_block)


state 193

   38 if_then_else_stmt: TOK_IF condition basic_block .
   39                  | TOK_IF condition basic_block . TOK_ELSE basic_block

    TOK_ELSE  shift, and go to state 202

    TOK_ELSE  [reduce using rule 38 (if_then_else_stmt)]
    $default  reduce using rule 38 (if_then_else_stmt)


state 194

   41 basic_block: empty_block .

    $default  reduce using rule 41 (basic_block)


state 195

   43 basic_block: semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 43 (basic_block)


state 196

   93 local_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 62
    TOK_BITNOT     shift, and go to state 63
    TOK_NOT        shift, and go to state 64
    TOK_LPAREN     shift, and go to state 66
    TOK_UINTNUM    shift, and go to state 67
    TOK_DOUBLENUM  shift, and go to state 68
    TOK_STRCONST   shift, and go to state 69
    TOK_TRUE       shift, and go to state 70
    TOK_FALSE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 203
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 197

   90 local_l: local_l TOK_COMMA . local_var

    TOK_IDENT  shift, and go to state 181

    local_var  go to state 204


state 198

   89 local_decl: type local_l semi_colon .
  109 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 89 (local_decl)


state 199

   48 caller_param_l: caller_param_l TOK_COMMA expression .
   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124
    TOK_AND     shift, and go to state 125
    TOK_OR      shift, and go to state 126

    $default  reduce using rule 48 (caller_param_l)


state 200

   45 condition: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 45 (condition)


state 201

   33 compoundStmt: compoundStmt . simple_stmt
   40 basic_block: TOK_LBRACE compoundStmt . TOK_RBRACE

    TOK_RBRACE  shift, and go to state 205
    TOK_IF      shift, and go to state 130
    TOK_IDENT   shift, and go to state 72

    simple_stmt        go to state 151
    if_then_else_stmt  go to state 133
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136


state 202

   39 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE . basic_block

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 191
    TOK_IF         shift, and go to state 130
    TOK_IDENT      shift, and go to state 72

    simple_stmt        go to state 192
    if_then_else_stmt  go to state 133
    basic_block        go to state 206
    empty_block        go to state 194
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136
    semi_colon         go to state 195


state 203

   61 binary_operation: expression . TOK_OR expression
   62                 | expression . TOK_AND expression
   63                 | expression . TOK_EQ expression
   64                 | expression . TOK_NE expression
   65                 | expression . TOK_GT expression
   66                 | expression . TOK_LT expression
   67                 | expression . TOK_GE expression
   68                 | expression . TOK_LE expression
   69                 | expression . TOK_BITOR expression
   70                 | expression . TOK_BITXOR expression
   71                 | expression . TOK_BITAND expression
   72                 | expression . TOK_SHL expression
   73                 | expression . TOK_SHR expression
   74                 | expression . TOK_PLUS expression
   75                 | expression . TOK_MINUS expression
   76                 | expression . TOK_MULT expression
   77                 | expression . TOK_DIV expression
   78                 | expression . TOK_MOD expression
   93 local_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 109
    TOK_MINUS   shift, and go to state 110
    TOK_MULT    shift, and go to state 111
    TOK_DIV     shift, and go to state 112
    TOK_MOD     shift, and go to state 113
    TOK_BITAND  shift, and go to state 114
    TOK_BITOR   shift, and go to state 115
    TOK_BITXOR  shift, and go to state 116
    TOK_SHL     shift, and go to state 117
    TOK_SHR     shift, and go to state 118
    TOK_GT      shift, and go to state 119
    TOK_LT      shift, and go to state 120
    TOK_GE      shift, and go to state 121
    TOK_LE      shift, and go to state 122
    TOK_EQ      shift, and go to state 123
    TOK_NE      shift, and go to state 124
    TOK_AND     shift, and go to state 125
    TOK_OR      shift, and go to state 126

    $default  reduce using rule 93 (local_var)


state 204

   90 local_l: local_l TOK_COMMA local_var .

    $default  reduce using rule 90 (local_l)


state 205

   40 basic_block: TOK_LBRACE compoundStmt TOK_RBRACE .

    $default  reduce using rule 40 (basic_block)


state 206

   39 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE basic_block .

    $default  reduce using rule 39 (if_then_else_stmt)
