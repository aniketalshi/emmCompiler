Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_PRINT
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_LBRACK
   TOK_DOT


State 193 conflicts: 1 shift/reduce


Grammar

    0 $accept: s_specification $end

    1 s_specification: program

    2 program: specification

    3 specification: specification declaration
    4              | specification rule
    5              | /* empty */

    6 declaration: event_decl
    7            | function_proto
    8            | class_decl
    9            | global_decl

   10 rule: primitive_all TOK_ARROW rule_stmts

   11 rule_stmts: compound_stmt2 semi_colon
   12           | compound_stmt2
   13           | expression semi_colon

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE
   16               | compound_stmt1

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE semi_colon TOK_RBRACE

   19 stmt_plus1: stmt_plus1 simple_stmt
   20           | /* empty */

   21 primitive_all: normal_event
   22              | any_event
   23              | normal_event TOK_BITOR expression
   24              | binary_event_oprs
   25              | TOK_LPAREN primitive_all TOK_RPAREN

   26 binary_event_oprs: primitive_all TOK_PAT_OR primitive_all
   27                  | primitive_all TOK_COLON primitive_all
   28                  | primitive_all TOK_PAT_STAR
   29                  | TOK_NOT primitive_all

   30 any_event: TOK_ANY

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT
   33               | TOK_IDENT
   34               | /* empty */

   35 if_then_else_stmt: TOK_IF condition basic_block
   36                  | TOK_IF condition basic_block TOK_ELSE basic_block

   37 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE
   38            | empty_block
   39            | simple_stmt
   40            | semi_colon

   41 stmt_plus2: stmt_plus2 simple_stmt
   42           | /* empty */

   43 simple_stmt: func_invocation semi_colon
   44            | assignment semi_colon
   45            | if_then_else_stmt
   46            | TOK_RETURN expression semi_colon

   47 empty_block: TOK_LBRACE semi_colon TOK_RBRACE

   48 condition: TOK_LPAREN expression TOK_RPAREN

   49 func_invocation: TOK_IDENT TOK_LPAREN caller_param_l TOK_RPAREN
   50                | TOK_IDENT TOK_LPAREN TOK_RPAREN

   51 caller_param_l: caller_param_l TOK_COMMA expression
   52               | expression

   53 assignment: ref_expr TOK_ASSIGN expression

   54 expression: literal
   55           | ref_expr
   56           | func_invocation
   57           | assignment
   58           | unary_operation
   59           | binary_operation
   60           | TOK_LPAREN expression TOK_RPAREN

   61 unary_operation: TOK_NOT expression
   62                | TOK_BITNOT expression
   63                | TOK_MINUS expression

   64 binary_operation: expression TOK_OR expression
   65                 | expression TOK_AND expression
   66                 | expression TOK_EQ expression
   67                 | expression TOK_NE expression
   68                 | expression TOK_GT expression
   69                 | expression TOK_LT expression
   70                 | expression TOK_GE expression
   71                 | expression TOK_LE expression
   72                 | expression TOK_BITOR expression
   73                 | expression TOK_BITXOR expression
   74                 | expression TOK_BITAND expression
   75                 | expression TOK_SHL expression
   76                 | expression TOK_SHR expression
   77                 | expression TOK_PLUS expression
   78                 | expression TOK_MINUS expression
   79                 | expression TOK_MULT expression
   80                 | expression TOK_DIV expression
   81                 | expression TOK_MOD expression

   82 ref_expr: TOK_IDENT

   83 global_decl: type global_l semi_colon

   84 global_l: global_l TOK_COMMA global_var
   85         | global_var

   86 global_var: TOK_IDENT
   87           | TOK_IDENT TOK_ASSIGN expression

   88 class_decl: TOK_CLASS TOK_IDENT semi_colon

   89 function_proto: function_decl semi_colon
   90               | function_decl function_defn

   91 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon

   92 function_body: function_body local_decl
   93              | function_body simple_stmt
   94              | /* empty */

   95 local_decl: type local_l semi_colon

   96 local_l: local_l TOK_COMMA local_var
   97        | local_var

   98 local_var: TOK_IDENT
   99          | TOK_IDENT TOK_ASSIGN expression

  100 function_decl: type TOK_IDENT func_param_l

  101 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN
  102             | func_param_l TOK_COMMA func_param
  103             | func_param
  104             | TOK_LPAREN TOK_RPAREN

  105 func_param: type TOK_IDENT

  106 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon

  107 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN
  108              | event_param_l TOK_COMMA event_param
  109              | event_param
  110              | TOK_LPAREN TOK_RPAREN

  111 event_param: type TOK_IDENT

  112 semi_colon: semi_colon TOK_SEMICOLON
  113           | TOK_SEMICOLON

  114 literal: TOK_UINTNUM
  115        | TOK_DOUBLENUM
  116        | TOK_STRCONST
  117        | TOK_TRUE
  118        | TOK_FALSE

  119 type: baseType
  120     | TOK_IDENT

  121 baseType: TOK_VOID
  122         | TOK_BOOL
  123         | TOK_BYTE
  124         | TOK_STRING
  125         | TOK_INT
  126         | TOK_DOUBLE
  127         | TOK_UNSIGNED TOK_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 28
TOK_PAT_OR (260) 26
TOK_PAT_NOT (261)
TOK_PLUS (262) 77
TOK_MINUS (263) 63 78
TOK_UMINUS (264)
TOK_MULT (265) 79
TOK_DIV (266) 80
TOK_MOD (267) 81
TOK_BITAND (268) 74
TOK_BITOR (269) 23 72
TOK_BITNOT (270) 62
TOK_BITXOR (271) 73
TOK_SHL (272) 75
TOK_SHR (273) 76
TOK_GT (274) 68
TOK_LT (275) 69
TOK_GE (276) 70
TOK_LE (277) 71
TOK_EQ (278) 66
TOK_NE (279) 67
TOK_AND (280) 65
TOK_OR (281) 64
TOK_NOT (282) 29 61
TOK_COMMA (283) 32 51 84 96 102 108
TOK_ASSIGN (284) 53 87 99
TOK_SEMICOLON (285) 112 113
TOK_COLON (286) 27
TOK_ARROW (287) 10
TOK_LBRACE (288) 14 15 17 18 37 47 91
TOK_RBRACE (289) 14 15 17 18 37 47 91
TOK_LPAREN (290) 25 31 48 49 50 60 101 104 107 110
TOK_RPAREN (291) 25 31 48 49 50 60 101 104 107 110
TOK_IF (292) 35 36
TOK_ELSE (293) 36
TOK_CLASS (294) 88
TOK_RETURN (295) 46
TOK_EVENT (296) 106
TOK_ANY (297) 30
TOK_PRINT (298)
TOK_UINTNUM (299) 114
TOK_DOUBLENUM (300) 115
TOK_VOID (301) 121
TOK_STRING (302) 124
TOK_STRCONST (303) 116
TOK_INT (304) 125 127
TOK_UNSIGNED (305) 127
TOK_BOOL (306) 122
TOK_BYTE (307) 123
TOK_DOUBLE (308) 126
TOK_SHORT (309)
TOK_TRUE (310) 117
TOK_FALSE (311) 118
TOK_IDENT (312) 31 32 33 49 50 82 86 87 88 98 99 100 105 106 111 120
TOK_DOUBLE_COLON (313)
TOK_LBRACK (314)
TOK_DOT (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
s_specification (62)
    on left: 1, on right: 0
program (63)
    on left: 2, on right: 1
specification (64)
    on left: 3 4 5, on right: 2 3 4
declaration (65)
    on left: 6 7 8 9, on right: 3
rule (66)
    on left: 10, on right: 4
rule_stmts (67)
    on left: 11 12 13, on right: 10
compound_stmt2 (68)
    on left: 14 15 16, on right: 11 12 14 15
compound_stmt1 (69)
    on left: 17 18, on right: 16
stmt_plus1 (70)
    on left: 19 20, on right: 17 19
primitive_all (71)
    on left: 21 22 23 24 25, on right: 10 25 26 27 28 29
binary_event_oprs (72)
    on left: 26 27 28 29, on right: 24
any_event (73)
    on left: 30, on right: 22
normal_event (74)
    on left: 31, on right: 21 23
event_aparam_l (75)
    on left: 32 33 34, on right: 31 32
if_then_else_stmt (76)
    on left: 35 36, on right: 45
basic_block (77)
    on left: 37 38 39 40, on right: 35 36
stmt_plus2 (78)
    on left: 41 42, on right: 37 41
simple_stmt (79)
    on left: 43 44 45 46, on right: 19 39 41 93
empty_block (80)
    on left: 47, on right: 38
condition (81)
    on left: 48, on right: 35 36
func_invocation (82)
    on left: 49 50, on right: 43 56
caller_param_l (83)
    on left: 51 52, on right: 49 51
assignment (84)
    on left: 53, on right: 44 57
expression (85)
    on left: 54 55 56 57 58 59 60, on right: 13 23 46 48 51 52 53 60
    61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81
    87 99
unary_operation (86)
    on left: 61 62 63, on right: 58
binary_operation (87)
    on left: 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81,
    on right: 59
ref_expr (88)
    on left: 82, on right: 53 55
global_decl (89)
    on left: 83, on right: 9
global_l (90)
    on left: 84 85, on right: 83 84
global_var (91)
    on left: 86 87, on right: 84 85
class_decl (92)
    on left: 88, on right: 8
function_proto (93)
    on left: 89 90, on right: 7
function_defn (94)
    on left: 91, on right: 90
function_body (95)
    on left: 92 93 94, on right: 91 92 93
local_decl (96)
    on left: 95, on right: 92
local_l (97)
    on left: 96 97, on right: 95 96
local_var (98)
    on left: 98 99, on right: 96 97
function_decl (99)
    on left: 100, on right: 89 90
func_param_l (100)
    on left: 101 102 103 104, on right: 100 101 102
func_param (101)
    on left: 105, on right: 102 103
event_decl (102)
    on left: 106, on right: 6
event_param_l (103)
    on left: 107 108 109 110, on right: 106 107 108
event_param (104)
    on left: 111, on right: 108 109
semi_colon (105)
    on left: 112 113, on right: 11 13 15 18 40 43 44 46 47 83 88 89
    91 95 106 112
literal (106)
    on left: 114 115 116 117 118, on right: 54
type (107)
    on left: 119 120, on right: 83 95 100 105 111
baseType (108)
    on left: 121 122 123 124 125 126 127, on right: 119


state 0

    0 $accept: . s_specification $end

    $default  reduce using rule 5 (specification)

    s_specification  go to state 1
    program          go to state 2
    specification    go to state 3


state 1

    0 $accept: s_specification . $end

    $end  shift, and go to state 4


state 2

    1 s_specification: program .

    $default  reduce using rule 1 (s_specification)


state 3

    2 program: specification .
    3 specification: specification . declaration
    4              | specification . rule

    TOK_NOT       shift, and go to state 5
    TOK_LPAREN    shift, and go to state 6
    TOK_CLASS     shift, and go to state 7
    TOK_EVENT     shift, and go to state 8
    TOK_ANY       shift, and go to state 9
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 17

    $default  reduce using rule 2 (program)

    declaration        go to state 18
    rule               go to state 19
    primitive_all      go to state 20
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23
    global_decl        go to state 24
    class_decl         go to state 25
    function_proto     go to state 26
    function_decl      go to state 27
    event_decl         go to state 28
    type               go to state 29
    baseType           go to state 30


state 4

    0 $accept: s_specification $end .

    $default  accept


state 5

   29 binary_event_oprs: TOK_NOT . primitive_all

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 6
    TOK_ANY     shift, and go to state 9
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 32
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23


state 6

   25 primitive_all: TOK_LPAREN . primitive_all TOK_RPAREN

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 6
    TOK_ANY     shift, and go to state 9
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 33
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23


state 7

   88 class_decl: TOK_CLASS . TOK_IDENT semi_colon

    TOK_IDENT  shift, and go to state 34


state 8

  106 event_decl: TOK_EVENT . TOK_IDENT event_param_l semi_colon

    TOK_IDENT  shift, and go to state 35


state 9

   30 any_event: TOK_ANY .

    $default  reduce using rule 30 (any_event)


state 10

  121 baseType: TOK_VOID .

    $default  reduce using rule 121 (baseType)


state 11

  124 baseType: TOK_STRING .

    $default  reduce using rule 124 (baseType)


state 12

  125 baseType: TOK_INT .

    $default  reduce using rule 125 (baseType)


state 13

  127 baseType: TOK_UNSIGNED . TOK_INT

    TOK_INT  shift, and go to state 36


state 14

  122 baseType: TOK_BOOL .

    $default  reduce using rule 122 (baseType)


state 15

  123 baseType: TOK_BYTE .

    $default  reduce using rule 123 (baseType)


state 16

  126 baseType: TOK_DOUBLE .

    $default  reduce using rule 126 (baseType)


state 17

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN
  120 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 37

    $default  reduce using rule 120 (type)


state 18

    3 specification: specification declaration .

    $default  reduce using rule 3 (specification)


state 19

    4 specification: specification rule .

    $default  reduce using rule 4 (specification)


state 20

   10 rule: primitive_all . TOK_ARROW rule_stmts
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 38
    TOK_PAT_OR    shift, and go to state 39
    TOK_COLON     shift, and go to state 40
    TOK_ARROW     shift, and go to state 41


state 21

   24 primitive_all: binary_event_oprs .

    $default  reduce using rule 24 (primitive_all)


state 22

   22 primitive_all: any_event .

    $default  reduce using rule 22 (primitive_all)


state 23

   21 primitive_all: normal_event .
   23              | normal_event . TOK_BITOR expression

    TOK_BITOR  shift, and go to state 42

    $default  reduce using rule 21 (primitive_all)


state 24

    9 declaration: global_decl .

    $default  reduce using rule 9 (declaration)


state 25

    8 declaration: class_decl .

    $default  reduce using rule 8 (declaration)


state 26

    7 declaration: function_proto .

    $default  reduce using rule 7 (declaration)


state 27

   89 function_proto: function_decl . semi_colon
   90               | function_decl . function_defn

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 44

    function_defn  go to state 45
    semi_colon     go to state 46


state 28

    6 declaration: event_decl .

    $default  reduce using rule 6 (declaration)


state 29

   83 global_decl: type . global_l semi_colon
  100 function_decl: type . TOK_IDENT func_param_l

    TOK_IDENT  shift, and go to state 47

    global_l    go to state 48
    global_var  go to state 49


state 30

  119 type: baseType .

    $default  reduce using rule 119 (type)


state 31

   31 normal_event: TOK_IDENT . TOK_LPAREN event_aparam_l TOK_RPAREN

    TOK_LPAREN  shift, and go to state 37


state 32

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR
   29                  | TOK_NOT primitive_all .

    $default  reduce using rule 29 (binary_event_oprs)


state 33

   25 primitive_all: TOK_LPAREN primitive_all . TOK_RPAREN
   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 38
    TOK_PAT_OR    shift, and go to state 39
    TOK_COLON     shift, and go to state 40
    TOK_RPAREN    shift, and go to state 50


state 34

   88 class_decl: TOK_CLASS TOK_IDENT . semi_colon

    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 51


state 35

  106 event_decl: TOK_EVENT TOK_IDENT . event_param_l semi_colon

    TOK_LPAREN    shift, and go to state 52
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    event_param_l  go to state 54
    event_param    go to state 55
    type           go to state 56
    baseType       go to state 30


state 36

  127 baseType: TOK_UNSIGNED TOK_INT .

    $default  reduce using rule 127 (baseType)


state 37

   31 normal_event: TOK_IDENT TOK_LPAREN . event_aparam_l TOK_RPAREN

    TOK_IDENT  shift, and go to state 57

    $default  reduce using rule 34 (event_aparam_l)

    event_aparam_l  go to state 58


state 38

   28 binary_event_oprs: primitive_all TOK_PAT_STAR .

    $default  reduce using rule 28 (binary_event_oprs)


state 39

   26 binary_event_oprs: primitive_all TOK_PAT_OR . primitive_all

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 6
    TOK_ANY     shift, and go to state 9
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 59
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23


state 40

   27 binary_event_oprs: primitive_all TOK_COLON . primitive_all

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 6
    TOK_ANY     shift, and go to state 9
    TOK_IDENT   shift, and go to state 31

    primitive_all      go to state 60
    binary_event_oprs  go to state 21
    any_event          go to state 22
    normal_event       go to state 23


state 41

   10 rule: primitive_all TOK_ARROW . rule_stmts

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LBRACE     shift, and go to state 64
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    rule_stmts        go to state 72
    compound_stmt2    go to state 73
    compound_stmt1    go to state 74
    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 77
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 42

   23 primitive_all: normal_event TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 82
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 43

  113 semi_colon: TOK_SEMICOLON .

    $default  reduce using rule 113 (semi_colon)


state 44

   91 function_defn: TOK_LBRACE . function_body TOK_RBRACE semi_colon

    $default  reduce using rule 94 (function_body)

    function_body  go to state 83


state 45

   90 function_proto: function_decl function_defn .

    $default  reduce using rule 90 (function_proto)


state 46

   89 function_proto: function_decl semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 89 (function_proto)


state 47

   86 global_var: TOK_IDENT .
   87           | TOK_IDENT . TOK_ASSIGN expression
  100 function_decl: type TOK_IDENT . func_param_l

    TOK_ASSIGN    shift, and go to state 85
    TOK_LPAREN    shift, and go to state 86
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    $default  reduce using rule 86 (global_var)

    func_param_l  go to state 87
    func_param    go to state 88
    type          go to state 89
    baseType      go to state 30


state 48

   83 global_decl: type global_l . semi_colon
   84 global_l: global_l . TOK_COMMA global_var

    TOK_COMMA      shift, and go to state 90
    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 91


state 49

   85 global_l: global_var .

    $default  reduce using rule 85 (global_l)


state 50

   25 primitive_all: TOK_LPAREN primitive_all TOK_RPAREN .

    $default  reduce using rule 25 (primitive_all)


state 51

   88 class_decl: TOK_CLASS TOK_IDENT semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 88 (class_decl)


state 52

  107 event_param_l: TOK_LPAREN . event_param_l TOK_RPAREN
  110              | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 52
    TOK_RPAREN    shift, and go to state 92
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    event_param_l  go to state 93
    event_param    go to state 55
    type           go to state 56
    baseType       go to state 30


state 53

  120 type: TOK_IDENT .

    $default  reduce using rule 120 (type)


state 54

  106 event_decl: TOK_EVENT TOK_IDENT event_param_l . semi_colon
  108 event_param_l: event_param_l . TOK_COMMA event_param

    TOK_COMMA      shift, and go to state 94
    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 95


state 55

  109 event_param_l: event_param .

    $default  reduce using rule 109 (event_param_l)


state 56

  111 event_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 96


state 57

   33 event_aparam_l: TOK_IDENT .

    $default  reduce using rule 33 (event_aparam_l)


state 58

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l . TOK_RPAREN
   32 event_aparam_l: event_aparam_l . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 97
    TOK_RPAREN  shift, and go to state 98


state 59

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   26                  | primitive_all TOK_PAT_OR primitive_all .
   27                  | primitive_all . TOK_COLON primitive_all
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 38
    TOK_COLON     shift, and go to state 40

    $default  reduce using rule 26 (binary_event_oprs)


state 60

   26 binary_event_oprs: primitive_all . TOK_PAT_OR primitive_all
   27                  | primitive_all . TOK_COLON primitive_all
   27                  | primitive_all TOK_COLON primitive_all .
   28                  | primitive_all . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 38

    $default  reduce using rule 27 (binary_event_oprs)


state 61

   63 unary_operation: TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 99
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 62

   62 unary_operation: TOK_BITNOT . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 100
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 63

   61 unary_operation: TOK_NOT . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 101
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 64

   14 compound_stmt2: TOK_LBRACE . compound_stmt2 TOK_RBRACE
   15               | TOK_LBRACE . compound_stmt2 semi_colon TOK_RBRACE
   17 compound_stmt1: TOK_LBRACE . stmt_plus1 TOK_RBRACE
   18               | TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 64

    $default  reduce using rule 20 (stmt_plus1)

    compound_stmt2  go to state 102
    compound_stmt1  go to state 74
    stmt_plus1      go to state 103
    semi_colon      go to state 104


state 65

   60 expression: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 105
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 66

  114 literal: TOK_UINTNUM .

    $default  reduce using rule 114 (literal)


state 67

  115 literal: TOK_DOUBLENUM .

    $default  reduce using rule 115 (literal)


state 68

  116 literal: TOK_STRCONST .

    $default  reduce using rule 116 (literal)


state 69

  117 literal: TOK_TRUE .

    $default  reduce using rule 117 (literal)


state 70

  118 literal: TOK_FALSE .

    $default  reduce using rule 118 (literal)


state 71

   49 func_invocation: TOK_IDENT . TOK_LPAREN caller_param_l TOK_RPAREN
   50                | TOK_IDENT . TOK_LPAREN TOK_RPAREN
   82 ref_expr: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 106

    $default  reduce using rule 82 (ref_expr)


state 72

   10 rule: primitive_all TOK_ARROW rule_stmts .

    $default  reduce using rule 10 (rule)


state 73

   11 rule_stmts: compound_stmt2 . semi_colon
   12           | compound_stmt2 .

    TOK_SEMICOLON  shift, and go to state 43

    $default  reduce using rule 12 (rule_stmts)

    semi_colon  go to state 107


state 74

   16 compound_stmt2: compound_stmt1 .

    $default  reduce using rule 16 (compound_stmt2)


state 75

   56 expression: func_invocation .

    $default  reduce using rule 56 (expression)


state 76

   57 expression: assignment .

    $default  reduce using rule 57 (expression)


state 77

   13 rule_stmts: expression . semi_colon
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 108
    TOK_MINUS      shift, and go to state 109
    TOK_MULT       shift, and go to state 110
    TOK_DIV        shift, and go to state 111
    TOK_MOD        shift, and go to state 112
    TOK_BITAND     shift, and go to state 113
    TOK_BITOR      shift, and go to state 114
    TOK_BITXOR     shift, and go to state 115
    TOK_SHL        shift, and go to state 116
    TOK_SHR        shift, and go to state 117
    TOK_GT         shift, and go to state 118
    TOK_LT         shift, and go to state 119
    TOK_GE         shift, and go to state 120
    TOK_LE         shift, and go to state 121
    TOK_EQ         shift, and go to state 122
    TOK_NE         shift, and go to state 123
    TOK_AND        shift, and go to state 124
    TOK_OR         shift, and go to state 125
    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 126


state 78

   58 expression: unary_operation .

    $default  reduce using rule 58 (expression)


state 79

   59 expression: binary_operation .

    $default  reduce using rule 59 (expression)


state 80

   53 assignment: ref_expr . TOK_ASSIGN expression
   55 expression: ref_expr .

    TOK_ASSIGN  shift, and go to state 127

    $default  reduce using rule 55 (expression)


state 81

   54 expression: literal .

    $default  reduce using rule 54 (expression)


state 82

   23 primitive_all: normal_event TOK_BITOR expression .
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123
    TOK_AND     shift, and go to state 124
    TOK_OR      shift, and go to state 125

    $default  reduce using rule 23 (primitive_all)


state 83

   91 function_defn: TOK_LBRACE function_body . TOK_RBRACE semi_colon
   92 function_body: function_body . local_decl
   93              | function_body . simple_stmt

    TOK_RBRACE    shift, and go to state 128
    TOK_IF        shift, and go to state 129
    TOK_RETURN    shift, and go to state 130
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 131

    if_then_else_stmt  go to state 132
    simple_stmt        go to state 133
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136
    local_decl         go to state 137
    type               go to state 138
    baseType           go to state 30


state 84

  112 semi_colon: semi_colon TOK_SEMICOLON .

    $default  reduce using rule 112 (semi_colon)


state 85

   87 global_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 139
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 86

  101 func_param_l: TOK_LPAREN . func_param_l TOK_RPAREN
  104             | TOK_LPAREN . TOK_RPAREN

    TOK_LPAREN    shift, and go to state 86
    TOK_RPAREN    shift, and go to state 140
    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    func_param_l  go to state 141
    func_param    go to state 88
    type          go to state 89
    baseType      go to state 30


state 87

  100 function_decl: type TOK_IDENT func_param_l .
  102 func_param_l: func_param_l . TOK_COMMA func_param

    TOK_COMMA  shift, and go to state 142

    $default  reduce using rule 100 (function_decl)


state 88

  103 func_param_l: func_param .

    $default  reduce using rule 103 (func_param_l)


state 89

  105 func_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 143


state 90

   84 global_l: global_l TOK_COMMA . global_var

    TOK_IDENT  shift, and go to state 144

    global_var  go to state 145


state 91

   83 global_decl: type global_l semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 83 (global_decl)


state 92

  110 event_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 110 (event_param_l)


state 93

  107 event_param_l: TOK_LPAREN event_param_l . TOK_RPAREN
  108              | event_param_l . TOK_COMMA event_param

    TOK_COMMA   shift, and go to state 94
    TOK_RPAREN  shift, and go to state 146


state 94

  108 event_param_l: event_param_l TOK_COMMA . event_param

    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    event_param  go to state 147
    type         go to state 56
    baseType     go to state 30


state 95

  106 event_decl: TOK_EVENT TOK_IDENT event_param_l semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 106 (event_decl)


state 96

  111 event_param: type TOK_IDENT .

    $default  reduce using rule 111 (event_param)


state 97

   32 event_aparam_l: event_aparam_l TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 148


state 98

   31 normal_event: TOK_IDENT TOK_LPAREN event_aparam_l TOK_RPAREN .

    $default  reduce using rule 31 (normal_event)


state 99

   63 unary_operation: TOK_MINUS expression .
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    $default  reduce using rule 63 (unary_operation)


state 100

   62 unary_operation: TOK_BITNOT expression .
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 108
    TOK_MINUS  shift, and go to state 109
    TOK_MULT   shift, and go to state 110
    TOK_DIV    shift, and go to state 111
    TOK_MOD    shift, and go to state 112
    TOK_SHL    shift, and go to state 116
    TOK_SHR    shift, and go to state 117

    $default  reduce using rule 62 (unary_operation)


state 101

   61 unary_operation: TOK_NOT expression .
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123

    $default  reduce using rule 61 (unary_operation)


state 102

   14 compound_stmt2: TOK_LBRACE compound_stmt2 . TOK_RBRACE
   15               | TOK_LBRACE compound_stmt2 . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 43
    TOK_RBRACE     shift, and go to state 149

    semi_colon  go to state 150


state 103

   17 compound_stmt1: TOK_LBRACE stmt_plus1 . TOK_RBRACE
   19 stmt_plus1: stmt_plus1 . simple_stmt

    TOK_RBRACE  shift, and go to state 151
    TOK_IF      shift, and go to state 129
    TOK_RETURN  shift, and go to state 130
    TOK_IDENT   shift, and go to state 71

    if_then_else_stmt  go to state 132
    simple_stmt        go to state 152
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136


state 104

   18 compound_stmt1: TOK_LBRACE semi_colon . TOK_RBRACE
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84
    TOK_RBRACE     shift, and go to state 153


state 105

   60 expression: TOK_LPAREN expression . TOK_RPAREN
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123
    TOK_AND     shift, and go to state 124
    TOK_OR      shift, and go to state 125
    TOK_RPAREN  shift, and go to state 154


state 106

   49 func_invocation: TOK_IDENT TOK_LPAREN . caller_param_l TOK_RPAREN
   50                | TOK_IDENT TOK_LPAREN . TOK_RPAREN

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_RPAREN     shift, and go to state 155
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    caller_param_l    go to state 156
    assignment        go to state 76
    expression        go to state 157
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 107

   11 rule_stmts: compound_stmt2 semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 11 (rule_stmts)


state 108

   77 binary_operation: expression TOK_PLUS . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 158
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 109

   78 binary_operation: expression TOK_MINUS . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 159
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 110

   79 binary_operation: expression TOK_MULT . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 160
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 111

   80 binary_operation: expression TOK_DIV . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 161
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 112

   81 binary_operation: expression TOK_MOD . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 162
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 113

   74 binary_operation: expression TOK_BITAND . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 163
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 114

   72 binary_operation: expression TOK_BITOR . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 164
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 115

   73 binary_operation: expression TOK_BITXOR . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 165
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 116

   75 binary_operation: expression TOK_SHL . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 166
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 117

   76 binary_operation: expression TOK_SHR . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 167
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 118

   68 binary_operation: expression TOK_GT . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 168
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 119

   69 binary_operation: expression TOK_LT . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 169
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 120

   70 binary_operation: expression TOK_GE . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 170
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 121

   71 binary_operation: expression TOK_LE . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 171
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 122

   66 binary_operation: expression TOK_EQ . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 172
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 123

   67 binary_operation: expression TOK_NE . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 173
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 124

   65 binary_operation: expression TOK_AND . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 174
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 125

   64 binary_operation: expression TOK_OR . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 175
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 126

   13 rule_stmts: expression semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 13 (rule_stmts)


state 127

   53 assignment: ref_expr TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 176
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 128

   91 function_defn: TOK_LBRACE function_body TOK_RBRACE . semi_colon

    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 177


state 129

   35 if_then_else_stmt: TOK_IF . condition basic_block
   36                  | TOK_IF . condition basic_block TOK_ELSE basic_block

    TOK_LPAREN  shift, and go to state 178

    condition  go to state 179


state 130

   46 simple_stmt: TOK_RETURN . expression semi_colon

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 180
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 131

   49 func_invocation: TOK_IDENT . TOK_LPAREN caller_param_l TOK_RPAREN
   50                | TOK_IDENT . TOK_LPAREN TOK_RPAREN
   82 ref_expr: TOK_IDENT .
  120 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 106

    TOK_IDENT  reduce using rule 120 (type)
    $default   reduce using rule 82 (ref_expr)


state 132

   45 simple_stmt: if_then_else_stmt .

    $default  reduce using rule 45 (simple_stmt)


state 133

   93 function_body: function_body simple_stmt .

    $default  reduce using rule 93 (function_body)


state 134

   43 simple_stmt: func_invocation . semi_colon

    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 181


state 135

   44 simple_stmt: assignment . semi_colon

    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 182


state 136

   53 assignment: ref_expr . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 127


state 137

   92 function_body: function_body local_decl .

    $default  reduce using rule 92 (function_body)


state 138

   95 local_decl: type . local_l semi_colon

    TOK_IDENT  shift, and go to state 183

    local_l    go to state 184
    local_var  go to state 185


state 139

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression
   87 global_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123
    TOK_AND     shift, and go to state 124
    TOK_OR      shift, and go to state 125

    $default  reduce using rule 87 (global_var)


state 140

  104 func_param_l: TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 104 (func_param_l)


state 141

  101 func_param_l: TOK_LPAREN func_param_l . TOK_RPAREN
  102             | func_param_l . TOK_COMMA func_param

    TOK_COMMA   shift, and go to state 142
    TOK_RPAREN  shift, and go to state 186


state 142

  102 func_param_l: func_param_l TOK_COMMA . func_param

    TOK_VOID      shift, and go to state 10
    TOK_STRING    shift, and go to state 11
    TOK_INT       shift, and go to state 12
    TOK_UNSIGNED  shift, and go to state 13
    TOK_BOOL      shift, and go to state 14
    TOK_BYTE      shift, and go to state 15
    TOK_DOUBLE    shift, and go to state 16
    TOK_IDENT     shift, and go to state 53

    func_param  go to state 187
    type        go to state 89
    baseType    go to state 30


state 143

  105 func_param: type TOK_IDENT .

    $default  reduce using rule 105 (func_param)


state 144

   86 global_var: TOK_IDENT .
   87           | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 85

    $default  reduce using rule 86 (global_var)


state 145

   84 global_l: global_l TOK_COMMA global_var .

    $default  reduce using rule 84 (global_l)


state 146

  107 event_param_l: TOK_LPAREN event_param_l TOK_RPAREN .

    $default  reduce using rule 107 (event_param_l)


state 147

  108 event_param_l: event_param_l TOK_COMMA event_param .

    $default  reduce using rule 108 (event_param_l)


state 148

   32 event_aparam_l: event_aparam_l TOK_COMMA TOK_IDENT .

    $default  reduce using rule 32 (event_aparam_l)


state 149

   14 compound_stmt2: TOK_LBRACE compound_stmt2 TOK_RBRACE .

    $default  reduce using rule 14 (compound_stmt2)


state 150

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon . TOK_RBRACE
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84
    TOK_RBRACE     shift, and go to state 188


state 151

   17 compound_stmt1: TOK_LBRACE stmt_plus1 TOK_RBRACE .

    $default  reduce using rule 17 (compound_stmt1)


state 152

   19 stmt_plus1: stmt_plus1 simple_stmt .

    $default  reduce using rule 19 (stmt_plus1)


state 153

   18 compound_stmt1: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 18 (compound_stmt1)


state 154

   60 expression: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 60 (expression)


state 155

   50 func_invocation: TOK_IDENT TOK_LPAREN TOK_RPAREN .

    $default  reduce using rule 50 (func_invocation)


state 156

   49 func_invocation: TOK_IDENT TOK_LPAREN caller_param_l . TOK_RPAREN
   51 caller_param_l: caller_param_l . TOK_COMMA expression

    TOK_COMMA   shift, and go to state 189
    TOK_RPAREN  shift, and go to state 190


state 157

   52 caller_param_l: expression .
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123
    TOK_AND     shift, and go to state 124
    TOK_OR      shift, and go to state 125

    $default  reduce using rule 52 (caller_param_l)


state 158

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   77                 | expression TOK_PLUS expression .
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 110
    TOK_DIV   shift, and go to state 111
    TOK_MOD   shift, and go to state 112

    $default  reduce using rule 77 (binary_operation)


state 159

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   78                 | expression TOK_MINUS expression .
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_MULT  shift, and go to state 110
    TOK_DIV   shift, and go to state 111
    TOK_MOD   shift, and go to state 112

    $default  reduce using rule 78 (binary_operation)


state 160

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   79                 | expression TOK_MULT expression .
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    $default  reduce using rule 79 (binary_operation)


state 161

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   80                 | expression TOK_DIV expression .
   81                 | expression . TOK_MOD expression

    $default  reduce using rule 80 (binary_operation)


state 162

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression
   81                 | expression TOK_MOD expression .

    $default  reduce using rule 81 (binary_operation)


state 163

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   74                 | expression TOK_BITAND expression .
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 108
    TOK_MINUS  shift, and go to state 109
    TOK_MULT   shift, and go to state 110
    TOK_DIV    shift, and go to state 111
    TOK_MOD    shift, and go to state 112
    TOK_SHL    shift, and go to state 116
    TOK_SHR    shift, and go to state 117

    $default  reduce using rule 74 (binary_operation)


state 164

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   72                 | expression TOK_BITOR expression .
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117

    $default  reduce using rule 72 (binary_operation)


state 165

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   73                 | expression TOK_BITXOR expression .
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117

    $default  reduce using rule 73 (binary_operation)


state 166

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   75                 | expression TOK_SHL expression .
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 108
    TOK_MINUS  shift, and go to state 109
    TOK_MULT   shift, and go to state 110
    TOK_DIV    shift, and go to state 111
    TOK_MOD    shift, and go to state 112

    $default  reduce using rule 75 (binary_operation)


state 167

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   76                 | expression TOK_SHR expression .
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS   shift, and go to state 108
    TOK_MINUS  shift, and go to state 109
    TOK_MULT   shift, and go to state 110
    TOK_DIV    shift, and go to state 111
    TOK_MOD    shift, and go to state 112

    $default  reduce using rule 76 (binary_operation)


state 168

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   68                 | expression TOK_GT expression .
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 68 (binary_operation)


state 169

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   69                 | expression TOK_LT expression .
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 69 (binary_operation)


state 170

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   70                 | expression TOK_GE expression .
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 70 (binary_operation)


state 171

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   71                 | expression TOK_LE expression .
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 71 (binary_operation)


state 172

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   66                 | expression TOK_EQ expression .
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 66 (binary_operation)


state 173

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   67                 | expression TOK_NE expression .
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 67 (binary_operation)


state 174

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   65                 | expression TOK_AND expression .
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123

    $default  reduce using rule 65 (binary_operation)


state 175

   64 binary_operation: expression . TOK_OR expression
   64                 | expression TOK_OR expression .
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123
    TOK_AND     shift, and go to state 124

    $default  reduce using rule 64 (binary_operation)


state 176

   53 assignment: ref_expr TOK_ASSIGN expression .
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123
    TOK_AND     shift, and go to state 124
    TOK_OR      shift, and go to state 125

    $default  reduce using rule 53 (assignment)


state 177

   91 function_defn: TOK_LBRACE function_body TOK_RBRACE semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 91 (function_defn)


state 178

   48 condition: TOK_LPAREN . expression TOK_RPAREN

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 191
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 179

   35 if_then_else_stmt: TOK_IF condition . basic_block
   36                  | TOK_IF condition . basic_block TOK_ELSE basic_block

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 192
    TOK_IF         shift, and go to state 129
    TOK_RETURN     shift, and go to state 130
    TOK_IDENT      shift, and go to state 71

    if_then_else_stmt  go to state 132
    basic_block        go to state 193
    simple_stmt        go to state 194
    empty_block        go to state 195
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136
    semi_colon         go to state 196


state 180

   46 simple_stmt: TOK_RETURN expression . semi_colon
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS       shift, and go to state 108
    TOK_MINUS      shift, and go to state 109
    TOK_MULT       shift, and go to state 110
    TOK_DIV        shift, and go to state 111
    TOK_MOD        shift, and go to state 112
    TOK_BITAND     shift, and go to state 113
    TOK_BITOR      shift, and go to state 114
    TOK_BITXOR     shift, and go to state 115
    TOK_SHL        shift, and go to state 116
    TOK_SHR        shift, and go to state 117
    TOK_GT         shift, and go to state 118
    TOK_LT         shift, and go to state 119
    TOK_GE         shift, and go to state 120
    TOK_LE         shift, and go to state 121
    TOK_EQ         shift, and go to state 122
    TOK_NE         shift, and go to state 123
    TOK_AND        shift, and go to state 124
    TOK_OR         shift, and go to state 125
    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 197


state 181

   43 simple_stmt: func_invocation semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 43 (simple_stmt)


state 182

   44 simple_stmt: assignment semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 44 (simple_stmt)


state 183

   98 local_var: TOK_IDENT .
   99          | TOK_IDENT . TOK_ASSIGN expression

    TOK_ASSIGN  shift, and go to state 198

    $default  reduce using rule 98 (local_var)


state 184

   95 local_decl: type local_l . semi_colon
   96 local_l: local_l . TOK_COMMA local_var

    TOK_COMMA      shift, and go to state 199
    TOK_SEMICOLON  shift, and go to state 43

    semi_colon  go to state 200


state 185

   97 local_l: local_var .

    $default  reduce using rule 97 (local_l)


state 186

  101 func_param_l: TOK_LPAREN func_param_l TOK_RPAREN .

    $default  reduce using rule 101 (func_param_l)


state 187

  102 func_param_l: func_param_l TOK_COMMA func_param .

    $default  reduce using rule 102 (func_param_l)


state 188

   15 compound_stmt2: TOK_LBRACE compound_stmt2 semi_colon TOK_RBRACE .

    $default  reduce using rule 15 (compound_stmt2)


state 189

   51 caller_param_l: caller_param_l TOK_COMMA . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 201
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 190

   49 func_invocation: TOK_IDENT TOK_LPAREN caller_param_l TOK_RPAREN .

    $default  reduce using rule 49 (func_invocation)


state 191

   48 condition: TOK_LPAREN expression . TOK_RPAREN
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123
    TOK_AND     shift, and go to state 124
    TOK_OR      shift, and go to state 125
    TOK_RPAREN  shift, and go to state 202


state 192

   37 basic_block: TOK_LBRACE . stmt_plus2 TOK_RBRACE
   47 empty_block: TOK_LBRACE . semi_colon TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 43

    $default  reduce using rule 42 (stmt_plus2)

    stmt_plus2  go to state 203
    semi_colon  go to state 204


state 193

   35 if_then_else_stmt: TOK_IF condition basic_block .
   36                  | TOK_IF condition basic_block . TOK_ELSE basic_block

    TOK_ELSE  shift, and go to state 205

    TOK_ELSE  [reduce using rule 35 (if_then_else_stmt)]
    $default  reduce using rule 35 (if_then_else_stmt)


state 194

   39 basic_block: simple_stmt .

    $default  reduce using rule 39 (basic_block)


state 195

   38 basic_block: empty_block .

    $default  reduce using rule 38 (basic_block)


state 196

   40 basic_block: semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 40 (basic_block)


state 197

   46 simple_stmt: TOK_RETURN expression semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 46 (simple_stmt)


state 198

   99 local_var: TOK_IDENT TOK_ASSIGN . expression

    TOK_MINUS      shift, and go to state 61
    TOK_BITNOT     shift, and go to state 62
    TOK_NOT        shift, and go to state 63
    TOK_LPAREN     shift, and go to state 65
    TOK_UINTNUM    shift, and go to state 66
    TOK_DOUBLENUM  shift, and go to state 67
    TOK_STRCONST   shift, and go to state 68
    TOK_TRUE       shift, and go to state 69
    TOK_FALSE      shift, and go to state 70
    TOK_IDENT      shift, and go to state 71

    func_invocation   go to state 75
    assignment        go to state 76
    expression        go to state 206
    unary_operation   go to state 78
    binary_operation  go to state 79
    ref_expr          go to state 80
    literal           go to state 81


state 199

   96 local_l: local_l TOK_COMMA . local_var

    TOK_IDENT  shift, and go to state 183

    local_var  go to state 207


state 200

   95 local_decl: type local_l semi_colon .
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84

    $default  reduce using rule 95 (local_decl)


state 201

   51 caller_param_l: caller_param_l TOK_COMMA expression .
   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123
    TOK_AND     shift, and go to state 124
    TOK_OR      shift, and go to state 125

    $default  reduce using rule 51 (caller_param_l)


state 202

   48 condition: TOK_LPAREN expression TOK_RPAREN .

    $default  reduce using rule 48 (condition)


state 203

   37 basic_block: TOK_LBRACE stmt_plus2 . TOK_RBRACE
   41 stmt_plus2: stmt_plus2 . simple_stmt

    TOK_RBRACE  shift, and go to state 208
    TOK_IF      shift, and go to state 129
    TOK_RETURN  shift, and go to state 130
    TOK_IDENT   shift, and go to state 71

    if_then_else_stmt  go to state 132
    simple_stmt        go to state 209
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136


state 204

   47 empty_block: TOK_LBRACE semi_colon . TOK_RBRACE
  112 semi_colon: semi_colon . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 84
    TOK_RBRACE     shift, and go to state 210


state 205

   36 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE . basic_block

    TOK_SEMICOLON  shift, and go to state 43
    TOK_LBRACE     shift, and go to state 192
    TOK_IF         shift, and go to state 129
    TOK_RETURN     shift, and go to state 130
    TOK_IDENT      shift, and go to state 71

    if_then_else_stmt  go to state 132
    basic_block        go to state 211
    simple_stmt        go to state 194
    empty_block        go to state 195
    func_invocation    go to state 134
    assignment         go to state 135
    ref_expr           go to state 136
    semi_colon         go to state 196


state 206

   64 binary_operation: expression . TOK_OR expression
   65                 | expression . TOK_AND expression
   66                 | expression . TOK_EQ expression
   67                 | expression . TOK_NE expression
   68                 | expression . TOK_GT expression
   69                 | expression . TOK_LT expression
   70                 | expression . TOK_GE expression
   71                 | expression . TOK_LE expression
   72                 | expression . TOK_BITOR expression
   73                 | expression . TOK_BITXOR expression
   74                 | expression . TOK_BITAND expression
   75                 | expression . TOK_SHL expression
   76                 | expression . TOK_SHR expression
   77                 | expression . TOK_PLUS expression
   78                 | expression . TOK_MINUS expression
   79                 | expression . TOK_MULT expression
   80                 | expression . TOK_DIV expression
   81                 | expression . TOK_MOD expression
   99 local_var: TOK_IDENT TOK_ASSIGN expression .

    TOK_PLUS    shift, and go to state 108
    TOK_MINUS   shift, and go to state 109
    TOK_MULT    shift, and go to state 110
    TOK_DIV     shift, and go to state 111
    TOK_MOD     shift, and go to state 112
    TOK_BITAND  shift, and go to state 113
    TOK_BITOR   shift, and go to state 114
    TOK_BITXOR  shift, and go to state 115
    TOK_SHL     shift, and go to state 116
    TOK_SHR     shift, and go to state 117
    TOK_GT      shift, and go to state 118
    TOK_LT      shift, and go to state 119
    TOK_GE      shift, and go to state 120
    TOK_LE      shift, and go to state 121
    TOK_EQ      shift, and go to state 122
    TOK_NE      shift, and go to state 123
    TOK_AND     shift, and go to state 124
    TOK_OR      shift, and go to state 125

    $default  reduce using rule 99 (local_var)


state 207

   96 local_l: local_l TOK_COMMA local_var .

    $default  reduce using rule 96 (local_l)


state 208

   37 basic_block: TOK_LBRACE stmt_plus2 TOK_RBRACE .

    $default  reduce using rule 37 (basic_block)


state 209

   41 stmt_plus2: stmt_plus2 simple_stmt .

    $default  reduce using rule 41 (stmt_plus2)


state 210

   47 empty_block: TOK_LBRACE semi_colon TOK_RBRACE .

    $default  reduce using rule 47 (empty_block)


state 211

   36 if_then_else_stmt: TOK_IF condition basic_block TOK_ELSE basic_block .

    $default  reduce using rule 36 (if_then_else_stmt)
