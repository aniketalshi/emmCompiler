
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  int x;
  int a = (10+20);
  int b = (5-2);
  int c = (1+10*100);
  int d = a*b;
  int e = (1-c);
  int f = (b/4);
  int g = (10/2);
  int h = (10%2);
  int i = (1|(1&0));
  int j = (0&1);
  int k = 1^1;
  int l = (1<<2);
  int m = (100>>2);
  int bar(int aa) {
    
    return (aa+1);
  };
  int foo(int a) {
    
    a=10;
    if (!a)     a=2;
    else     a=3;
    if (a==1)     a=2;
    else     a=((3+bar(a))+bar(a)*2);
    return a;
  };
 

========================Type Checking========================
mytests/in29:25:Warning: Incompatible type for agrument 1 for operator `!'

======================Memory Allocation======================


====Global Declarations
Variable: x, Offset: 0
Variable: a, Offset: 4
Variable: b, Offset: 8
Variable: c, Offset: 12
Variable: d, Offset: 16
Variable: e, Offset: 20
Variable: f, Offset: 24
Variable: g, Offset: 28
Variable: h, Offset: 32
Variable: i, Offset: 36
Variable: j, Offset: 40
Variable: k, Offset: 44
Variable: l, Offset: 48
Variable: m, Offset: 52

====Function 'bar'
==Formal Parameters
Variable: aa, Offset: 8
==Local Variables


====Function 'foo'
==Formal Parameters
Variable: a, Offset: 8
==Local Variables

======================3 Addr Generation======================
global:
        __vreg0 = 10 + 20
        a = __vreg0
        __vreg1 = 5 - 2
        b = __vreg1
        __vreg2 = 10 * 100
        __vreg3 = 1 + __vreg2
        c = __vreg3
        __vreg4 = a * b
        d = __vreg4
        __vreg5 = 1 - c
        e = __vreg5
        __vreg6 = b / 4
        f = __vreg6
        __vreg7 = 10 / 2
        g = __vreg7
        __vreg8 = 10 % 2
        h = __vreg8
        __vreg9 = 1 & 0
        __vreg10 = 1 | __vreg9
        i = __vreg10
        __vreg11 = 0 & 1
        j = __vreg11
        __vreg12 = 1 ^ 1
        k = __vreg12
        __vreg13 = 1 << 2
        l = __vreg13
        __vreg14 = 100 >> 2
        m = __vreg14
bar:
        enter bar
        fparam aa
        __vreg15 = aa + 1
        return __vreg15
        leave bar
foo:
        enter foo
        fparam a
        a = 10
        if a goto L5:
        goto L4:
L4:
        a = 2
        goto L3:
L5:
        a = 3
L3:
        if a == 1 goto L7:
        goto L8:
L7:
        a = 2
        goto L6:
L8:
        aparam a
        __vreg16 = call bar
L9:
        __vreg17 = 3 + __vreg16
        aparam a
        __vreg18 = call bar
L10:
        __vreg19 = __vreg18 * 2
        __vreg20 = __vreg17 + __vreg19
        a = __vreg20
L6:
        return a
        leave foo

====================== Basic Code Optimization ======================
global:
        __vreg0 = 10 + 20
        a = __vreg0
        __vreg1 = 5 - 2
        b = __vreg1
        __vreg2 = 10 * 100
        __vreg3 = 1 + __vreg2
        c = __vreg3
        __vreg4 = a * b
        d = __vreg4
        __vreg5 = 1 - c
        e = __vreg5
        __vreg6 = b / 4
        f = __vreg6
        __vreg7 = 10 / 2
        g = __vreg7
        __vreg8 = 10 % 2
        h = __vreg8
        __vreg9 = 1 & 0
        __vreg10 = 1 | __vreg9
        i = __vreg10
        __vreg11 = 0 & 1
        j = __vreg11
        __vreg12 = 1 ^ 1
        k = __vreg12
        __vreg13 = 1 << 2
        l = __vreg13
        __vreg14 = 100 >> 2
        m = __vreg14
bar:
        enter bar
        fparam aa
        __vreg15 = aa + 1
        return __vreg15
        leave bar
foo:
        enter foo
        fparam a
        a = 10
        if a goto L5:
        goto L4:
L4:
        a = 2
        goto L3:
L5:
        a = 3
L3:
        if a == 1 goto L7:
        goto L8:
L7:
        a = 2
        goto L6:
L8:
        aparam a
        __vreg16 = call bar
L9:
        __vreg17 = 3 + __vreg16
        aparam a
        __vreg18 = call bar
L10:
        __vreg19 = __vreg18 * 2
        __vreg20 = __vreg17 + __vreg19
        a = __vreg20
L6:
        return a
        leave foo


====================Basic Block creation=====================

#####bar#####
bar:
        enter bar
        fparam aa
        __vreg15 = aa + 1
        return __vreg15
        leave bar
        next: ( )


#####foo#####
foo:
        enter foo
        fparam a
        a = 10
        if a goto L5:
        goto L4:
        next: ( L5 L4 )
L4:
        a = 2
        goto L3:
        next: ( L3 )
L5:
        a = 3
        next: ( L3 )
L3:
        if a == 1 goto L7:
        goto L8:
        next: ( L7 L8 )
L7:
        a = 2
        goto L6:
        next: ( L6 )
L8:
        aparam a
        __vreg16 = call bar
        next: ( L9 )
L9:
        __vreg17 = 3 + __vreg16
        aparam a
        __vreg18 = call bar
        next: ( L10 )
L10:
        __vreg19 = __vreg18 * 2
        __vreg20 = __vreg17 + __vreg19
        a = __vreg20
        next: ( L6 )
L6:
        return a
        leave foo
        next: ( )


#####global#####
global:
        __vreg0 = 10 + 20
        a = __vreg0
        __vreg1 = 5 - 2
        b = __vreg1
        __vreg2 = 10 * 100
        __vreg3 = 1 + __vreg2
        c = __vreg3
        __vreg4 = a * b
        d = __vreg4
        __vreg5 = 1 - c
        e = __vreg5
        __vreg6 = b / 4
        f = __vreg6
        __vreg7 = 10 / 2
        g = __vreg7
        __vreg8 = 10 % 2
        h = __vreg8
        __vreg9 = 1 & 0
        __vreg10 = 1 | __vreg9
        i = __vreg10
        __vreg11 = 0 & 1
        j = __vreg11
        __vreg12 = 1 ^ 1
        k = __vreg12
        __vreg13 = 1 << 2
        l = __vreg13
        __vreg14 = 100 >> 2
        m = __vreg14
        next: ( )
global:
        __vreg0 = 10 + 20
        a = __vreg0
        __vreg1 = 5 - 2
        b = __vreg1
        __vreg2 = 10 * 100
        __vreg3 = 1 + __vreg2
        c = __vreg3
        __vreg4 = a * b
        d = __vreg4
        __vreg5 = 1 - c
        e = __vreg5
        __vreg6 = b / 4
        f = __vreg6
        __vreg7 = 10 / 2
        g = __vreg7
        __vreg8 = 10 % 2
        h = __vreg8
        __vreg9 = 1 & 0
        __vreg10 = 1 | __vreg9
        i = __vreg10
        __vreg11 = 0 & 1
        j = __vreg11
        __vreg12 = 1 ^ 1
        k = __vreg12
        __vreg13 = 1 << 2
        l = __vreg13
        __vreg14 = 100 >> 2
        m = __vreg14
        next: ( )


=========================Optimization========================

#####bar#####
bar:
        enter bar
        fparam aa
        __vreg15 = aa + 1
        return __vreg15
        leave bar
        next: ( )


#####foo#####
foo:
        enter foo
        fparam a
        a = 10
        if a goto L5:
        goto L4:
        next: ( L5 L4 )
L4:
        a = 2
        goto L3:
        next: ( L3 )
L5:
        a = 3
        next: ( L3 )
L3:
        if a == 1 goto L7:
        goto L8:
        next: ( L7 L8 )
L7:
        a = 2
        goto L6:
        next: ( L6 )
L8:
        aparam a
        __vreg16 = call bar
        next: ( L9 )
L9:
        __vreg17 = 3 + __vreg16
        aparam a
        __vreg18 = call bar
        next: ( L10 )
L10:
        __vreg19 = __vreg18 * 2
        __vreg20 = __vreg17 + __vreg19
        a = __vreg20
        next: ( L6 )
L6:
        return a
        leave foo
        next: ( )


#####global#####
global:
        __vreg0 = 10 + 20
        a = __vreg0
        __vreg1 = 5 - 2
        b = __vreg1
        __vreg2 = 10 * 100
        __vreg3 = 1 + __vreg2
        c = __vreg3
        __vreg4 = a * b
        d = __vreg4
        __vreg5 = 1 - c
        e = __vreg5
        __vreg6 = b / 4
        f = __vreg6
        __vreg7 = 10 / 2
        g = __vreg7
        __vreg8 = 10 % 2
        h = __vreg8
        __vreg9 = 1 & 0
        __vreg10 = 1 | __vreg9
        i = __vreg10
        __vreg11 = 0 & 1
        j = __vreg11
        __vreg12 = 1 ^ 1
        k = __vreg12
        __vreg13 = 1 << 2
        l = __vreg13
        __vreg14 = 100 >> 2
        m = __vreg14
        next: ( )
global:
        __vreg0 = 10 + 20
        a = __vreg0
        __vreg1 = 5 - 2
        b = __vreg1
        __vreg2 = 10 * 100
        __vreg3 = 1 + __vreg2
        c = __vreg3
        __vreg4 = a * b
        d = __vreg4
        __vreg5 = 1 - c
        e = __vreg5
        __vreg6 = b / 4
        f = __vreg6
        __vreg7 = 10 / 2
        g = __vreg7
        __vreg8 = 10 % 2
        h = __vreg8
        __vreg9 = 1 & 0
        __vreg10 = 1 | __vreg9
        i = __vreg10
        __vreg11 = 0 & 1
        j = __vreg11
        __vreg12 = 1 ^ 1
        k = __vreg12
        __vreg13 = 1 << 2
        l = __vreg13
        __vreg14 = 100 >> 2
        m = __vreg14
        next: ( )


===================Final Code generation=====================
JMP begin
_S_START: PRTS "\nEnter event name:"
IN R005
JMPC EQ R005 120 _S_END
PRTS "Invalid Input\n"
JMP _S_START

begin: MOVI  10000 R000
JMP global

bar: ADD  R000 4  R000
LDI  R000 R020
ADD R020 1 R021
MOVI R021  R001
ADD  R000 4  R000
LDI  R000  R004
JMPI  R004
ADD  R000 4  R000
LDI  R000  R004
JMPI  R004

foo: ADD  R000 4  R000
LDI  R000 R022
MOVI 10 R022
JMPC NE  0 L5
JMP L4

L4: MOVI 2 R022
JMP L3

L5: MOVI 3 R022

L3: JMPC EQ R022 1 L7
JMP L8

L7: MOVI 2 R022
JMP L6

L8: STI  R022  R000
SUB  R000 4  R000
MOVL L11 R023
STI  R023  R000
SUB  R000 4  R000
STI  R022  R000
SUB  R000 4  R000
JMP  bar
L11: MOVI  R001 R024
ADD  R000 4  R000
LDI  R000 R022

L9: ADD 3 R024 R025
STI  R025  R000
SUB  R000 4  R000
STI  R024  R000
SUB  R000 4  R000
MOVL L12 R026
STI  R026  R000
SUB  R000 4  R000
STI  R022  R000
SUB  R000 4  R000
JMP  bar
L12: MOVI  R001 R027
ADD  R000 4  R000
LDI  R000 R024
ADD  R000 4  R000
LDI  R000 R026

L10: MUL R027 2 R028
ADD R025 R028 R029
MOVI R029 R022

L6: MOVI R022  R001
ADD  R000 4  R000
LDI  R000  R004
JMPI  R004
ADD  R000 4  R000
LDI  R000  R004
JMPI  R004

global: ADD 10 20 R030
MOVI R030 R031
SUB 5 2 R032
MOVI R032 R033
MUL 10 100 R034
ADD 1 R034 R035
MOVI R035 R036
MUL R031 R033 R037
MOVI R037 R038
SUB 1 R036 R039
MOVI R039 R040
DIV R033 4 R041
MOVI R041 R042
DIV 10 2 R043
MOVI R043 R044
MOD 10 2 R045
MOVI R045 R046
AND 1 0 R047
OR 1 R047 R048
MOVI R048 R049
AND 0 1 R050
MOVI R050 R051
XOR 1 1 R052
MOVI R052 R053
MOVI 1  R003
MOVI 2  R002
L14: JMPC GT 0  R002 L13
MUL  R003 2  R003
SUB  R002 1  R002
JMP L14
L13:
MOVI  R003 R054
MOVI R054 R055
MOVI 100  R003
MOVI 2  R002
L16: JMPC GT 0  R002 L15
DIV  R003 2  R003
SUB  R002 1  R002
JMP L16
L15:
MOVI  R003 R056
MOVI R056 R057
JMP _S_START
global: ADD 10 20 R030
MOVI R030 R031
SUB 5 2 R032
MOVI R032 R033
MUL 10 100 R034
ADD 1 R034 R035
MOVI R035 R036
MUL R031 R033 R037
MOVI R037 R038
SUB 1 R036 R039
MOVI R039 R040
DIV R033 4 R041
MOVI R041 R042
DIV 10 2 R043
MOVI R043 R044
MOD 10 2 R045
MOVI R045 R046
AND 1 0 R047
OR 1 R047 R048
MOVI R048 R049
AND 0 1 R050
MOVI R050 R051
XOR 1 1 R052
MOVI R052 R053
MOVI 1  R003
MOVI 2  R002
L18: JMPC GT 0  R002 L17
MUL  R003 2  R003
SUB  R002 1  R002
JMP L18
L17:
MOVI  R003 R054
MOVI R054 R055
MOVI 100  R003
MOVI 2  R002
L20: JMPC GT 0  R002 L19
DIV  R003 2  R003
SUB  R002 1  R002
JMP L20
L19:
MOVI  R003 R056
MOVI R056 R057
JMP _S_START

_S_END: PRTS "DONE"


Compilation Successful
