
=================Lexical and Syntax Parsing==================

=========================AST Builder=========================
 
  int x;
  int a = (10+20);
  int b = (5-2);
  int c = (1+10*100);
  int d = a*b;
  int e = (1-c);
  int f = (b/4);
  int g = (10/2);
  int h = (10%2);
  int i = (1|(1&0));
  int j = (0&1);
  int k = 1^1;
  int l = (1<<2);
  int m = (100>>2);
  int bar(int aa) {
    
    return (aa+1);
  };
  int foo(int a) {
    
    a=10;
    if (a==1)     a=2;
    else     a=((3+bar(a))+bar(a)*2);
    return a;
  };
 

========================Type Checking========================

======================Memory Allocation======================


====Global Declarations
Variable: x, Offset: 0
Variable: a, Offset: 4
Variable: b, Offset: 8
Variable: c, Offset: 12
Variable: d, Offset: 16
Variable: e, Offset: 20
Variable: f, Offset: 24
Variable: g, Offset: 28
Variable: h, Offset: 32
Variable: i, Offset: 36
Variable: j, Offset: 40
Variable: k, Offset: 44
Variable: l, Offset: 48
Variable: m, Offset: 52

====Function 'bar'
==Formal Parameters
Variable: aa, Offset: 8
==Local Variables


====Function 'foo'
==Formal Parameters
Variable: a, Offset: 8
==Local Variables

======================3 Addr Generation======================
global:
        __vreg0 = 10 + 20
        a = __vreg0
        __vreg1 = 5 - 2
        b = __vreg1
        __vreg2 = 10 * 100
        __vreg3 = 1 + __vreg2
        c = __vreg3
        __vreg4 = a * b
        d = __vreg4
        __vreg5 = 1 - c
        e = __vreg5
        __vreg6 = b / 4
        f = __vreg6
        __vreg7 = 10 / 2
        g = __vreg7
        __vreg8 = 10 % 2
        h = __vreg8
        __vreg9 = 1 & 0
        __vreg10 = 1 | __vreg9
        i = __vreg10
        __vreg11 = 0 & 1
        j = __vreg11
        __vreg12 = 1 ^ 1
        k = __vreg12
        __vreg13 = 1 << 2
        l = __vreg13
        __vreg14 = 100 >> 2
        m = __vreg14
bar:
        enter bar
        fparam aa
        __vreg15 = aa + 1
        return __vreg15
        leave bar
foo:
        enter foo
        fparam a
        a = 10
        if a == 1 goto L4:
        goto L5:
L4:
        a = 2
        goto L3:
L5:
        aparam a
        __vreg16 = call bar
L6:
        __vreg17 = 3 + __vreg16
        aparam a
        __vreg18 = call bar
L7:
        __vreg19 = __vreg18 * 2
        __vreg20 = __vreg17 + __vreg19
        a = __vreg20
L3:
        return a
        leave foo

====================Basic Block creation=====================

====Basic Blocks Container: bar=====


PrevBlocks: 
Block Start: bar
        enter bar
        fparam aa
        __vreg15 = aa + 1
        return __vreg15
        leave bar
Block end: bar
NextBlocks:

====Basic Blocks Container: foo=====


PrevBlocks: 
Block Start: foo
        enter foo
        fparam a
        a = 10
        if a == 1 goto L4:
        goto L5:
Block end: foo
NextBlocks:L4,L5,

PrevBlocks: foo,
Block Start: L4
        a = 2
        goto L3:
Block end: L4
NextBlocks:L3,

PrevBlocks: foo,
Block Start: L5
        aparam a
        __vreg16 = call bar
Block end: L5
NextBlocks:L6,

PrevBlocks: L4,L7,
Block Start: L3
        return a
        leave foo
Block end: L3
NextBlocks:

PrevBlocks: L5,
Block Start: L6
        __vreg17 = 3 + __vreg16
        aparam a
        __vreg18 = call bar
Block end: L6
NextBlocks:L7,

PrevBlocks: L6,
Block Start: L7
        __vreg19 = __vreg18 * 2
        __vreg20 = __vreg17 + __vreg19
        a = __vreg20
Block end: L7
NextBlocks:L3,

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        __vreg0 = 10 + 20
        a = __vreg0
        __vreg1 = 5 - 2
        b = __vreg1
        __vreg2 = 10 * 100
        __vreg3 = 1 + __vreg2
        c = __vreg3
        __vreg4 = a * b
        d = __vreg4
        __vreg5 = 1 - c
        e = __vreg5
        __vreg6 = b / 4
        f = __vreg6
        __vreg7 = 10 / 2
        g = __vreg7
        __vreg8 = 10 % 2
        h = __vreg8
        __vreg9 = 1 & 0
        __vreg10 = 1 | __vreg9
        i = __vreg10
        __vreg11 = 0 & 1
        j = __vreg11
        __vreg12 = 1 ^ 1
        k = __vreg12
        __vreg13 = 1 << 2
        l = __vreg13
        __vreg14 = 100 >> 2
        m = __vreg14
Block end: global
NextBlocks:global,

====================Optimization=====================

====Basic Blocks Container: bar=====


PrevBlocks: 
Block Start: bar
        enter bar
        fparam aa
        __vreg15 = aa + 1
        return __vreg15
        leave bar
Block end: bar
NextBlocks:

====Basic Blocks Container: foo=====


PrevBlocks: 
Block Start: foo
        enter foo
        fparam a
        a = 10
        if a == 1 goto L4:
        goto L5:
Block end: foo
NextBlocks:L4,L5,

PrevBlocks: foo,
Block Start: L4
        a = 2
        goto L3:
Block end: L4
NextBlocks:L3,

PrevBlocks: foo,
Block Start: L5
        aparam a
        __vreg16 = call bar
Block end: L5
NextBlocks:L6,

PrevBlocks: L4,L7,
Block Start: L3
        return a
        leave foo
Block end: L3
NextBlocks:

PrevBlocks: L5,
Block Start: L6
        __vreg17 = 3 + __vreg16
        aparam a
        __vreg18 = call bar
Block end: L6
NextBlocks:L7,

PrevBlocks: L6,
Block Start: L7
        __vreg19 = __vreg18 * 2
        __vreg20 = __vreg17 + __vreg19
        a = __vreg20
Block end: L7
NextBlocks:L3,

====Basic Blocks Container: global=====


PrevBlocks: global,
Block Start: global
        __vreg0 = 30
        a = 30
        __vreg1 = 3
        b = 3
        __vreg2 = 1000
        __vreg3 = 1001
        c = 1001
        __vreg4 = 90
        d = 90
        __vreg5 = -1000
        e = -1000
        __vreg6 = 0
        f = 0
        __vreg7 = 5
        g = 5
        __vreg8 = 0
        h = 0
        __vreg9 = 0
        __vreg10 = 1
        i = 1
        __vreg11 = 0
        j = 0
        __vreg12 = 0
        k = 0
        __vreg13 = 4
        l = 4
        __vreg14 = 25
        m = 25
Block end: global
NextBlocks:global,

====================Final Code generation=====================
JMP begin: 
begin: 
MOVI  R000 10000
bar:
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R020
ADD R020 1 R021
MOVI R021  R001
JMP  R004
foo:
ADD  R000 4  R000
LDI  R000  R004
ADD  R000 4  R000
LDI  R000 R022
MOVI 10  R022
JMPC EQ R022 1 L4
JMP L5

L4:
MOVI 2  R022
JMP 

L5:
STI R022  R000
SUB  R000 4  R000

STI R023  R000
SUB  R000 4  R000
JMP bar
MOVI RRV_I R024

L3:
MOVI R022  R001
JMP  R004
L6:
ADD 3 R024 R025
STI R022  R000
SUB  R000 4  R000

STI R026  R000
SUB  R000 4  R000
JMP bar
MOVI RRV_I R027

L7:
MUL R027 2 R028
ADD R025 R028 R029
MOVI R029  R022
global:
MOVI 30  R030
MOVI 30  R031
MOVI 3  R032
MOVI 3  R033
MOVI 1000  R034
MOVI 1001  R035
MOVI 1001  R036
MOVI 90  R037
MOVI 90  R038
MOVI -1000  R039
MOVI -1000  R040
MOVI 0  R041
MOVI 0  R042
MOVI 5  R043
MOVI 5  R044
MOVI 0  R045
MOVI 0  R046
MOVI 0  R047
MOVI 1  R048
MOVI 1  R049
MOVI 0  R050
MOVI 0  R051
MOVI 0  R052
MOVI 0  R053
MOVI 4  R054
MOVI 4  R055
MOVI 25  R056
MOVI 25  R057
Compilation Successful
